<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="758.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="741" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="741" > </text>
<g id="frames">
<g >
<title>MultiAndPostList::find_next_match (2,840,000,000 samples, 0.42%)</title><rect x="237.3" y="533" width="5.0" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="240.29" y="543.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@@GLIBC_2.34 (290,000,000 samples, 0.04%)</title><rect x="1164.3" y="661" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1167.29" y="671.5" ></text>
</g>
<g >
<title>GlassTable::find (36,760,000,000 samples, 5.49%)</title><rect x="41.2" y="501" width="64.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="44.19" y="511.5" >GlassTa..</text>
</g>
<g >
<title>prometheus::detail::MetricsHandler::handleGet (520,000,000 samples, 0.08%)</title><rect x="1188.9" y="565" width="1.0" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1191.94" y="575.5" ></text>
</g>
<g >
<title>__page_cache_alloc (100,000,000 samples, 0.01%)</title><rect x="909.7" y="229" width="0.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="912.74" y="239.5" ></text>
</g>
<g >
<title>OrPostList::get_docid (3,560,000,000 samples, 0.53%)</title><rect x="1079.7" y="549" width="6.2" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="1082.67" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (70,000,000 samples, 0.01%)</title><rect x="1099.3" y="549" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1102.34" y="559.5" ></text>
</g>
<g >
<title>__x64_sys_write (960,000,000 samples, 0.14%)</title><rect x="1166.3" y="629" width="1.7" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1169.28" y="639.5" ></text>
</g>
<g >
<title>GlassCursor::read_tag (270,000,000 samples, 0.04%)</title><rect x="148.1" y="357" width="0.5" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="151.14" y="367.5" ></text>
</g>
<g >
<title>rmqueue (200,000,000 samples, 0.03%)</title><rect x="906.9" y="165" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="909.87" y="175.5" ></text>
</g>
<g >
<title>vfs_read (23,700,000,000 samples, 3.54%)</title><rect x="791.7" y="357" width="41.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="794.71" y="367.5" >vfs..</text>
</g>
<g >
<title>Xapian::Internal::QueryTerm::get_description[abi:cxx11] (150,000,000 samples, 0.02%)</title><rect x="1147.3" y="501" width="0.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1150.31" y="511.5" ></text>
</g>
<g >
<title>__clone (90,000,000 samples, 0.01%)</title><rect x="1188.5" y="677" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1191.54" y="687.5" ></text>
</g>
<g >
<title>page_cache_ra_unbounded (750,000,000 samples, 0.11%)</title><rect x="828.1" y="229" width="1.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="831.11" y="239.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::AttributesHashMap::GetAllEnteries (390,000,000 samples, 0.06%)</title><rect x="1188.9" y="357" width="0.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1191.94" y="367.5" ></text>
</g>
<g >
<title>GlassTable::block_to_cursor (2,370,000,000 samples, 0.35%)</title><rect x="143.7" y="325" width="4.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="146.74" y="335.5" ></text>
</g>
<g >
<title>rocksdb::lru_cache::LRUCacheShard::Lookup (470,000,000 samples, 0.07%)</title><rect x="154.2" y="181" width="0.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="157.18" y="191.5" ></text>
</g>
<g >
<title>GlassDatabase::get_doclength (10,410,000,000 samples, 1.55%)</title><rect x="1027.8" y="517" width="18.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1030.84" y="527.5" ></text>
</g>
<g >
<title>vfs_read (27,360,000,000 samples, 4.08%)</title><rect x="866.1" y="373" width="48.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="869.14" y="383.5" >vfs_..</text>
</g>
<g >
<title>ext4_readahead (70,000,000 samples, 0.01%)</title><rect x="122.9" y="213" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="125.87" y="223.5" ></text>
</g>
<g >
<title>OrPostList::at_end (1,540,000,000 samples, 0.23%)</title><rect x="1074.9" y="549" width="2.7" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1077.91" y="559.5" ></text>
</g>
<g >
<title>filemap_read (26,460,000,000 samples, 3.95%)</title><rect x="49.7" y="325" width="46.6" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="52.66" y="335.5" >file..</text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (240,000,000 samples, 0.04%)</title><rect x="1188.0" y="597" width="0.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1191.01" y="607.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (70,000,000 samples, 0.01%)</title><rect x="1088.1" y="405" width="0.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1091.14" y="415.5" ></text>
</g>
<g >
<title>sky_work::common::AbtestInfo::MergeImpl (160,000,000 samples, 0.02%)</title><rect x="1157.4" y="485" width="0.3" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="1160.40" y="495.5" ></text>
</g>
<g >
<title>BranchPostList::~BranchPostList (100,000,000 samples, 0.01%)</title><rect x="1018.9" y="517" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1021.86" y="527.5" ></text>
</g>
<g >
<title>current_time (190,000,000 samples, 0.03%)</title><rect x="912.7" y="261" width="0.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="915.70" y="271.5" ></text>
</g>
<g >
<title>virtio_queue_rq (130,000,000 samples, 0.02%)</title><rect x="908.8" y="117" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="911.75" y="127.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (140,000,000 samples, 0.02%)</title><rect x="241.9" y="421" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="244.94" y="431.5" ></text>
</g>
<g >
<title>GlassTable::find (3,150,000,000 samples, 0.47%)</title><rect x="118.2" y="485" width="5.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="121.22" y="495.5" ></text>
</g>
<g >
<title>LeafPostList::get_weight (12,050,000,000 samples, 1.80%)</title><rect x="1025.0" y="533" width="21.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1027.97" y="543.5" ></text>
</g>
<g >
<title>do_syscall_64 (60,000,000 samples, 0.01%)</title><rect x="1072.7" y="405" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1075.71" y="415.5" ></text>
</g>
<g >
<title>do_open (200,000,000 samples, 0.03%)</title><rect x="20.3" y="549" width="0.4" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="23.32" y="559.5" ></text>
</g>
<g >
<title>__xas_next (60,000,000 samples, 0.01%)</title><rect x="825.9" y="245" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="828.95" y="255.5" ></text>
</g>
<g >
<title>__submit_bio (90,000,000 samples, 0.01%)</title><rect x="910.5" y="149" width="0.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="913.48" y="159.5" ></text>
</g>
<g >
<title>filemap_get_pages (310,000,000 samples, 0.05%)</title><rect x="1017.4" y="293" width="0.6" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1020.45" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (90,000,000 samples, 0.01%)</title><rect x="1188.5" y="645" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1191.54" y="655.5" ></text>
</g>
<g >
<title>GlassTable::read_block (32,960,000,000 samples, 4.92%)</title><rect x="42.6" y="469" width="58.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="45.62" y="479.5" >GlassT..</text>
</g>
<g >
<title>opentelemetry::v1::nostd::function_ref&lt;bool  (350,000,000 samples, 0.05%)</title><rect x="1153.4" y="501" width="0.6" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1156.37" y="511.5" ></text>
</g>
<g >
<title>sky_work::common::AbtestSessionUtil::AbtestListConvertToProto (400,000,000 samples, 0.06%)</title><rect x="1158.4" y="581" width="0.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1161.39" y="591.5" ></text>
</g>
<g >
<title>seccomp_run_filters (210,000,000 samples, 0.03%)</title><rect x="99.7" y="341" width="0.4" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="102.73" y="351.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::SyncMultiMetricStorage::RecordLong (130,000,000 samples, 0.02%)</title><rect x="10.5" y="549" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="13.51" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1,460,000,000 samples, 0.22%)</title><rect x="1096.8" y="549" width="2.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1099.77" y="559.5" ></text>
</g>
<g >
<title>filemap_get_pages (200,000,000 samples, 0.03%)</title><rect x="857.5" y="293" width="0.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="860.45" y="303.5" ></text>
</g>
<g >
<title>Xapian::MiniRankWeight::get_sumpart (420,000,000 samples, 0.06%)</title><rect x="1048.5" y="517" width="0.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1051.46" y="527.5" ></text>
</g>
<g >
<title>add_to_page_cache_lru (230,000,000 samples, 0.03%)</title><rect x="829.7" y="213" width="0.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="832.70" y="223.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::AttributesHashMap::GetOrSetDefault (710,000,000 samples, 0.11%)</title><rect x="1154.1" y="549" width="1.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1157.06" y="559.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,700,000,000 samples, 0.25%)</title><rect x="855.3" y="405" width="3.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="858.31" y="415.5" ></text>
</g>
<g >
<title>Xapian::Weight::Internal::accumulate_stats (3,630,000,000 samples, 0.54%)</title><rect x="118.1" y="533" width="6.4" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="121.08" y="543.5" ></text>
</g>
<g >
<title>add_to_page_cache_lru (100,000,000 samples, 0.01%)</title><rect x="1017.7" y="229" width="0.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1020.68" y="239.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;opentelemetry::v1::sdk::metrics::AttributesHashMap,  (130,000,000 samples, 0.02%)</title><rect x="1189.6" y="357" width="0.3" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1192.63" y="367.5" ></text>
</g>
<g >
<title>GlassTable::block_to_cursor (200,000,000 samples, 0.03%)</title><rect x="1011.3" y="453" width="0.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1014.27" y="463.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::MetricReader::Collect (520,000,000 samples, 0.08%)</title><rect x="1188.9" y="517" width="1.0" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1191.94" y="527.5" ></text>
</g>
<g >
<title>start_thread (80,000,000 samples, 0.01%)</title><rect x="1189.9" y="677" width="0.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1192.86" y="687.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;opentelemetry::v1::sdk::metrics::HistogramPointData, opentelemetry::v1::sdk::metrics::LastValuePointData, opentelemetry::v1::sdk::metrics::DropPointData&gt;::_Variadic_union&lt;opentelemetry::v1::sdk::metrics::HistogramPointData const&amp;&gt; (60,000,000 samples, 0.01%)</title><rect x="1189.4" y="101" width="0.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1192.37" y="111.5" ></text>
</g>
<g >
<title>std::visit&lt;opentelemetry::v1::sdk::common::GetHashForAttributeValueVisitor, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;&amp;&gt; (130,000,000 samples, 0.02%)</title><rect x="1153.7" y="453" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1156.67" y="463.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (70,000,000 samples, 0.01%)</title><rect x="1018.1" y="389" width="0.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1021.08" y="399.5" ></text>
</g>
<g >
<title>bvar::print_fd_count (90,000,000 samples, 0.01%)</title><rect x="1188.7" y="613" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1191.73" y="623.5" ></text>
</g>
<g >
<title>alloc_pages (730,000,000 samples, 0.11%)</title><rect x="906.0" y="213" width="1.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="908.95" y="223.5" ></text>
</g>
<g >
<title>GlassPostList::next_chunk (90,000,000 samples, 0.01%)</title><rect x="1072.7" y="501" width="0.2" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1075.69" y="511.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (240,000,000 samples, 0.04%)</title><rect x="1188.0" y="629" width="0.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1191.01" y="639.5" ></text>
</g>
<g >
<title>GlassPostList::next_chunk (1,100,000,000 samples, 0.16%)</title><rect x="1016.6" y="501" width="1.9" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1019.59" y="511.5" ></text>
</g>
<g >
<title>google::protobuf::internal::RepeatedPtrFieldBase::DestroyProtos (220,000,000 samples, 0.03%)</title><rect x="1159.9" y="485" width="0.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1162.92" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; (60,000,000 samples, 0.01%)</title><rect x="1154.9" y="389" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1157.88" y="399.5" ></text>
</g>
<g >
<title>__GI_____strtoll_l_internal (300,000,000 samples, 0.04%)</title><rect x="1165.7" y="677" width="0.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1168.71" y="687.5" ></text>
</g>
<g >
<title>[unknown] (60,000,000 samples, 0.01%)</title><rect x="1165.3" y="645" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1168.27" y="655.5" ></text>
</g>
<g >
<title>ext4_mpage_readpages (230,000,000 samples, 0.03%)</title><rect x="830.3" y="181" width="0.4" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="833.26" y="191.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::SyncMetricStorage::RecordLong (130,000,000 samples, 0.02%)</title><rect x="10.5" y="533" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="13.51" y="543.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (830,000,000 samples, 0.12%)</title><rect x="1016.7" y="421" width="1.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1019.74" y="431.5" ></text>
</g>
<g >
<title>blk_mq_submit_bio (80,000,000 samples, 0.01%)</title><rect x="910.5" y="133" width="0.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="913.48" y="143.5" ></text>
</g>
<g >
<title>Glass::make_valuechunk_key[abi:cxx11] (330,000,000 samples, 0.05%)</title><rect x="40.3" y="517" width="0.6" height="15.0" fill="rgb(230,117,27)" rx="2" ry="2" />
<text  x="43.29" y="527.5" ></text>
</g>
<g >
<title>apache::thrift::clientSendT&lt; (290,000,000 samples, 0.04%)</title><rect x="27.9" y="517" width="0.5" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="30.89" y="527.5" ></text>
</g>
<g >
<title>[libjemalloc.so.2] (220,000,000 samples, 0.03%)</title><rect x="30.8" y="613" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="33.78" y="623.5" ></text>
</g>
<g >
<title>rocksdb::DBImplReadOnly::Get (550,000,000 samples, 0.08%)</title><rect x="1148.9" y="565" width="1.0" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1151.93" y="575.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (1,030,000,000 samples, 0.15%)</title><rect x="106.1" y="421" width="1.9" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="109.14" y="431.5" ></text>
</g>
<g >
<title>apache::thrift::GeneratedAsyncProcessorBase::serializeResponseImpl&lt;apache::thrift::SerializedResponse, apache::thrift::CompactProtocolWriter, apache::thrift::ThriftPresult&lt;true, apache::thrift::FieldData&lt; (250,000,000 samples, 0.04%)</title><rect x="1161.9" y="517" width="0.5" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1164.95" y="527.5" ></text>
</g>
<g >
<title>io_read_block (120,000,000 samples, 0.02%)</title><rect x="100.4" y="453" width="0.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="103.45" y="463.5" ></text>
</g>
<g >
<title>__memcmp_evex_movbe (220,000,000 samples, 0.03%)</title><rect x="1049.3" y="517" width="0.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1052.32" y="527.5" ></text>
</g>
<g >
<title>handle_pte_fault (80,000,000 samples, 0.01%)</title><rect x="146.8" y="53" width="0.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="149.77" y="63.5" ></text>
</g>
<g >
<title>do_syscall_64 (70,000,000 samples, 0.01%)</title><rect x="237.0" y="421" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="240.02" y="431.5" ></text>
</g>
<g >
<title>google::protobuf::internal::(anonymous namespace)::CreateString (80,000,000 samples, 0.01%)</title><rect x="1157.4" y="453" width="0.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1160.44" y="463.5" ></text>
</g>
<g >
<title>opentelemetry::v1::trace::Tracer::GetCurrentSpan (80,000,000 samples, 0.01%)</title><rect x="1151.2" y="565" width="0.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1154.20" y="575.5" ></text>
</g>
<g >
<title>apache::thrift::CompactProtocolReader::readString&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (140,000,000 samples, 0.02%)</title><rect x="29.3" y="517" width="0.3" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="32.32" y="527.5" ></text>
</g>
<g >
<title>do_timer_settime.part.0 (60,000,000 samples, 0.01%)</title><rect x="1145.4" y="501" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1148.44" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1,060,000,000 samples, 0.16%)</title><rect x="1142.7" y="565" width="1.8" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1145.66" y="575.5" ></text>
</g>
<g >
<title>filemap_read (1,670,000,000 samples, 0.25%)</title><rect x="144.4" y="165" width="3.0" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="147.44" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (230,000,000 samples, 0.03%)</title><rect x="1144.5" y="565" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1147.53" y="575.5" ></text>
</g>
<g >
<title>__secure_computing (390,000,000 samples, 0.06%)</title><rect x="915.7" y="357" width="0.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="918.68" y="367.5" ></text>
</g>
<g >
<title>kl::server::GrammarContext::buildOrQuery (290,000,000 samples, 0.04%)</title><rect x="1151.9" y="581" width="0.5" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1154.85" y="591.5" ></text>
</g>
<g >
<title>proc_fill_cache (60,000,000 samples, 0.01%)</title><rect x="1188.7" y="485" width="0.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1191.73" y="495.5" ></text>
</g>
<g >
<title>GlassPostList::move_forward_in_chunk_to_at_least (18,450,000,000 samples, 2.75%)</title><rect x="978.4" y="501" width="32.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="981.42" y="511.5" >Gl..</text>
</g>
<g >
<title>GlassCursor::read_tag (910,000,000 samples, 0.14%)</title><rect x="1016.7" y="485" width="1.6" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1019.66" y="495.5" ></text>
</g>
<g >
<title>add_to_page_cache_lru (150,000,000 samples, 0.02%)</title><rect x="122.4" y="229" width="0.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="125.45" y="239.5" ></text>
</g>
<g >
<title>aisearch::SUSearchResult::write&lt;apache::thrift::CompactProtocolWriter&gt; (300,000,000 samples, 0.04%)</title><rect x="31.7" y="565" width="0.5" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="34.68" y="575.5" ></text>
</g>
<g >
<title>clear_page_erms (80,000,000 samples, 0.01%)</title><rect x="909.7" y="165" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="912.74" y="175.5" ></text>
</g>
<g >
<title>__memchr_evex (560,000,000 samples, 0.08%)</title><rect x="22.6" y="661" width="1.0" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="25.61" y="671.5" ></text>
</g>
<g >
<title>GlassTable::read_block (250,000,000 samples, 0.04%)</title><rect x="148.2" y="325" width="0.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="151.16" y="335.5" ></text>
</g>
<g >
<title>xa_load (110,000,000 samples, 0.02%)</title><rect x="909.5" y="229" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="912.51" y="239.5" ></text>
</g>
<g >
<title>xas_load (160,000,000 samples, 0.02%)</title><rect x="147.0" y="117" width="0.3" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="150.03" y="127.5" ></text>
</g>
<g >
<title>__libc_pread (2,810,000,000 samples, 0.42%)</title><rect x="118.5" y="437" width="4.9" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="121.47" y="447.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (300,000,000 samples, 0.04%)</title><rect x="1013.1" y="293" width="0.5" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1016.08" y="303.5" ></text>
</g>
<g >
<title>non-virtual thunk to rocksdb::(anonymous namespace)::BytewiseComparatorImpl::Compare (70,000,000 samples, 0.01%)</title><rect x="158.1" y="229" width="0.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="161.07" y="239.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::trace::Span::~Span (390,000,000 samples, 0.06%)</title><rect x="1160.5" y="533" width="0.7" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1163.47" y="543.5" ></text>
</g>
<g >
<title>Xapian::Database::reopen (60,000,000 samples, 0.01%)</title><rect x="12.8" y="677" width="0.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="15.80" y="687.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::SyncMultiMetricStorage::RecordLong (110,000,000 samples, 0.02%)</title><rect x="28.5" y="581" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="31.51" y="591.5" ></text>
</g>
<g >
<title>rocksdb::TableCache::Get (140,000,000 samples, 0.02%)</title><rect x="160.0" y="341" width="0.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="163.01" y="351.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (510,000,000 samples, 0.08%)</title><rect x="21.7" y="613" width="0.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="24.69" y="623.5" ></text>
</g>
<g >
<title>GlassTable::prev_for_sequential (700,000,000 samples, 0.10%)</title><rect x="1012.7" y="469" width="1.3" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1015.75" y="479.5" ></text>
</g>
<g >
<title>alloc_empty_file (70,000,000 samples, 0.01%)</title><rect x="20.2" y="549" width="0.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="23.20" y="559.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (370,000,000 samples, 0.06%)</title><rect x="942.1" y="373" width="0.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="945.14" y="383.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::common::GetHashForAttributeMap (70,000,000 samples, 0.01%)</title><rect x="1155.6" y="485" width="0.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1158.57" y="495.5" ></text>
</g>
<g >
<title>__memcmp_evex_movbe (110,000,000 samples, 0.02%)</title><rect x="157.9" y="229" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="160.88" y="239.5" ></text>
</g>
<g >
<title>vfs_write (130,000,000 samples, 0.02%)</title><rect x="1162.6" y="549" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1165.62" y="559.5" ></text>
</g>
<g >
<title>GlassTable::readahead_key (70,000,000 samples, 0.01%)</title><rect x="117.0" y="533" width="0.1" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="119.97" y="543.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (29,130,000,000 samples, 4.35%)</title><rect x="46.2" y="405" width="51.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="49.17" y="415.5" >__x64..</text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::SyncMetricStorage::SyncMetricStorage (100,000,000 samples, 0.01%)</title><rect x="1154.7" y="469" width="0.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1157.67" y="479.5" ></text>
</g>
<g >
<title>GlassTable::read_block (30,920,000,000 samples, 4.61%)</title><rect x="862.1" y="453" width="54.5" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="865.10" y="463.5" >Glass..</text>
</g>
<g >
<title>apache::thrift::GeneratedAsyncProcessorBase::deserializeRequest&lt;apache::thrift::CompactProtocolReader, apache::thrift::ThriftPresult&lt;false, apache::thrift::FieldData&lt; (90,000,000 samples, 0.01%)</title><rect x="27.4" y="629" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="30.43" y="639.5" ></text>
</g>
<g >
<title>GlassTable::block_to_cursor (60,000,000 samples, 0.01%)</title><rect x="241.6" y="453" width="0.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="244.62" y="463.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock@@GLIBC_2.2.5 (80,000,000 samples, 0.01%)</title><rect x="154.4" y="165" width="0.2" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="157.44" y="175.5" ></text>
</g>
<g >
<title>opentelemetry::v1::exporter::metrics::PrometheusCollector::Collect (520,000,000 samples, 0.08%)</title><rect x="1188.9" y="533" width="1.0" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1191.94" y="543.5" ></text>
</g>
<g >
<title>rocksdb::BlockBasedTable::GetDataBlockFromCache&lt;rocksdb::Block_kData&gt; (630,000,000 samples, 0.09%)</title><rect x="153.9" y="213" width="1.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="156.90" y="223.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (100,000,000 samples, 0.01%)</title><rect x="95.1" y="293" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="98.10" y="303.5" ></text>
</g>
<g >
<title>__lock_text_start (770,000,000 samples, 0.11%)</title><rect x="1166.4" y="517" width="1.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1169.44" y="527.5" ></text>
</g>
<g >
<title>MultiAndPostList::find_next_match (489,240,000,000 samples, 73.02%)</title><rect x="160.5" y="549" width="861.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="163.50" y="559.5" >MultiAndPostList::find_next_match</text>
</g>
<g >
<title>kl::otel::JaegerPropagator::Extract (110,000,000 samples, 0.02%)</title><rect x="1150.0" y="581" width="0.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1152.97" y="591.5" ></text>
</g>
<g >
<title>Xapian::Enquire::Internal::~Internal (60,000,000 samples, 0.01%)</title><rect x="1145.7" y="581" width="0.1" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="1148.67" y="591.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (360,000,000 samples, 0.05%)</title><rect x="1014.5" y="293" width="0.7" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1017.54" y="303.5" ></text>
</g>
<g >
<title>do_sys_openat2 (560,000,000 samples, 0.08%)</title><rect x="20.2" y="597" width="1.0" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="23.18" y="607.5" ></text>
</g>
<g >
<title>new_sync_read (1,740,000,000 samples, 0.26%)</title><rect x="144.3" y="213" width="3.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="147.32" y="223.5" ></text>
</g>
<g >
<title>timer_delete@@GLIBC_2.34 (100,000,000 samples, 0.01%)</title><rect x="1182.2" y="661" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1185.18" y="671.5" ></text>
</g>
<g >
<title>__isoc99_sscanf (210,000,000 samples, 0.03%)</title><rect x="21.3" y="661" width="0.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="24.32" y="671.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (250,000,000 samples, 0.04%)</title><rect x="148.2" y="261" width="0.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="151.16" y="271.5" ></text>
</g>
<g >
<title>filemap_get_pages (460,000,000 samples, 0.07%)</title><rect x="112.3" y="325" width="0.8" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="115.27" y="335.5" ></text>
</g>
<g >
<title>civetweb-worker (550,000,000 samples, 0.08%)</title><rect x="1188.9" y="693" width="1.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1191.89" y="703.5" ></text>
</g>
<g >
<title>folly::detail::function::FunctionTraits&lt;void  (260,000,000 samples, 0.04%)</title><rect x="1161.9" y="597" width="0.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1164.93" y="607.5" ></text>
</g>
<g >
<title>GlassDocument::~GlassDocument (80,000,000 samples, 0.01%)</title><rect x="33.5" y="597" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="36.49" y="607.5" ></text>
</g>
<g >
<title>MultiAndPostList::get_weight (60,000,000 samples, 0.01%)</title><rect x="1046.2" y="533" width="0.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1049.19" y="543.5" ></text>
</g>
<g >
<title>__page_cache_alloc (60,000,000 samples, 0.01%)</title><rect x="934.3" y="229" width="0.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="937.34" y="239.5" ></text>
</g>
<g >
<title>populate_seccomp_data (80,000,000 samples, 0.01%)</title><rect x="99.6" y="341" width="0.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="102.59" y="351.5" ></text>
</g>
<g >
<title>add_to_page_cache_lru (180,000,000 samples, 0.03%)</title><rect x="909.9" y="229" width="0.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="912.92" y="239.5" ></text>
</g>
<g >
<title>filemap_read (60,000,000 samples, 0.01%)</title><rect x="1072.7" y="309" width="0.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1075.71" y="319.5" ></text>
</g>
<g >
<title>OrPostList::get_weight (720,000,000 samples, 0.11%)</title><rect x="1085.9" y="549" width="1.3" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="1088.94" y="559.5" ></text>
</g>
<g >
<title>GlassCursor::read_tag (33,420,000,000 samples, 4.99%)</title><rect x="859.9" y="485" width="58.9" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="862.90" y="495.5" >GlassC..</text>
</g>
<g >
<title>xas_load (3,630,000,000 samples, 0.54%)</title><rect x="87.9" y="277" width="6.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="90.91" y="287.5" ></text>
</g>
<g >
<title>page_cache_ra_unbounded (210,000,000 samples, 0.03%)</title><rect x="1017.6" y="245" width="0.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1020.57" y="255.5" ></text>
</g>
<g >
<title>__alloc_pages (130,000,000 samples, 0.02%)</title><rect x="122.2" y="197" width="0.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="125.22" y="207.5" ></text>
</g>
<g >
<title>__memcmp_evex_movbe (2,880,000,000 samples, 0.43%)</title><rect x="1062.0" y="533" width="5.0" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1064.95" y="543.5" ></text>
</g>
<g >
<title>kl::storage::Storage::get (570,000,000 samples, 0.09%)</title><rect x="1148.9" y="581" width="1.0" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="1151.90" y="591.5" ></text>
</g>
<g >
<title>GlassPostList::~GlassPostList (60,000,000 samples, 0.01%)</title><rect x="1018.9" y="485" width="0.1" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1021.87" y="495.5" ></text>
</g>
<g >
<title>aisearch::SUSearchServiceAsyncProcessor::executeRequest_ShardSearch&lt;apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter&gt; (643,310,000,000 samples, 96.01%)</title><rect x="28.8" y="645" width="1132.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="31.77" y="655.5" >aisearch::SUSearchServiceAsyncProcessor::executeRequest_ShardSearch&lt;apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter&gt;</text>
</g>
<g >
<title>Xapian::Internal::QueryBranch::do_or_like (90,000,000 samples, 0.01%)</title><rect x="142.6" y="421" width="0.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="145.61" y="431.5" ></text>
</g>
<g >
<title>rocksdb::IndexBlockIter::ParseNextIndexKey (110,000,000 samples, 0.02%)</title><rect x="158.2" y="245" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="161.20" y="255.5" ></text>
</g>
<g >
<title>xas_load (70,000,000 samples, 0.01%)</title><rect x="934.2" y="261" width="0.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="937.20" y="271.5" ></text>
</g>
<g >
<title>rocksdb::Block::NewDataIterator (80,000,000 samples, 0.01%)</title><rect x="153.7" y="245" width="0.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="156.65" y="255.5" ></text>
</g>
<g >
<title>GlassPostList::skip_to (60,000,000 samples, 0.01%)</title><rect x="1070.9" y="517" width="0.1" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="1073.92" y="527.5" ></text>
</g>
<g >
<title>sky_work::common::AbtestSessionManager::CreateAbtestSession (660,000,000 samples, 0.10%)</title><rect x="1157.0" y="597" width="1.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1160.00" y="607.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (240,000,000 samples, 0.04%)</title><rect x="1188.0" y="613" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1191.01" y="623.5" ></text>
</g>
<g >
<title>GlassTable::get_exact_entry (3,180,000,000 samples, 0.47%)</title><rect x="118.2" y="501" width="5.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="121.22" y="511.5" ></text>
</g>
<g >
<title>____fput (60,000,000 samples, 0.01%)</title><rect x="1153.1" y="437" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1156.05" y="447.5" ></text>
</g>
<g >
<title>rocksdb::MemTable::GetFromTable (60,000,000 samples, 0.01%)</title><rect x="159.9" y="341" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="162.85" y="351.5" ></text>
</g>
<g >
<title>MultiMatch::get_mset (577,490,000,000 samples, 86.19%)</title><rect x="124.5" y="565" width="1017.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="127.54" y="575.5" >MultiMatch::get_mset</text>
</g>
<g >
<title>Xapian::MiniRankWeight::get_sumpart (890,000,000 samples, 0.13%)</title><rect x="1091.4" y="549" width="1.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1094.36" y="559.5" ></text>
</g>
<g >
<title>[ai_index] (70,000,000 samples, 0.01%)</title><rect x="858.4" y="469" width="0.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="861.35" y="479.5" ></text>
</g>
<g >
<title>opentelemetry::proto::trace::v1::ResourceSpans::~ResourceSpans (60,000,000 samples, 0.01%)</title><rect x="1188.0" y="453" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1191.05" y="463.5" ></text>
</g>
<g >
<title>fput_many (210,000,000 samples, 0.03%)</title><rect x="47.5" y="389" width="0.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="50.48" y="399.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::trace::BatchSpanProcessor::DoBackgroundWork (240,000,000 samples, 0.04%)</title><rect x="1188.0" y="581" width="0.4" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="1191.01" y="591.5" ></text>
</g>
<g >
<title>current_time (90,000,000 samples, 0.01%)</title><rect x="832.3" y="245" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="835.32" y="255.5" ></text>
</g>
<g >
<title>do_madvise.part.0 (510,000,000 samples, 0.08%)</title><rect x="21.7" y="597" width="0.9" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="24.69" y="607.5" ></text>
</g>
<g >
<title>GlassValueManager::get_value[abi:cxx11] (45,860,000,000 samples, 6.84%)</title><rect x="34.1" y="549" width="80.8" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="37.14" y="559.5" >GlassValu..</text>
</g>
<g >
<title>ext4_file_read_iter (26,830,000,000 samples, 4.00%)</title><rect x="49.1" y="357" width="47.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="52.08" y="367.5" >ext4..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (520,000,000 samples, 0.08%)</title><rect x="21.7" y="645" width="0.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="24.69" y="655.5" ></text>
</g>
<g >
<title>[unknown] (280,000,000 samples, 0.04%)</title><rect x="1161.9" y="629" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1164.91" y="639.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (130,000,000 samples, 0.02%)</title><rect x="241.9" y="341" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="244.94" y="351.5" ></text>
</g>
<g >
<title>__x64_sys_futex (60,000,000 samples, 0.01%)</title><rect x="1165.4" y="613" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1168.38" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator= (110,000,000 samples, 0.02%)</title><rect x="1156.1" y="405" width="0.2" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1159.12" y="415.5" ></text>
</g>
<g >
<title>[ai_index] (150,000,000 samples, 0.02%)</title><rect x="919.4" y="485" width="0.3" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="922.44" y="495.5" ></text>
</g>
<g >
<title>google::protobuf::RepeatedPtrField&lt;opentelemetry::proto::trace::v1::ResourceSpans&gt;::~RepeatedPtrField (60,000,000 samples, 0.01%)</title><rect x="1188.0" y="501" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1191.05" y="511.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt;  (110,000,000 samples, 0.02%)</title><rect x="1154.7" y="517" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1157.65" y="527.5" ></text>
</g>
<g >
<title>new_sync_read (960,000,000 samples, 0.14%)</title><rect x="106.2" y="389" width="1.7" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="109.23" y="399.5" ></text>
</g>
<g >
<title>sky_work::common::AbtestSession::Init (560,000,000 samples, 0.08%)</title><rect x="1157.0" y="581" width="1.0" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1160.01" y="591.5" ></text>
</g>
<g >
<title>seccomp_run_filters (90,000,000 samples, 0.01%)</title><rect x="834.9" y="309" width="0.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="837.88" y="319.5" ></text>
</g>
<g >
<title>google::protobuf::internal::UntypedMapBase::ClearTable (250,000,000 samples, 0.04%)</title><rect x="1159.9" y="517" width="0.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1162.87" y="527.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::lower_bound (70,000,000 samples, 0.01%)</title><rect x="1154.3" y="421" width="0.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1157.34" y="431.5" ></text>
</g>
<g >
<title>std::__do_visit&lt;std::__detail::__variant::__deduce_visit_result&lt;std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, opentelemetry::v1::sdk::common::AttributeConverter&amp;, std::variant&lt;bool, int, long, unsigned int, double, char const*, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, opentelemetry::v1::nostd::span&lt;bool const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;int const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;long const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;unsigned int const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;double const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const, 18446744073709551615ul&gt;, unsigned long, opentelemetry::v1::nostd::span&lt;unsigned long const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;unsigned char const, 18446744073709551615ul&gt; &gt;&amp;&gt; (60,000,000 samples, 0.01%)</title><rect x="1155.6" y="437" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1158.57" y="447.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::DefaultAggregation::CreateAggregation (90,000,000 samples, 0.01%)</title><rect x="1154.7" y="453" width="0.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1157.67" y="463.5" ></text>
</g>
<g >
<title>Xapian::Internal::QueryOr::postlist (9,750,000,000 samples, 1.46%)</title><rect x="142.4" y="485" width="17.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="145.42" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (360,000,000 samples, 0.05%)</title><rect x="1183.5" y="677" width="0.7" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1186.52" y="687.5" ></text>
</g>
<g >
<title>__fget_light (110,000,000 samples, 0.02%)</title><rect x="791.4" y="357" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="794.40" y="367.5" ></text>
</g>
<g >
<title>rocksdb::BlockIter&lt;rocksdb::Slice&gt;::ParseNextKey&lt;rocksdb::DecodeEntry&gt; (130,000,000 samples, 0.02%)</title><rect x="156.4" y="213" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="159.43" y="223.5" ></text>
</g>
<g >
<title>find_in_branch_&lt;Glass::LeafItem&gt; (1,480,000,000 samples, 0.22%)</title><rect x="103.3" y="485" width="2.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="106.32" y="495.5" ></text>
</g>
<g >
<title>google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInternal (230,000,000 samples, 0.03%)</title><rect x="1157.4" y="517" width="0.4" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="1160.37" y="527.5" ></text>
</g>
<g >
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual (830,000,000 samples, 0.12%)</title><rect x="150.5" y="261" width="1.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="153.48" y="271.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock@@GLIBC_2.2.5 (70,000,000 samples, 0.01%)</title><rect x="1164.8" y="661" width="0.1" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1167.80" y="671.5" ></text>
</g>
<g >
<title>new_sync_read (70,000,000 samples, 0.01%)</title><rect x="237.0" y="373" width="0.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="240.02" y="383.5" ></text>
</g>
<g >
<title>kl::meta::MetaManager::read_term_count (5,110,000,000 samples, 0.76%)</title><rect x="149.9" y="373" width="9.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="152.87" y="383.5" ></text>
</g>
<g >
<title>GlassPostList::move_forward_in_chunk_to_at_least (70,000,000 samples, 0.01%)</title><rect x="1018.7" y="485" width="0.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1021.70" y="495.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::AttributesHashMap::GetOrSetDefault (70,000,000 samples, 0.01%)</title><rect x="28.5" y="549" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="31.54" y="559.5" ></text>
</g>
<g >
<title>sky_work::common::AbtestInfo::~AbtestInfo (170,000,000 samples, 0.03%)</title><rect x="1160.0" y="453" width="0.3" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1163.01" y="463.5" ></text>
</g>
<g >
<title>vfs_read (1,780,000,000 samples, 0.27%)</title><rect x="144.3" y="229" width="3.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="147.32" y="239.5" ></text>
</g>
<g >
<title>[unknown] (60,000,000 samples, 0.01%)</title><rect x="1188.4" y="677" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1191.43" y="687.5" ></text>
</g>
<g >
<title>GlassDocument::do_get_value[abi:cxx11] (46,310,000,000 samples, 6.91%)</title><rect x="34.0" y="565" width="81.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="37.00" y="575.5" >GlassDocu..</text>
</g>
<g >
<title>opentelemetry::v1::sdk::common::OrderedAttributeMap::OrderedAttributeMap (70,000,000 samples, 0.01%)</title><rect x="1156.5" y="517" width="0.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1159.52" y="527.5" ></text>
</g>
<g >
<title>generic_file_read_iter (350,000,000 samples, 0.05%)</title><rect x="942.2" y="309" width="0.6" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="945.18" y="319.5" ></text>
</g>
<g >
<title>MultiAndPostList::skip_to (340,000,000 samples, 0.05%)</title><rect x="242.3" y="533" width="0.6" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="245.29" y="543.5" ></text>
</g>
<g >
<title>clear_page_erms (70,000,000 samples, 0.01%)</title><rect x="828.2" y="149" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="831.18" y="159.5" ></text>
</g>
<g >
<title>find_in_branch_&lt;Glass::LeafItem&gt; (80,000,000 samples, 0.01%)</title><rect x="941.9" y="437" width="0.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="944.88" y="447.5" ></text>
</g>
<g >
<title>virtio_queue_rq (60,000,000 samples, 0.01%)</title><rect x="830.2" y="101" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="833.16" y="111.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (420,000,000 samples, 0.06%)</title><rect x="1160.4" y="565" width="0.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1163.43" y="575.5" ></text>
</g>
<g >
<title>std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;Xapian::Internal::MSetItem*, std::vector&lt;Xapian::Internal::MSetItem, std::allocator&lt;Xapian::Internal::MSetItem&gt; &gt; &gt;, long, Xapian::Internal::MSetItem, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (210,000,000 samples, 0.03%)</title><rect x="1100.1" y="533" width="0.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1103.06" y="543.5" ></text>
</g>
<g >
<title>rw_verify_area (80,000,000 samples, 0.01%)</title><rect x="857.9" y="357" width="0.2" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="860.93" y="367.5" ></text>
</g>
<g >
<title>native_send_call_func_ipi (260,000,000 samples, 0.04%)</title><rect x="22.0" y="485" width="0.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="24.98" y="495.5" ></text>
</g>
<g >
<title>GlassTable::find (580,000,000 samples, 0.09%)</title><rect x="941.0" y="453" width="1.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="944.00" y="463.5" ></text>
</g>
<g >
<title>OrPostList::skip_to (42,840,000,000 samples, 6.39%)</title><rect x="943.4" y="533" width="75.5" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="946.41" y="543.5" >OrPostLi..</text>
</g>
<g >
<title>GlassDatabase::get_doclength (140,000,000 samples, 0.02%)</title><rect x="1023.3" y="533" width="0.3" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1026.35" y="543.5" ></text>
</g>
<g >
<title>GlassPostList::at_end (120,000,000 samples, 0.02%)</title><rect x="1070.3" y="533" width="0.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1073.28" y="543.5" ></text>
</g>
<g >
<title>ondemand_readahead (90,000,000 samples, 0.01%)</title><rect x="94.3" y="277" width="0.2" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="97.34" y="287.5" ></text>
</g>
<g >
<title>std::__pop_heap&lt;__gnu_cxx::__normal_iterator&lt;Xapian::Internal::MSetItem*, std::vector&lt;Xapian::Internal::MSetItem, std::allocator&lt;Xapian::Internal::MSetItem&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (17,720,000,000 samples, 2.64%)</title><rect x="1100.4" y="549" width="31.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1103.43" y="559.5" >st..</text>
</g>
<g >
<title>__libc_pread (170,000,000 samples, 0.03%)</title><rect x="143.1" y="293" width="0.3" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="146.09" y="303.5" ></text>
</g>
<g >
<title>__lock_text_start (320,000,000 samples, 0.05%)</title><rect x="831.1" y="245" width="0.6" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="834.11" y="255.5" ></text>
</g>
<g >
<title>__libc_pread (2,110,000,000 samples, 0.31%)</title><rect x="144.1" y="293" width="3.7" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="147.07" y="303.5" ></text>
</g>
<g >
<title>pack_glass_postlist_key (1,850,000,000 samples, 0.28%)</title><rect x="927.5" y="485" width="3.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="930.46" y="495.5" ></text>
</g>
<g >
<title>link_path_walk.part.0.constprop.0 (160,000,000 samples, 0.02%)</title><rect x="20.7" y="549" width="0.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="23.74" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt;, opentelemetry::v1::sdk::metrics::SyncMetricStorage::SyncMetricStorage (270,000,000 samples, 0.04%)</title><rect x="1156.0" y="485" width="0.5" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1159.03" y="495.5" ></text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (500,000,000 samples, 0.07%)</title><rect x="915.5" y="373" width="0.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="918.48" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (90,000,000 samples, 0.01%)</title><rect x="1188.5" y="661" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1191.54" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, opentelemetry::v1::sdk::metrics::SumPointData, opentelemetry::v1::sdk::metrics::HistogramPointData, opentelemetry::v1::sdk::metrics::LastValuePointData, opentelemetry::v1::sdk::metrics::DropPointData&gt;::_Variant_storage&lt;1ul, opentelemetry::v1::sdk::metrics::HistogramPointData const&amp;&gt; (60,000,000 samples, 0.01%)</title><rect x="1189.4" y="149" width="0.1" height="15.0" fill="rgb(253,220,52)" rx="2" ry="2" />
<text  x="1192.37" y="159.5" ></text>
</g>
<g >
<title>GlassTable::block_to_cursor (420,000,000 samples, 0.06%)</title><rect x="941.0" y="437" width="0.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="944.03" y="447.5" ></text>
</g>
<g >
<title>xas_load (80,000,000 samples, 0.01%)</title><rect x="857.6" y="261" width="0.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="860.63" y="271.5" ></text>
</g>
<g >
<title>ext4_mpage_readpages (160,000,000 samples, 0.02%)</title><rect x="910.4" y="197" width="0.2" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="913.36" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (100,000,000 samples, 0.01%)</title><rect x="114.6" y="533" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="117.64" y="543.5" ></text>
</g>
<g >
<title>generic_file_read_iter (22,760,000,000 samples, 3.40%)</title><rect x="792.6" y="309" width="40.0" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="795.56" y="319.5" >gen..</text>
</g>
<g >
<title>path_openat (500,000,000 samples, 0.07%)</title><rect x="20.2" y="565" width="0.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="23.20" y="575.5" ></text>
</g>
<g >
<title>__x64_sys_timer_create (150,000,000 samples, 0.02%)</title><rect x="1187.7" y="629" width="0.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1190.71" y="639.5" ></text>
</g>
<g >
<title>proc_readfd (90,000,000 samples, 0.01%)</title><rect x="1188.7" y="517" width="0.2" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="1191.73" y="527.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::SyncMultiMetricStorage::RecordLong (1,240,000,000 samples, 0.19%)</title><rect x="1153.3" y="581" width="2.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1156.28" y="591.5" ></text>
</g>
<g >
<title>fsnotify_perm.part.0 (160,000,000 samples, 0.02%)</title><rect x="914.0" y="325" width="0.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="917.02" y="335.5" ></text>
</g>
<g >
<title>opentelemetry::v1::common::KeyValueIterableView&lt;std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::ForEachKeyValue (90,000,000 samples, 0.01%)</title><rect x="1155.6" y="533" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1158.57" y="543.5" ></text>
</g>
<g >
<title>exc_page_fault (80,000,000 samples, 0.01%)</title><rect x="146.8" y="117" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="149.77" y="127.5" ></text>
</g>
<g >
<title>page_cache_ra_unbounded (90,000,000 samples, 0.01%)</title><rect x="122.0" y="245" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="125.02" y="255.5" ></text>
</g>
<g >
<title>__alloc_pages (700,000,000 samples, 0.10%)</title><rect x="906.0" y="197" width="1.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="908.99" y="207.5" ></text>
</g>
<g >
<title>apache::thrift::Client&lt;aisearch::SUSearchService&gt;::ShardSearchT&lt;apache::thrift::CompactProtocolWriter, apache::thrift::RpcOptions&amp;&gt; (290,000,000 samples, 0.04%)</title><rect x="27.9" y="533" width="0.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="30.89" y="543.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (70,000,000 samples, 0.01%)</title><rect x="237.0" y="405" width="0.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="240.02" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (830,000,000 samples, 0.12%)</title><rect x="1016.7" y="405" width="1.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1019.74" y="415.5" ></text>
</g>
<g >
<title>GlassPostList::current_chunk_contains (2,040,000,000 samples, 0.30%)</title><rect x="285.0" y="517" width="3.6" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="288.03" y="527.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (920,000,000 samples, 0.14%)</title><rect x="933.2" y="341" width="1.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="936.16" y="351.5" ></text>
</g>
<g >
<title>std::variant&lt;opentelemetry::v1::sdk::metrics::SumPointData, opentelemetry::v1::sdk::metrics::HistogramPointData, opentelemetry::v1::sdk::metrics::LastValuePointData, opentelemetry::v1::sdk::metrics::DropPointData&gt;::variant&lt;1ul, opentelemetry::v1::sdk::metrics::HistogramPointData const&amp;, opentelemetry::v1::sdk::metrics::HistogramPointData, void&gt; (70,000,000 samples, 0.01%)</title><rect x="1189.4" y="229" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1192.37" y="239.5" ></text>
</g>
<g >
<title>GlassPostList::get_doclength (610,000,000 samples, 0.09%)</title><rect x="1023.6" y="533" width="1.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1026.59" y="543.5" ></text>
</g>
<g >
<title>aisearch::AbtestContext::write&lt;apache::thrift::CompactProtocolWriter&gt; (80,000,000 samples, 0.01%)</title><rect x="28.0" y="437" width="0.2" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="31.03" y="447.5" ></text>
</g>
<g >
<title>process_new_connection (520,000,000 samples, 0.08%)</title><rect x="1188.9" y="629" width="1.0" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1191.94" y="639.5" ></text>
</g>
<g >
<title>rocksdb::BlockIter&lt;rocksdb::Slice&gt;::BinarySeek&lt;rocksdb::DecodeKey&gt; (270,000,000 samples, 0.04%)</title><rect x="155.5" y="245" width="0.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="158.54" y="255.5" ></text>
</g>
<g >
<title>sky_work::common::AbtestList::~AbtestList (250,000,000 samples, 0.04%)</title><rect x="1159.9" y="501" width="0.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1162.87" y="511.5" ></text>
</g>
<g >
<title>std::__invoke&lt;opentelemetry::v1::sdk::common::GetHashForAttributeValueVisitor, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (60,000,000 samples, 0.01%)</title><rect x="1153.8" y="405" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1156.76" y="415.5" ></text>
</g>
<g >
<title>std::__unguarded_linear_insert&lt;__gnu_cxx::__normal_iterator&lt;Xapian::Internal::MSetItem*, std::vector&lt;Xapian::Internal::MSetItem, std::allocator&lt;Xapian::Internal::MSetItem&gt; &gt; &gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool  (180,000,000 samples, 0.03%)</title><rect x="1141.2" y="549" width="0.3" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1144.20" y="559.5" ></text>
</g>
<g >
<title>get_page_from_freelist (160,000,000 samples, 0.02%)</title><rect x="828.2" y="165" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="831.18" y="175.5" ></text>
</g>
<g >
<title>rocksdb::MemTable::GetFromTable (880,000,000 samples, 0.13%)</title><rect x="150.4" y="293" width="1.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="153.43" y="303.5" ></text>
</g>
<g >
<title>__submit_bio (80,000,000 samples, 0.01%)</title><rect x="909.3" y="149" width="0.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="912.28" y="159.5" ></text>
</g>
<g >
<title>free (80,000,000 samples, 0.01%)</title><rect x="1179.6" y="677" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1182.59" y="687.5" ></text>
</g>
<g >
<title>__memmove_evex_unaligned_erms (170,000,000 samples, 0.03%)</title><rect x="858.5" y="469" width="0.3" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="861.48" y="479.5" ></text>
</g>
<g >
<title>filemap_get_pages (70,000,000 samples, 0.01%)</title><rect x="148.5" y="165" width="0.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="151.46" y="175.5" ></text>
</g>
<g >
<title>do_syscall_64 (980,000,000 samples, 0.15%)</title><rect x="933.1" y="405" width="1.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="936.09" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (29,440,000,000 samples, 4.39%)</title><rect x="864.6" y="405" width="51.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="867.55" y="415.5" >do_sy..</text>
</g>
<g >
<title>rocksdb::MemTable::Get (60,000,000 samples, 0.01%)</title><rect x="159.9" y="357" width="0.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="162.85" y="367.5" ></text>
</g>
<g >
<title>filemap_get_read_batch (3,790,000,000 samples, 0.57%)</title><rect x="821.4" y="261" width="6.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="824.44" y="271.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (290,000,000 samples, 0.04%)</title><rect x="1061.4" y="533" width="0.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1064.44" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (160,000,000 samples, 0.02%)</title><rect x="932.1" y="485" width="0.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="935.12" y="495.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (16,480,000,000 samples, 2.46%)</title><rect x="53.7" y="309" width="29.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="56.73" y="319.5" >co..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (830,000,000 samples, 0.12%)</title><rect x="1184.2" y="677" width="1.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1187.15" y="687.5" ></text>
</g>
<g >
<title>[unknown] (660,000,000 samples, 0.10%)</title><rect x="16.4" y="645" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="19.38" y="655.5" ></text>
</g>
<g >
<title>filemap_read (25,920,000,000 samples, 3.87%)</title><rect x="867.5" y="309" width="45.6" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="870.47" y="319.5" >file..</text>
</g>
<g >
<title>ext4_file_read_iter (490,000,000 samples, 0.07%)</title><rect x="1013.0" y="341" width="0.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1016.01" y="351.5" ></text>
</g>
<g >
<title>generic_fadvise (150,000,000 samples, 0.02%)</title><rect x="117.7" y="453" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="120.67" y="463.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (190,000,000 samples, 0.03%)</title><rect x="117.6" y="517" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="120.64" y="527.5" ></text>
</g>
<g >
<title>__libc_pread (140,000,000 samples, 0.02%)</title><rect x="241.9" y="437" width="0.3" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="244.94" y="447.5" ></text>
</g>
<g >
<title>ondemand_readahead (760,000,000 samples, 0.11%)</title><rect x="828.1" y="245" width="1.4" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="831.11" y="255.5" ></text>
</g>
<g >
<title>copy_page_to_iter (780,000,000 samples, 0.12%)</title><rect x="794.2" y="277" width="1.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="797.21" y="287.5" ></text>
</g>
<g >
<title>xas_load (1,120,000,000 samples, 0.17%)</title><rect x="826.1" y="245" width="2.0" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="829.09" y="255.5" ></text>
</g>
<g >
<title>rocksdb::DataBlockIter::SeekImpl (660,000,000 samples, 0.10%)</title><rect x="155.5" y="261" width="1.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="158.52" y="271.5" ></text>
</g>
<g >
<title>syscall (60,000,000 samples, 0.01%)</title><rect x="1165.4" y="661" width="0.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1168.38" y="671.5" ></text>
</g>
<g >
<title>rocksdb::IndexBlockIter::SeekImpl (860,000,000 samples, 0.13%)</title><rect x="156.9" y="261" width="1.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="159.89" y="271.5" ></text>
</g>
<g >
<title>MultiMatch::getorrecalc_maxweight (100,000,000 samples, 0.01%)</title><rect x="1141.6" y="565" width="0.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1144.55" y="575.5" ></text>
</g>
<g >
<title>blk_mq_try_issue_list_directly (130,000,000 samples, 0.02%)</title><rect x="908.8" y="149" width="0.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="911.75" y="159.5" ></text>
</g>
<g >
<title>google::protobuf::internal::TaggedStringPtr::TagAs (60,000,000 samples, 0.01%)</title><rect x="1157.5" y="421" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1160.46" y="431.5" ></text>
</g>
<g >
<title>OrPostList::~OrPostList (110,000,000 samples, 0.02%)</title><rect x="1018.9" y="533" width="0.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1021.86" y="543.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (590,000,000 samples, 0.09%)</title><rect x="20.2" y="645" width="1.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="23.16" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::_Variant_base&lt;5ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (60,000,000 samples, 0.01%)</title><rect x="1153.5" y="325" width="0.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1156.53" y="335.5" ></text>
</g>
<g >
<title>read_pages (310,000,000 samples, 0.05%)</title><rect x="830.1" y="213" width="0.6" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="833.12" y="223.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (60,000,000 samples, 0.01%)</title><rect x="100.3" y="405" width="0.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="103.29" y="415.5" ></text>
</g>
<g >
<title>read_pages (170,000,000 samples, 0.03%)</title><rect x="829.0" y="213" width="0.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="832.05" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::_Move_ctor_base (60,000,000 samples, 0.01%)</title><rect x="1154.9" y="245" width="0.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1157.88" y="255.5" ></text>
</g>
<g >
<title>MultiAndPostList::find_next_match (60,000,000 samples, 0.01%)</title><rect x="1070.9" y="533" width="0.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1073.92" y="543.5" ></text>
</g>
<g >
<title>operator new (170,000,000 samples, 0.03%)</title><rect x="1181.8" y="677" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1184.81" y="687.5" ></text>
</g>
<g >
<title>kl::server::GrammarContext::~GrammarContext (60,000,000 samples, 0.01%)</title><rect x="1152.6" y="597" width="0.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1155.58" y="607.5" ></text>
</g>
<g >
<title>do_syscall_64 (510,000,000 samples, 0.08%)</title><rect x="21.7" y="629" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="24.69" y="639.5" ></text>
</g>
<g >
<title>common_interrupt (80,000,000 samples, 0.01%)</title><rect x="777.3" y="469" width="0.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="780.32" y="479.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::SyncMetricStorage::SyncMetricStorage (270,000,000 samples, 0.04%)</title><rect x="1156.0" y="469" width="0.5" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1159.03" y="479.5" ></text>
</g>
<g >
<title>std::visit&lt;opentelemetry::v1::sdk::common::AttributeConverter&amp;, std::variant&lt;bool, int, long, unsigned int, double, char const*, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, opentelemetry::v1::nostd::span&lt;bool const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;int const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;long const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;unsigned int const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;double const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const, 18446744073709551615ul&gt;, unsigned long, opentelemetry::v1::nostd::span&lt;unsigned long const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;unsigned char const, 18446744073709551615ul&gt; &gt;&amp;&gt; (130,000,000 samples, 0.02%)</title><rect x="1153.4" y="453" width="0.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1156.44" y="463.5" ></text>
</g>
<g >
<title>generic_file_read_iter (490,000,000 samples, 0.07%)</title><rect x="1013.0" y="325" width="0.9" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1016.01" y="335.5" ></text>
</g>
<g >
<title>rw_verify_area (60,000,000 samples, 0.01%)</title><rect x="113.2" y="389" width="0.1" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="116.16" y="399.5" ></text>
</g>
<g >
<title>__GI___libc_write (310,000,000 samples, 0.05%)</title><rect x="1162.8" y="629" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1165.84" y="639.5" ></text>
</g>
<g >
<title>filemap_read (70,000,000 samples, 0.01%)</title><rect x="237.0" y="325" width="0.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="240.02" y="335.5" ></text>
</g>
<g >
<title>touch_atime (400,000,000 samples, 0.06%)</title><rect x="912.4" y="293" width="0.7" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="915.42" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::_Variant_storage&lt;5ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (60,000,000 samples, 0.01%)</title><rect x="1153.5" y="293" width="0.1" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="1156.53" y="303.5" ></text>
</g>
<g >
<title>page_cache_ra_unbounded (140,000,000 samples, 0.02%)</title><rect x="117.7" y="421" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="120.69" y="431.5" ></text>
</g>
<g >
<title>GlassPostList::at_end (100,000,000 samples, 0.01%)</title><rect x="136.2" y="549" width="0.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="139.18" y="559.5" ></text>
</g>
<g >
<title>sky_work::common::AbtestContext::~AbtestContext (60,000,000 samples, 0.01%)</title><rect x="1156.9" y="597" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1159.87" y="607.5" ></text>
</g>
<g >
<title>__alloc_pages (100,000,000 samples, 0.01%)</title><rect x="829.5" y="181" width="0.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="832.52" y="191.5" ></text>
</g>
<g >
<title>Xapian::Query::Internal::postlist_sub_and_like (410,000,000 samples, 0.06%)</title><rect x="159.6" y="501" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="162.62" y="511.5" ></text>
</g>
<g >
<title>__GI___pthread_disable_asynccancel (110,000,000 samples, 0.02%)</title><rect x="42.9" y="453" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="45.95" y="463.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (1,840,000,000 samples, 0.27%)</title><rect x="144.2" y="245" width="3.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="147.21" y="255.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;Xapian::Internal::MSetItem*, std::vector&lt;Xapian::Internal::MSetItem, std::allocator&lt;Xapian::Internal::MSetItem&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (180,000,000 samples, 0.03%)</title><rect x="1099.6" y="549" width="0.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1102.64" y="559.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (1,320,000,000 samples, 0.20%)</title><rect x="855.6" y="341" width="2.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="858.60" y="351.5" ></text>
</g>
<g >
<title>xas_load (1,380,000,000 samples, 0.21%)</title><rect x="903.3" y="261" width="2.5" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="906.35" y="271.5" ></text>
</g>
<g >
<title>generic_file_read_iter (1,680,000,000 samples, 0.25%)</title><rect x="144.4" y="181" width="3.0" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="147.42" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (540,000,000 samples, 0.08%)</title><rect x="1182.4" y="677" width="0.9" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1185.36" y="687.5" ></text>
</g>
<g >
<title>vfs_read (540,000,000 samples, 0.08%)</title><rect x="1012.9" y="373" width="1.0" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1015.94" y="383.5" ></text>
</g>
<g >
<title>folly::CPUThreadPoolExecutor::~CPUThreadPoolExecutor (450,000,000 samples, 0.07%)</title><rect x="10.2" y="661" width="0.8" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="13.16" y="671.5" ></text>
</g>
<g >
<title>GlassTable::next_for_sequential (1,020,000,000 samples, 0.15%)</title><rect x="1014.1" y="469" width="1.8" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1017.12" y="479.5" ></text>
</g>
<g >
<title>GlassPostList::next (400,000,000 samples, 0.06%)</title><rect x="1087.9" y="533" width="0.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1090.93" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (580,000,000 samples, 0.09%)</title><rect x="1067.7" y="533" width="1.0" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1070.67" y="543.5" ></text>
</g>
<g >
<title>sky_work::common::AbtestContext::~AbtestContext (390,000,000 samples, 0.06%)</title><rect x="1159.6" y="565" width="0.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1162.62" y="575.5" ></text>
</g>
<g >
<title>opentelemetry::v1::nostd::function_ref&lt;bool  (260,000,000 samples, 0.04%)</title><rect x="1154.1" y="485" width="0.4" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1157.07" y="495.5" ></text>
</g>
<g >
<title>touch_atime (480,000,000 samples, 0.07%)</title><rect x="95.4" y="309" width="0.9" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="98.41" y="319.5" ></text>
</g>
<g >
<title>filemap_get_pages (7,110,000,000 samples, 1.06%)</title><rect x="898.2" y="293" width="12.5" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="901.19" y="303.5" ></text>
</g>
<g >
<title>GlassPostList::skip_to (7,110,000,000 samples, 1.06%)</title><rect x="224.8" y="533" width="12.5" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="227.76" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::_Rb_tree (130,000,000 samples, 0.02%)</title><rect x="1154.9" y="485" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1157.88" y="495.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (190,000,000 samples, 0.03%)</title><rect x="147.5" y="245" width="0.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="150.45" y="255.5" ></text>
</g>
<g >
<title>GlassCursor::read_tag (470,000,000 samples, 0.07%)</title><rect x="942.1" y="469" width="0.8" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="945.07" y="479.5" ></text>
</g>
<g >
<title>__mpn_mul_1 (250,000,000 samples, 0.04%)</title><rect x="26.1" y="645" width="0.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="29.11" y="655.5" ></text>
</g>
<g >
<title>set_timeout_flag (120,000,000 samples, 0.02%)</title><rect x="1182.1" y="677" width="0.3" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1185.15" y="687.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (90,000,000 samples, 0.01%)</title><rect x="1188.7" y="581" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1191.73" y="591.5" ></text>
</g>
<g >
<title>seccomp_run_filters (120,000,000 samples, 0.02%)</title><rect x="916.0" y="325" width="0.2" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="919.03" y="335.5" ></text>
</g>
<g >
<title>opentelemetry::v1::nostd::visit&lt;opentelemetry::v1::sdk::common::AttributeConverter&amp;, std::variant&lt;bool, int, long, unsigned int, double, char const*, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, opentelemetry::v1::nostd::span&lt;bool const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;int const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;long const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;unsigned int const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;double const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const, 18446744073709551615ul&gt;, unsigned long, opentelemetry::v1::nostd::span&lt;unsigned long const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;unsigned char const, 18446744073709551615ul&gt; &gt;&amp;&gt; (60,000,000 samples, 0.01%)</title><rect x="1155.6" y="469" width="0.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1158.57" y="479.5" ></text>
</g>
<g >
<title>mark_page_accessed (60,000,000 samples, 0.01%)</title><rect x="1015.7" y="293" width="0.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1018.71" y="303.5" ></text>
</g>
<g >
<title>rocksdb::DBImplReadOnly::Get (4,870,000,000 samples, 0.73%)</title><rect x="150.2" y="325" width="8.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="153.18" y="335.5" ></text>
</g>
<g >
<title>iterate_dir (90,000,000 samples, 0.01%)</title><rect x="1188.7" y="533" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1191.73" y="543.5" ></text>
</g>
<g >
<title>google::protobuf::internal::UntypedMapBase::ClearTable (300,000,000 samples, 0.04%)</title><rect x="1159.8" y="549" width="0.5" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1162.78" y="559.5" ></text>
</g>
<g >
<title>read (90,000,000 samples, 0.01%)</title><rect x="1152.8" y="533" width="0.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1155.84" y="543.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (250,000,000 samples, 0.04%)</title><rect x="148.2" y="293" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="151.16" y="303.5" ></text>
</g>
<g >
<title>GlassTable::read_block (150,000,000 samples, 0.02%)</title><rect x="241.9" y="453" width="0.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="244.92" y="463.5" ></text>
</g>
<g >
<title>find_in_branch_&lt;Glass::LeafItem&gt; (250,000,000 samples, 0.04%)</title><rect x="1012.3" y="453" width="0.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1015.29" y="463.5" ></text>
</g>
<g >
<title>GlassPostList::move_forward_in_chunk_to_at_least (2,180,000,000 samples, 0.33%)</title><rect x="237.7" y="501" width="3.9" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="240.74" y="511.5" ></text>
</g>
<g >
<title>Xapian::Internal::MSetItem::operator= (1,860,000,000 samples, 0.28%)</title><rect x="1123.9" y="517" width="3.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1126.92" y="527.5" ></text>
</g>
<g >
<title>MultiAndPostList::get_weight (130,000,000 samples, 0.02%)</title><rect x="116.6" y="565" width="0.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="119.62" y="575.5" ></text>
</g>
<g >
<title>security_file_permission (70,000,000 samples, 0.01%)</title><rect x="123.1" y="341" width="0.2" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="126.13" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt;, opentelemetry::v1::sdk::metrics::SyncMetricStorage::SyncMetricStorage (100,000,000 samples, 0.01%)</title><rect x="1154.7" y="485" width="0.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1157.67" y="495.5" ></text>
</g>
<g >
<title>do_syscall_64 (310,000,000 samples, 0.05%)</title><rect x="1162.8" y="597" width="0.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1165.84" y="607.5" ></text>
</g>
<g >
<title>GlassDatabase::readahead_for_query (610,000,000 samples, 0.09%)</title><rect x="117.0" y="549" width="1.0" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="119.97" y="559.5" ></text>
</g>
<g >
<title>filemap_get_read_batch (130,000,000 samples, 0.02%)</title><rect x="934.1" y="277" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="937.10" y="287.5" ></text>
</g>
<g >
<title>rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::Lookup (500,000,000 samples, 0.07%)</title><rect x="154.1" y="197" width="0.9" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="157.13" y="207.5" ></text>
</g>
<g >
<title>xas_load (90,000,000 samples, 0.01%)</title><rect x="909.5" y="213" width="0.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="912.53" y="223.5" ></text>
</g>
<g >
<title>GlassTable::block_to_cursor (70,000,000 samples, 0.01%)</title><rect x="159.7" y="373" width="0.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="162.66" y="383.5" ></text>
</g>
<g >
<title>submit_bio (110,000,000 samples, 0.02%)</title><rect x="910.4" y="181" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="913.44" y="191.5" ></text>
</g>
<g >
<title>aisearch::AbtestInfo::readNoXfer&lt;apache::thrift::CompactProtocolReader&gt; (150,000,000 samples, 0.02%)</title><rect x="29.3" y="533" width="0.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="32.30" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::_Rb_tree (70,000,000 samples, 0.01%)</title><rect x="1156.5" y="485" width="0.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1159.52" y="495.5" ></text>
</g>
<g >
<title>__fdget (520,000,000 samples, 0.08%)</title><rect x="864.8" y="373" width="0.9" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="867.78" y="383.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (70,000,000 samples, 0.01%)</title><rect x="1153.0" y="501" width="0.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1156.03" y="511.5" ></text>
</g>
<g >
<title>blk_mq_try_issue_list_directly (60,000,000 samples, 0.01%)</title><rect x="830.2" y="133" width="0.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="833.16" y="143.5" ></text>
</g>
<g >
<title>[unknown] (450,000,000 samples, 0.07%)</title><rect x="10.2" y="629" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.16" y="639.5" ></text>
</g>
<g >
<title>handle_mm_fault (80,000,000 samples, 0.01%)</title><rect x="146.8" y="85" width="0.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="149.77" y="95.5" ></text>
</g>
<g >
<title>__memcmp_evex_movbe (2,360,000,000 samples, 0.35%)</title><rect x="840.3" y="453" width="4.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="843.27" y="463.5" ></text>
</g>
<g >
<title>[libjemalloc.so.2] (60,000,000 samples, 0.01%)</title><rect x="1188.4" y="661" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1191.43" y="671.5" ></text>
</g>
<g >
<title>GlassTable::read_block (100,000,000 samples, 0.01%)</title><rect x="237.0" y="469" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="239.97" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (90,000,000 samples, 0.01%)</title><rect x="1160.1" y="437" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1163.15" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, std::pair&lt;opentelemetry::v1::sdk::common::OrderedAttributeMap, std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::destroy&lt;std::pair&lt;unsigned long const, std::pair&lt;opentelemetry::v1::sdk::common::OrderedAttributeMap, std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt; &gt; &gt; &gt; (100,000,000 samples, 0.01%)</title><rect x="1189.7" y="181" width="0.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1192.67" y="191.5" ></text>
</g>
<g >
<title>security_file_permission (330,000,000 samples, 0.05%)</title><rect x="832.8" y="325" width="0.6" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="835.83" y="335.5" ></text>
</g>
<g >
<title>clear_page_erms (70,000,000 samples, 0.01%)</title><rect x="122.2" y="165" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="125.23" y="175.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (30,930,000,000 samples, 4.62%)</title><rect x="46.0" y="437" width="54.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="48.98" y="447.5" >entry..</text>
</g>
<g >
<title>rocksdb::lru_cache::LRUHandleTable::FindPointer (170,000,000 samples, 0.03%)</title><rect x="154.6" y="149" width="0.3" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="157.64" y="159.5" ></text>
</g>
<g >
<title>vfs_read (28,110,000,000 samples, 4.20%)</title><rect x="48.0" y="389" width="49.5" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="50.97" y="399.5" >vfs_..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_Alloc_node&gt; (150,000,000 samples, 0.02%)</title><rect x="149.0" y="373" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="152.02" y="383.5" ></text>
</g>
<g >
<title>all (670,040,000,000 samples, 100%)</title><rect x="10.0" y="709" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="719.5" ></text>
</g>
<g >
<title>vfs_read (930,000,000 samples, 0.14%)</title><rect x="933.2" y="373" width="1.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="936.16" y="383.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,720,000,000 samples, 0.41%)</title><rect x="118.6" y="405" width="4.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="121.62" y="415.5" ></text>
</g>
<g >
<title>opentelemetry::v1::exporter::otlp::OtlpHttpExporter::Export (220,000,000 samples, 0.03%)</title><rect x="1188.0" y="549" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1191.03" y="559.5" ></text>
</g>
<g >
<title>filemap_get_pages (100,000,000 samples, 0.01%)</title><rect x="941.5" y="261" width="0.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="944.53" y="271.5" ></text>
</g>
<g >
<title>ondemand_readahead (2,230,000,000 samples, 0.33%)</title><rect x="905.8" y="261" width="3.9" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="908.80" y="271.5" ></text>
</g>
<g >
<title>__close (90,000,000 samples, 0.01%)</title><rect x="1153.0" y="549" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1156.00" y="559.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (70,000,000 samples, 0.01%)</title><rect x="237.0" y="437" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="240.02" y="447.5" ></text>
</g>
<g >
<title>aisearch::AbtestInfo::write&lt;apache::thrift::CompactProtocolWriter&gt; (70,000,000 samples, 0.01%)</title><rect x="28.1" y="405" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="31.05" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (130,000,000 samples, 0.02%)</title><rect x="1165.0" y="661" width="0.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1168.03" y="671.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (490,000,000 samples, 0.07%)</title><rect x="777.5" y="437" width="0.9" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="780.52" y="447.5" ></text>
</g>
<g >
<title>iov_iter_init (60,000,000 samples, 0.01%)</title><rect x="791.9" y="341" width="0.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="794.91" y="351.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::trace::MultiRecordable::SetIdentity (60,000,000 samples, 0.01%)</title><rect x="1150.4" y="549" width="0.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1153.39" y="559.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::LongHistogram&lt;unsigned long&gt;::Record (140,000,000 samples, 0.02%)</title><rect x="10.5" y="565" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="13.49" y="575.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::common::AttributeConverter::operator (80,000,000 samples, 0.01%)</title><rect x="1153.5" y="373" width="0.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1156.49" y="383.5" ></text>
</g>
<g >
<title>opentelemetry::v1::exporter::otlp::OtlpRecordableUtils::PopulateRequest (60,000,000 samples, 0.01%)</title><rect x="1188.3" y="533" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1191.31" y="543.5" ></text>
</g>
<g >
<title>GlassPostList::skip_to (2,620,000,000 samples, 0.39%)</title><rect x="237.7" y="517" width="4.6" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="240.67" y="527.5" ></text>
</g>
<g >
<title>GlassTable::next_for_sequential (60,000,000 samples, 0.01%)</title><rect x="1072.7" y="469" width="0.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1075.71" y="479.5" ></text>
</g>
<g >
<title>ext4_readahead (140,000,000 samples, 0.02%)</title><rect x="829.1" y="197" width="0.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="832.10" y="207.5" ></text>
</g>
<g >
<title>GlassPostList::next_in_chunk (90,000,000 samples, 0.01%)</title><rect x="1073.7" y="517" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1076.73" y="527.5" ></text>
</g>
<g >
<title>GlassPostList::skip_to (26,780,000,000 samples, 4.00%)</title><rect x="971.4" y="517" width="47.2" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="974.43" y="527.5" >Glas..</text>
</g>
<g >
<title>alloc_pages (100,000,000 samples, 0.01%)</title><rect x="909.7" y="213" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="912.74" y="223.5" ></text>
</g>
<g >
<title>LeafPostList::get_weight (3,070,000,000 samples, 0.46%)</title><rect x="136.8" y="549" width="5.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="139.76" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (110,000,000 samples, 0.02%)</title><rect x="931.5" y="485" width="0.2" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="934.51" y="495.5" ></text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (60,000,000 samples, 0.01%)</title><rect x="113.5" y="405" width="0.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="116.46" y="415.5" ></text>
</g>
<g >
<title>__libc_pread (670,000,000 samples, 0.10%)</title><rect x="1012.8" y="437" width="1.2" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1015.78" y="447.5" ></text>
</g>
<g >
<title>std::__do_visit&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;, opentelemetry::v1::sdk::common::GetHashForAttributeValueVisitor, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; const&amp;&gt; (60,000,000 samples, 0.01%)</title><rect x="1189.0" y="229" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1191.96" y="239.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (130,000,000 samples, 0.02%)</title><rect x="858.1" y="389" width="0.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="861.07" y="399.5" ></text>
</g>
<g >
<title>filemap_read (950,000,000 samples, 0.14%)</title><rect x="106.2" y="341" width="1.7" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="109.24" y="351.5" ></text>
</g>
<g >
<title>mark_page_accessed (940,000,000 samples, 0.14%)</title><rect x="910.7" y="293" width="1.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="913.73" y="303.5" ></text>
</g>
<g >
<title>kl::server::Handler::get_termfreq (240,000,000 samples, 0.04%)</title><rect x="159.8" y="437" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="162.83" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::_Variant_storage&lt;5ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (60,000,000 samples, 0.01%)</title><rect x="1153.5" y="277" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1156.53" y="287.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;aisearch::SUDocItem*, std::vector&lt;aisearch::SUDocItem, std::allocator&lt;aisearch::SUDocItem&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;kl::server::Handler::future_Search (100,000,000 samples, 0.01%)</title><rect x="10.8" y="549" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="13.77" y="559.5" ></text>
</g>
<g >
<title>[unknown] (340,000,000 samples, 0.05%)</title><rect x="1162.8" y="645" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1165.84" y="655.5" ></text>
</g>
<g >
<title>Xapian::Enquire::~Enquire (70,000,000 samples, 0.01%)</title><rect x="1145.7" y="597" width="0.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1148.67" y="607.5" ></text>
</g>
<g >
<title>atime_needs_update (340,000,000 samples, 0.05%)</title><rect x="95.5" y="293" width="0.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="98.54" y="303.5" ></text>
</g>
<g >
<title>LeafPostList::~LeafPostList (100,000,000 samples, 0.01%)</title><rect x="1074.3" y="469" width="0.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1077.26" y="479.5" ></text>
</g>
<g >
<title>sky_work::common::AbtestInfo::~AbtestInfo (170,000,000 samples, 0.03%)</title><rect x="1160.0" y="469" width="0.3" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1163.01" y="479.5" ></text>
</g>
<g >
<title>blk_finish_plug (130,000,000 samples, 0.02%)</title><rect x="908.8" y="213" width="0.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="911.75" y="223.5" ></text>
</g>
<g >
<title>aisearch::AbtestContext::readNoXfer&lt;apache::thrift::CompactProtocolReader&gt; (260,000,000 samples, 0.04%)</title><rect x="29.2" y="581" width="0.4" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="32.16" y="591.5" ></text>
</g>
<g >
<title>aisearch::SUDocItem::write&lt;apache::thrift::CompactProtocolWriter&gt; (170,000,000 samples, 0.03%)</title><rect x="1162.1" y="485" width="0.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1165.07" y="495.5" ></text>
</g>
<g >
<title>__secure_computing (60,000,000 samples, 0.01%)</title><rect x="113.5" y="389" width="0.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="116.46" y="399.5" ></text>
</g>
<g >
<title>GlassPostList::next (810,000,000 samples, 0.12%)</title><rect x="1072.3" y="517" width="1.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1075.31" y="527.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::TemporalMetricStorage::buildMetrics (390,000,000 samples, 0.06%)</title><rect x="1188.9" y="373" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.94" y="383.5" ></text>
</g>
<g >
<title>submit_bio_noacct (90,000,000 samples, 0.01%)</title><rect x="910.5" y="165" width="0.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="913.48" y="175.5" ></text>
</g>
<g >
<title>apache::thrift::GeneratedAsyncProcessorBase::serializeResponseImpl&lt;apache::thrift::SerializedResponse, apache::thrift::CompactProtocolWriter, apache::thrift::ThriftPresult&lt;true, apache::thrift::FieldData&lt; (370,000,000 samples, 0.06%)</title><rect x="31.6" y="581" width="0.6" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="34.56" y="591.5" ></text>
</g>
<g >
<title>GlassTable::find_in_leaf (450,000,000 samples, 0.07%)</title><rect x="100.7" y="485" width="0.8" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="103.71" y="495.5" ></text>
</g>
<g >
<title>__page_cache_alloc (730,000,000 samples, 0.11%)</title><rect x="906.0" y="229" width="1.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="908.95" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (130,000,000 samples, 0.02%)</title><rect x="1153.7" y="421" width="0.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1156.67" y="431.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::AttributesHashMap::~AttributesHashMap (130,000,000 samples, 0.02%)</title><rect x="1189.6" y="277" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1192.63" y="287.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::DefaultAggregation::CreateAggregation (240,000,000 samples, 0.04%)</title><rect x="1156.0" y="453" width="0.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1159.05" y="463.5" ></text>
</g>
<g >
<title>do_syscall_64 (410,000,000 samples, 0.06%)</title><rect x="942.1" y="389" width="0.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="945.14" y="399.5" ></text>
</g>
<g >
<title>fmt::v10::detail::parse_replacement_field&lt;char, fmt::v10::detail::vformat_to&lt;char&gt; (60,000,000 samples, 0.01%)</title><rect x="17.8" y="645" width="0.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="20.78" y="655.5" ></text>
</g>
<g >
<title>page_cache_async_ra (120,000,000 samples, 0.02%)</title><rect x="1015.4" y="277" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1018.41" y="287.5" ></text>
</g>
<g >
<title>GlassPostList::~GlassPostList (180,000,000 samples, 0.03%)</title><rect x="1074.1" y="485" width="0.3" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1077.12" y="495.5" ></text>
</g>
<g >
<title>filemap_read (140,000,000 samples, 0.02%)</title><rect x="143.1" y="165" width="0.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="146.12" y="175.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (350,000,000 samples, 0.05%)</title><rect x="1016.8" y="293" width="0.6" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1019.83" y="303.5" ></text>
</g>
<g >
<title>__page_cache_alloc (130,000,000 samples, 0.02%)</title><rect x="122.2" y="229" width="0.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="125.22" y="239.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (140,000,000 samples, 0.02%)</title><rect x="143.1" y="197" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="146.12" y="207.5" ></text>
</g>
<g >
<title>__xas_next (60,000,000 samples, 0.01%)</title><rect x="903.2" y="261" width="0.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="906.24" y="271.5" ></text>
</g>
<g >
<title>opentelemetry::v1::common::KeyValueIterableView&lt;std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::ForEachKeyValue (70,000,000 samples, 0.01%)</title><rect x="1155.8" y="517" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1158.76" y="527.5" ></text>
</g>
<g >
<title>ondemand_readahead (480,000,000 samples, 0.07%)</title><rect x="122.2" y="261" width="0.8" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="125.18" y="271.5" ></text>
</g>
<g >
<title>xas_load (130,000,000 samples, 0.02%)</title><rect x="117.7" y="389" width="0.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="120.71" y="399.5" ></text>
</g>
<g >
<title>opentelemetry::v1::nostd::function_ref&lt;bool  (360,000,000 samples, 0.05%)</title><rect x="1189.0" y="309" width="0.6" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1191.96" y="319.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (410,000,000 samples, 0.06%)</title><rect x="911.3" y="277" width="0.7" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="914.25" y="287.5" ></text>
</g>
<g >
<title>opentelemetry::v1::nostd::function_ref&lt;bool  (520,000,000 samples, 0.08%)</title><rect x="1188.9" y="469" width="1.0" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1191.94" y="479.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (80,000,000 samples, 0.01%)</title><rect x="777.3" y="437" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="780.32" y="447.5" ></text>
</g>
<g >
<title>__memcmp_evex_movbe (140,000,000 samples, 0.02%)</title><rect x="1012.0" y="453" width="0.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1015.04" y="463.5" ></text>
</g>
<g >
<title>page_cache_sync_ra (540,000,000 samples, 0.08%)</title><rect x="909.7" y="277" width="1.0" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="912.72" y="287.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (140,000,000 samples, 0.02%)</title><rect x="148.2" y="165" width="0.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="151.21" y="175.5" ></text>
</g>
<g >
<title>filemap_get_pages (5,450,000,000 samples, 0.81%)</title><rect x="821.2" y="277" width="9.6" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="824.19" y="287.5" ></text>
</g>
<g >
<title>filemap_read (490,000,000 samples, 0.07%)</title><rect x="1013.0" y="309" width="0.9" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1016.01" y="319.5" ></text>
</g>
<g >
<title>generic_file_read_iter (130,000,000 samples, 0.02%)</title><rect x="241.9" y="325" width="0.3" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="244.94" y="335.5" ></text>
</g>
<g >
<title>MultiAndPostList::at_end (280,000,000 samples, 0.04%)</title><rect x="115.9" y="565" width="0.5" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="118.95" y="575.5" ></text>
</g>
<g >
<title>GlassDatabase::open_document (70,000,000 samples, 0.01%)</title><rect x="1146.8" y="549" width="0.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1149.80" y="559.5" ></text>
</g>
<g >
<title>GlassPostList::skip_to (340,000,000 samples, 0.05%)</title><rect x="242.3" y="517" width="0.6" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="245.29" y="527.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (60,000,000 samples, 0.01%)</title><rect x="1165.3" y="661" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1168.27" y="671.5" ></text>
</g>
<g >
<title>Xapian::Internal::QueryOr::get_description[abi:cxx11] (250,000,000 samples, 0.04%)</title><rect x="1147.2" y="533" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1150.19" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (70,000,000 samples, 0.01%)</title><rect x="117.3" y="469" width="0.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="120.29" y="479.5" ></text>
</g>
<g >
<title>rocksdb::DBImplReadOnly::Get (230,000,000 samples, 0.03%)</title><rect x="159.9" y="389" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="162.85" y="399.5" ></text>
</g>
<g >
<title>std::variant&lt;opentelemetry::v1::sdk::metrics::SumPointData, opentelemetry::v1::sdk::metrics::HistogramPointData, opentelemetry::v1::sdk::metrics::LastValuePointData, opentelemetry::v1::sdk::metrics::DropPointData&gt;::variant&lt;opentelemetry::v1::sdk::metrics::HistogramPointData const&amp;, void, void, opentelemetry::v1::sdk::metrics::HistogramPointData, void&gt; (70,000,000 samples, 0.01%)</title><rect x="1189.4" y="245" width="0.1" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1192.37" y="255.5" ></text>
</g>
<g >
<title>google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop&lt;google::protobuf::RepeatedPtrField&lt;sky_work::common::AbtestInfo&gt;::TypeHandler&gt; (170,000,000 samples, 0.03%)</title><rect x="1157.4" y="501" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1160.40" y="511.5" ></text>
</g>
<g >
<title>x2apic_send_IPI_mask (240,000,000 samples, 0.04%)</title><rect x="22.0" y="469" width="0.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="25.01" y="479.5" ></text>
</g>
<g >
<title>MultiAndPostList::~MultiAndPostList (240,000,000 samples, 0.04%)</title><rect x="1074.0" y="533" width="0.4" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1077.01" y="543.5" ></text>
</g>
<g >
<title>opentelemetry::v1::nostd::function_ref&lt;bool  (90,000,000 samples, 0.01%)</title><rect x="1155.6" y="517" width="0.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1158.57" y="527.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::common::GetHashForAttributeMap (410,000,000 samples, 0.06%)</title><rect x="1153.3" y="549" width="0.8" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1156.33" y="559.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (60,000,000 samples, 0.01%)</title><rect x="1072.7" y="389" width="0.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1075.71" y="399.5" ></text>
</g>
<g >
<title>new_sync_read (490,000,000 samples, 0.07%)</title><rect x="1013.0" y="357" width="0.9" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1016.01" y="367.5" ></text>
</g>
<g >
<title>page_cache_ra_unbounded (60,000,000 samples, 0.01%)</title><rect x="94.4" y="261" width="0.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="97.39" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Uninitialized&lt;opentelemetry::v1::sdk::metrics::HistogramPointData, false&gt;::_Uninitialized&lt;opentelemetry::v1::sdk::metrics::HistogramPointData const&amp;&gt; (60,000,000 samples, 0.01%)</title><rect x="1189.4" y="85" width="0.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1192.37" y="95.5" ></text>
</g>
<g >
<title>rcu_all_qs (70,000,000 samples, 0.01%)</title><rect x="53.6" y="293" width="0.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="56.60" y="303.5" ></text>
</g>
<g >
<title>Xapian::MSetIterator::get_weight (80,000,000 samples, 0.01%)</title><rect x="30.6" y="613" width="0.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="33.60" y="623.5" ></text>
</g>
<g >
<title>google::protobuf::internal::UntypedMapBase::ClearTable (280,000,000 samples, 0.04%)</title><rect x="1159.8" y="533" width="0.5" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1162.81" y="543.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::TemporalMetricStorage::buildMetrics (360,000,000 samples, 0.05%)</title><rect x="1189.0" y="293" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.96" y="303.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (170,000,000 samples, 0.03%)</title><rect x="1187.7" y="661" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1190.71" y="671.5" ></text>
</g>
<g >
<title>find_in_branch_&lt;Glass::LeafItem&gt; (300,000,000 samples, 0.04%)</title><rect x="858.8" y="469" width="0.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="861.79" y="479.5" ></text>
</g>
<g >
<title>GlassValueManager::get_chunk_containing_did (42,320,000,000 samples, 6.32%)</title><rect x="39.8" y="533" width="74.5" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="42.76" y="543.5" >GlassVal..</text>
</g>
<g >
<title>GlassTable::read_block (430,000,000 samples, 0.06%)</title><rect x="942.1" y="437" width="0.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="945.13" y="447.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (2,490,000,000 samples, 0.37%)</title><rect x="118.7" y="341" width="4.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="121.75" y="351.5" ></text>
</g>
<g >
<title>submit_bio_noacct (80,000,000 samples, 0.01%)</title><rect x="909.3" y="165" width="0.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="912.28" y="175.5" ></text>
</g>
<g >
<title>atime_needs_update (260,000,000 samples, 0.04%)</title><rect x="832.1" y="261" width="0.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="835.08" y="271.5" ></text>
</g>
<g >
<title>timer_settime@@GLIBC_2.34 (90,000,000 samples, 0.01%)</title><rect x="1145.4" y="565" width="0.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1148.41" y="575.5" ></text>
</g>
<g >
<title>security_file_permission (520,000,000 samples, 0.08%)</title><rect x="96.5" y="357" width="0.9" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="99.52" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (170,000,000 samples, 0.03%)</title><rect x="143.1" y="277" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="146.09" y="287.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (780,000,000 samples, 0.12%)</title><rect x="1166.4" y="533" width="1.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1169.42" y="543.5" ></text>
</g>
<g >
<title>filemap_get_read_batch (110,000,000 samples, 0.02%)</title><rect x="1013.6" y="277" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1016.61" y="287.5" ></text>
</g>
<g >
<title>GlassPostList::next_chunk (1,290,000,000 samples, 0.19%)</title><rect x="932.8" y="501" width="2.3" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="935.81" y="511.5" ></text>
</g>
<g >
<title>irq_exit_rcu (80,000,000 samples, 0.01%)</title><rect x="777.3" y="453" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="780.32" y="463.5" ></text>
</g>
<g >
<title>read_pages (160,000,000 samples, 0.02%)</title><rect x="122.7" y="229" width="0.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="125.71" y="239.5" ></text>
</g>
<g >
<title>vfs_read (1,470,000,000 samples, 0.22%)</title><rect x="855.5" y="373" width="2.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="858.48" y="383.5" ></text>
</g>
<g >
<title>GlassTable::read_block (1,030,000,000 samples, 0.15%)</title><rect x="933.0" y="453" width="1.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="936.00" y="463.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;__gnu_cxx::__normal_iterator&lt;Xapian::Internal::MSetItem*, std::vector&lt;Xapian::Internal::MSetItem, std::allocator&lt;Xapian::Internal::MSetItem&gt; &gt; &gt;, long, Xapian::Internal::MSetItem, __gnu_cxx::__ops::_Iter_comp_val&lt;bool  (210,000,000 samples, 0.03%)</title><rect x="1131.3" y="533" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1134.27" y="543.5" ></text>
</g>
<g >
<title>asm_common_interrupt (80,000,000 samples, 0.01%)</title><rect x="777.3" y="485" width="0.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="780.32" y="495.5" ></text>
</g>
<g >
<title>__GI___libc_open (590,000,000 samples, 0.09%)</title><rect x="20.2" y="661" width="1.0" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="23.16" y="671.5" ></text>
</g>
<g >
<title>__fdget (450,000,000 samples, 0.07%)</title><rect x="790.6" y="357" width="0.8" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="793.60" y="367.5" ></text>
</g>
<g >
<title>__libc_pread (250,000,000 samples, 0.04%)</title><rect x="148.2" y="309" width="0.4" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="151.16" y="319.5" ></text>
</g>
<g >
<title>GlassPostList::get_docid (80,000,000 samples, 0.01%)</title><rect x="1070.5" y="533" width="0.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1073.49" y="543.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::MetricCollector::Collect (520,000,000 samples, 0.08%)</title><rect x="1188.9" y="421" width="1.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1191.94" y="431.5" ></text>
</g>
<g >
<title>Xapian::Document::Internal::get_value[abi:cxx11] (46,390,000,000 samples, 6.92%)</title><rect x="33.9" y="581" width="81.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="36.86" y="591.5" >Xapian::D..</text>
</g>
<g >
<title>GlassTable::find (190,000,000 samples, 0.03%)</title><rect x="143.1" y="341" width="0.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="146.09" y="351.5" ></text>
</g>
<g >
<title>read_start_of_chunk (450,000,000 samples, 0.07%)</title><rect x="930.7" y="485" width="0.8" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="933.71" y="495.5" ></text>
</g>
<g >
<title>do_syscall_64 (590,000,000 samples, 0.09%)</title><rect x="20.2" y="629" width="1.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="23.16" y="639.5" ></text>
</g>
<g >
<title>page_cache_sync_ra (90,000,000 samples, 0.01%)</title><rect x="94.3" y="293" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="97.34" y="303.5" ></text>
</g>
<g >
<title>Glass::ValueChunkReader::assign (110,000,000 samples, 0.02%)</title><rect x="34.4" y="533" width="0.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="37.41" y="543.5" ></text>
</g>
<g >
<title>msetcmp_by_relevance&lt;true&gt; (1,610,000,000 samples, 0.24%)</title><rect x="1106.9" y="533" width="2.8" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1109.88" y="543.5" ></text>
</g>
<g >
<title>do_timer_create (140,000,000 samples, 0.02%)</title><rect x="1187.7" y="613" width="0.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1190.73" y="623.5" ></text>
</g>
<g >
<title>GlassTable::next_for_sequential (460,000,000 samples, 0.07%)</title><rect x="942.1" y="453" width="0.8" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="945.07" y="463.5" ></text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (60,000,000 samples, 0.01%)</title><rect x="147.7" y="229" width="0.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="150.68" y="239.5" ></text>
</g>
<g >
<title>aa_path_perm (100,000,000 samples, 0.01%)</title><rect x="20.5" y="469" width="0.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="23.46" y="479.5" ></text>
</g>
<g >
<title>generic_file_read_iter (140,000,000 samples, 0.02%)</title><rect x="143.1" y="181" width="0.3" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="146.12" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (120,000,000 samples, 0.02%)</title><rect x="1154.9" y="453" width="0.2" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1157.88" y="463.5" ></text>
</g>
<g >
<title>generic_file_read_iter (26,660,000,000 samples, 3.98%)</title><rect x="49.4" y="341" width="46.9" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="52.38" y="351.5" >gene..</text>
</g>
<g >
<title>[unknown] (653,510,000,000 samples, 97.53%)</title><rect x="14.8" y="677" width="1150.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="17.75" y="687.5" >[unknown]</text>
</g>
<g >
<title>new_sync_read (60,000,000 samples, 0.01%)</title><rect x="1072.7" y="357" width="0.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1075.71" y="367.5" ></text>
</g>
<g >
<title>handle_request (520,000,000 samples, 0.08%)</title><rect x="1188.9" y="597" width="1.0" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1191.94" y="607.5" ></text>
</g>
<g >
<title>xas_load (370,000,000 samples, 0.06%)</title><rect x="121.3" y="261" width="0.7" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="124.34" y="271.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (70,000,000 samples, 0.01%)</title><rect x="1088.1" y="437" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1091.14" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (120,000,000 samples, 0.02%)</title><rect x="1154.9" y="437" width="0.2" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1157.88" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;opentelemetry::v1::context::Context::DataList*,  (470,000,000 samples, 0.07%)</title><rect x="1160.3" y="581" width="0.9" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1163.34" y="591.5" ></text>
</g>
<g >
<title>filemap_read (780,000,000 samples, 0.12%)</title><rect x="1014.4" y="309" width="1.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1017.44" y="319.5" ></text>
</g>
<g >
<title>filemap_read (230,000,000 samples, 0.03%)</title><rect x="148.2" y="181" width="0.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="151.19" y="191.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::SyncMetricStorage::RecordLong (750,000,000 samples, 0.11%)</title><rect x="1155.5" y="565" width="1.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1158.54" y="575.5" ></text>
</g>
<g >
<title>ext4_readahead (160,000,000 samples, 0.02%)</title><rect x="910.4" y="213" width="0.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="913.36" y="223.5" ></text>
</g>
<g >
<title>Xapian::Internal::MSetItem::operator= (210,000,000 samples, 0.03%)</title><rect x="1106.5" y="533" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1109.51" y="543.5" ></text>
</g>
<g >
<title>page_cache_ra_unbounded (480,000,000 samples, 0.07%)</title><rect x="122.2" y="245" width="0.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="125.18" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, aisearch::AbtestList&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, aisearch::AbtestList&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, aisearch::AbtestList&gt; &gt; &gt;::_M_erase (70,000,000 samples, 0.01%)</title><rect x="31.4" y="597" width="0.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="34.38" y="607.5" ></text>
</g>
<g >
<title>GlassTable::read_block (690,000,000 samples, 0.10%)</title><rect x="1012.8" y="453" width="1.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1015.76" y="463.5" ></text>
</g>
<g >
<title>start_thread (520,000,000 samples, 0.08%)</title><rect x="1188.9" y="677" width="1.0" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1191.94" y="687.5" ></text>
</g>
<g >
<title>[unknown] (140,000,000 samples, 0.02%)</title><rect x="1162.6" y="645" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1165.60" y="655.5" ></text>
</g>
<g >
<title>__libc_pread (30,610,000,000 samples, 4.57%)</title><rect x="862.5" y="437" width="53.9" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="865.51" y="447.5" >__lib..</text>
</g>
<g >
<title>GlassCursor::read_tag (180,000,000 samples, 0.03%)</title><rect x="241.9" y="485" width="0.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="244.86" y="495.5" ></text>
</g>
<g >
<title>__x64_sys_write (140,000,000 samples, 0.02%)</title><rect x="1162.6" y="581" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1165.60" y="591.5" ></text>
</g>
<g >
<title>ext4_readahead (300,000,000 samples, 0.04%)</title><rect x="909.0" y="213" width="0.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="911.98" y="223.5" ></text>
</g>
<g >
<title>__memcmp_evex_movbe (260,000,000 samples, 0.04%)</title><rect x="1093.2" y="549" width="0.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1096.16" y="559.5" ></text>
</g>
<g >
<title>rocksdb::DataBlockIter::NextImpl (200,000,000 samples, 0.03%)</title><rect x="156.3" y="229" width="0.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="159.31" y="239.5" ></text>
</g>
<g >
<title>ondemand_readahead (90,000,000 samples, 0.01%)</title><rect x="122.0" y="261" width="0.2" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="125.02" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_assign_aux&lt;double const*&gt; (100,000,000 samples, 0.01%)</title><rect x="1156.1" y="389" width="0.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1159.13" y="399.5" ></text>
</g>
<g >
<title>aisearch::AbtestList::readNoXfer&lt;apache::thrift::CompactProtocolReader&gt; (190,000,000 samples, 0.03%)</title><rect x="29.2" y="549" width="0.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="32.23" y="559.5" ></text>
</g>
<g >
<title>GlassTable::next_for_sequential (2,980,000,000 samples, 0.44%)</title><rect x="108.4" y="501" width="5.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="111.37" y="511.5" ></text>
</g>
<g >
<title>GlassCursor::find_entry (620,000,000 samples, 0.09%)</title><rect x="941.0" y="469" width="1.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="943.98" y="479.5" ></text>
</g>
<g >
<title>rocksdb::MemTable::GetFromTable (280,000,000 samples, 0.04%)</title><rect x="1149.3" y="517" width="0.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1152.32" y="527.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (60,000,000 samples, 0.01%)</title><rect x="864.4" y="405" width="0.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="867.45" y="415.5" ></text>
</g>
<g >
<title>Xapian::Internal::QueryTerm::postlist (90,000,000 samples, 0.01%)</title><rect x="142.6" y="389" width="0.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="145.61" y="399.5" ></text>
</g>
<g >
<title>opentelemetry::proto::trace::v1::ResourceSpans::~ResourceSpans (60,000,000 samples, 0.01%)</title><rect x="1188.0" y="469" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1191.05" y="479.5" ></text>
</g>
<g >
<title>rocksdb::MemTable::Get (920,000,000 samples, 0.14%)</title><rect x="150.4" y="309" width="1.6" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="153.36" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, opentelemetry::v1::sdk::metrics::SumPointData, opentelemetry::v1::sdk::metrics::HistogramPointData, opentelemetry::v1::sdk::metrics::LastValuePointData, opentelemetry::v1::sdk::metrics::DropPointData&gt;::_Variant_storage&lt;1ul, opentelemetry::v1::sdk::metrics::HistogramPointData const&amp;&gt; (60,000,000 samples, 0.01%)</title><rect x="1189.4" y="181" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1192.37" y="191.5" ></text>
</g>
<g >
<title>__blk_mq_try_issue_directly (60,000,000 samples, 0.01%)</title><rect x="830.2" y="117" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="833.16" y="127.5" ></text>
</g>
<g >
<title>std::__invoke_r&lt;std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt;, opentelemetry::v1::sdk::metrics::SyncMetricStorage::SyncMetricStorage (280,000,000 samples, 0.04%)</title><rect x="1156.0" y="501" width="0.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1159.01" y="511.5" ></text>
</g>
<g >
<title>sky_work::common::AbtestContext::AbtestContext (300,000,000 samples, 0.04%)</title><rect x="1157.3" y="565" width="0.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1160.28" y="575.5" ></text>
</g>
<g >
<title>Xapian::Internal::QueryTerm::postlist (9,530,000,000 samples, 1.42%)</title><rect x="142.8" y="437" width="16.8" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="145.77" y="447.5" ></text>
</g>
<g >
<title>opentelemetry::v1::exporter::otlp::(anonymous namespace)::SerializeToHttpBody (70,000,000 samples, 0.01%)</title><rect x="1188.2" y="485" width="0.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1191.19" y="495.5" ></text>
</g>
<g >
<title>rocksdb::MemTable::KeyComparator::operator (360,000,000 samples, 0.05%)</title><rect x="151.3" y="245" width="0.6" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="154.31" y="255.5" ></text>
</g>
<g >
<title>filemap_read (120,000,000 samples, 0.02%)</title><rect x="242.0" y="309" width="0.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="244.95" y="319.5" ></text>
</g>
<g >
<title>apache::thrift::ServiceHandler&lt;aisearch::SUSearchService&gt;::async_tm_ShardSearch (642,380,000,000 samples, 95.87%)</title><rect x="30.3" y="629" width="1131.3" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="33.34" y="639.5" >apache::thrift::ServiceHandler&lt;aisearch::SUSearchService&gt;::async_tm_ShardSearch</text>
</g>
<g >
<title>GlassCursor::read_tag (1,060,000,000 samples, 0.16%)</title><rect x="1014.1" y="485" width="1.9" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1017.08" y="495.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (1,670,000,000 samples, 0.25%)</title><rect x="109.3" y="325" width="3.0" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="112.33" y="335.5" ></text>
</g>
<g >
<title>filemap_read (22,640,000,000 samples, 3.38%)</title><rect x="792.7" y="293" width="39.8" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="795.66" y="303.5" >fil..</text>
</g>
<g >
<title>google::protobuf::internal::TaggedStringPtr::SetAllocated (70,000,000 samples, 0.01%)</title><rect x="1157.4" y="437" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1160.44" y="447.5" ></text>
</g>
<g >
<title>OrPostList::skip_to (530,000,000 samples, 0.08%)</title><rect x="1088.8" y="549" width="0.9" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1091.77" y="559.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (200,000,000 samples, 0.03%)</title><rect x="942.2" y="277" width="0.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="945.20" y="287.5" ></text>
</g>
<g >
<title>GlassTable::find (70,000,000 samples, 0.01%)</title><rect x="236.8" y="485" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="239.83" y="495.5" ></text>
</g>
<g >
<title>aisearch::SUSearchRequest::write&lt;apache::thrift::CompactProtocolWriter&gt; (200,000,000 samples, 0.03%)</title><rect x="28.0" y="453" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="30.98" y="463.5" ></text>
</g>
<g >
<title>bvar::PassiveStatus&lt;int&gt;::SeriesSampler::take_sample (90,000,000 samples, 0.01%)</title><rect x="1188.7" y="629" width="0.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1191.73" y="639.5" ></text>
</g>
<g >
<title>folly::detail::function::FunctionTraits&lt;void  (450,000,000 samples, 0.07%)</title><rect x="10.2" y="613" width="0.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="13.16" y="623.5" ></text>
</g>
<g >
<title>rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block_kData&gt; (850,000,000 samples, 0.13%)</title><rect x="153.8" y="245" width="1.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="156.79" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; (60,000,000 samples, 0.01%)</title><rect x="1154.9" y="357" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1157.88" y="367.5" ></text>
</g>
<g >
<title>rocksdb::DBImplReadOnly::Get (230,000,000 samples, 0.03%)</title><rect x="159.9" y="373" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="162.85" y="383.5" ></text>
</g>
<g >
<title>generic_file_read_iter (2,490,000,000 samples, 0.37%)</title><rect x="118.7" y="325" width="4.4" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="121.75" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;opentelemetry::v1::sdk::metrics::SumPointData, opentelemetry::v1::sdk::metrics::HistogramPointData, opentelemetry::v1::sdk::metrics::LastValuePointData, opentelemetry::v1::sdk::metrics::DropPointData&gt;::_Variadic_union&lt;1ul, opentelemetry::v1::sdk::metrics::HistogramPointData const&amp;&gt; (60,000,000 samples, 0.01%)</title><rect x="1189.4" y="117" width="0.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1192.37" y="127.5" ></text>
</g>
<g >
<title>GlassCursor::find_entry (38,150,000,000 samples, 5.69%)</title><rect x="40.9" y="517" width="67.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="43.87" y="527.5" >GlassCu..</text>
</g>
<g >
<title>vfs_write (930,000,000 samples, 0.14%)</title><rect x="1166.3" y="597" width="1.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1169.33" y="607.5" ></text>
</g>
<g >
<title>__x64_sys_write (290,000,000 samples, 0.04%)</title><rect x="1162.8" y="581" width="0.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1165.84" y="591.5" ></text>
</g>
<g >
<title>GlassPostList::move_to_chunk_containing (180,000,000 samples, 0.03%)</title><rect x="296.0" y="517" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="299.04" y="527.5" ></text>
</g>
<g >
<title>fsnotify_perm.part.0 (120,000,000 samples, 0.02%)</title><rect x="833.2" y="309" width="0.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="836.20" y="319.5" ></text>
</g>
<g >
<title>filemap_read (350,000,000 samples, 0.05%)</title><rect x="942.2" y="293" width="0.6" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="945.18" y="303.5" ></text>
</g>
<g >
<title>GlassPostList::move_forward_in_chunk_to_at_least (290,000,000 samples, 0.04%)</title><rect x="242.3" y="501" width="0.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="245.29" y="511.5" ></text>
</g>
<g >
<title>aisearch::SUDocItem::serializedSize&lt;apache::thrift::CompactProtocolWriter&gt; (60,000,000 samples, 0.01%)</title><rect x="1161.9" y="501" width="0.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1164.95" y="511.5" ></text>
</g>
<g >
<title>apache::thrift::ServiceHandler&lt;aisearch::SUSearchService&gt;::async_tm_Search (670,000,000 samples, 0.10%)</title><rect x="27.6" y="629" width="1.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="30.59" y="639.5" ></text>
</g>
<g >
<title>apache::thrift::HandlerCallback&lt;std::unique_ptr&lt;aisearch::SUSearchResult, std::default_delete&lt;aisearch::SUSearchResult&gt; &gt; &gt;::doResult (380,000,000 samples, 0.06%)</title><rect x="31.6" y="613" width="0.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="34.56" y="623.5" ></text>
</g>
<g >
<title>rocksdb::BlockBasedTable::NewDataBlockIterator&lt;rocksdb::DataBlockIter&gt; (60,000,000 samples, 0.01%)</title><rect x="160.0" y="309" width="0.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="163.04" y="319.5" ></text>
</g>
<g >
<title>folly::LogMessage::sanitizeMessage (60,000,000 samples, 0.01%)</title><rect x="12.8" y="645" width="0.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="15.80" y="655.5" ></text>
</g>
<g >
<title>[ai_index] (70,000,000 samples, 0.01%)</title><rect x="838.2" y="437" width="0.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="841.19" y="447.5" ></text>
</g>
<g >
<title>aisearch::SUSearchServiceAsyncProcessor::executeRequest_Search&lt;apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter&gt; (760,000,000 samples, 0.11%)</title><rect x="27.4" y="645" width="1.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="30.43" y="655.5" ></text>
</g>
<g >
<title>[librocksdb.so.8.1.1] (70,000,000 samples, 0.01%)</title><rect x="152.8" y="277" width="0.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="155.82" y="287.5" ></text>
</g>
<g >
<title>blk_mq_sched_insert_requests (60,000,000 samples, 0.01%)</title><rect x="830.2" y="149" width="0.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="833.16" y="159.5" ></text>
</g>
<g >
<title>GlassTable::block_to_cursor (110,000,000 samples, 0.02%)</title><rect x="782.6" y="469" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="785.57" y="479.5" ></text>
</g>
<g >
<title>filemap_get_read_batch (4,120,000,000 samples, 0.61%)</title><rect x="898.5" y="277" width="7.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="901.52" y="287.5" ></text>
</g>
<g >
<title>__add_to_page_cache_locked (200,000,000 samples, 0.03%)</title><rect x="828.5" y="197" width="0.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="831.47" y="207.5" ></text>
</g>
<g >
<title>__x64_sys_timer_settime (70,000,000 samples, 0.01%)</title><rect x="1145.4" y="517" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1148.44" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (60,000,000 samples, 0.01%)</title><rect x="1156.5" y="437" width="0.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1159.52" y="447.5" ></text>
</g>
<g >
<title>Xapian::Internal::QueryAndLike::postlist (9,880,000,000 samples, 1.47%)</title><rect x="142.2" y="533" width="17.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="145.22" y="543.5" ></text>
</g>
<g >
<title>check_tname_in_key_lite (140,000,000 samples, 0.02%)</title><rect x="1018.3" y="485" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1021.26" y="495.5" ></text>
</g>
<g >
<title>rocksdb::BinarySearchIndexReader::NewIterator (80,000,000 samples, 0.01%)</title><rect x="153.3" y="261" width="0.1" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="156.28" y="271.5" ></text>
</g>
<g >
<title>blk_mq_sched_insert_requests (60,000,000 samples, 0.01%)</title><rect x="910.3" y="165" width="0.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="913.25" y="175.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (24,380,000,000 samples, 3.64%)</title><rect x="790.5" y="373" width="42.9" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="793.51" y="383.5" >__x6..</text>
</g>
<g >
<title>exit_to_user_mode_loop (490,000,000 samples, 0.07%)</title><rect x="777.5" y="405" width="0.9" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="780.52" y="415.5" ></text>
</g>
<g >
<title>vfs_read (350,000,000 samples, 0.05%)</title><rect x="941.1" y="341" width="0.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="944.12" y="351.5" ></text>
</g>
<g >
<title>std::pair&lt;opentelemetry::v1::sdk::common::OrderedAttributeMap, std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt; &gt;::~pair (90,000,000 samples, 0.01%)</title><rect x="1189.7" y="133" width="0.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1192.68" y="143.5" ></text>
</g>
<g >
<title>std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::variant&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void, void, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void&gt; (70,000,000 samples, 0.01%)</title><rect x="1153.5" y="357" width="0.1" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="1156.51" y="367.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::SyncMultiMetricStorage::RecordLong (750,000,000 samples, 0.11%)</title><rect x="1155.5" y="581" width="1.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1158.54" y="591.5" ></text>
</g>
<g >
<title>__handle_mm_fault (80,000,000 samples, 0.01%)</title><rect x="146.8" y="69" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="149.77" y="79.5" ></text>
</g>
<g >
<title>GlassTable::find (910,000,000 samples, 0.14%)</title><rect x="1011.1" y="469" width="1.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1014.13" y="479.5" ></text>
</g>
<g >
<title>GlassPostList::init (2,930,000,000 samples, 0.44%)</title><rect x="143.6" y="373" width="5.2" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="146.65" y="383.5" ></text>
</g>
<g >
<title>syscall (90,000,000 samples, 0.01%)</title><rect x="1188.7" y="597" width="0.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1191.73" y="607.5" ></text>
</g>
<g >
<title>opentelemetry::v1::common::KeyValueIterableView&lt;std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::ForEachKeyValue (400,000,000 samples, 0.06%)</title><rect x="1153.4" y="533" width="0.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1156.35" y="543.5" ></text>
</g>
<g >
<title>copy_page_to_iter (100,000,000 samples, 0.01%)</title><rect x="109.1" y="325" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="112.15" y="335.5" ></text>
</g>
<g >
<title>generic_file_read_iter (60,000,000 samples, 0.01%)</title><rect x="1072.7" y="325" width="0.1" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1075.71" y="335.5" ></text>
</g>
<g >
<title>GlassTable::find (40,570,000,000 samples, 6.05%)</title><rect x="782.8" y="469" width="71.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="785.77" y="479.5" >GlassTab..</text>
</g>
<g >
<title>Glass::ValueChunkReader::skip_to (2,870,000,000 samples, 0.43%)</title><rect x="34.6" y="533" width="5.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="37.60" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::_Move_assign_base (60,000,000 samples, 0.01%)</title><rect x="1154.9" y="277" width="0.1" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="1157.88" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;  (120,000,000 samples, 0.02%)</title><rect x="1153.5" y="421" width="0.2" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1156.46" y="431.5" ></text>
</g>
<g >
<title>ksys_write (960,000,000 samples, 0.14%)</title><rect x="1166.3" y="613" width="1.7" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1169.28" y="623.5" ></text>
</g>
<g >
<title>io_read_block (80,000,000 samples, 0.01%)</title><rect x="916.4" y="437" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="919.41" y="447.5" ></text>
</g>
<g >
<title>GlassPostList::move_forward_in_chunk_to_at_least (4,190,000,000 samples, 0.63%)</title><rect x="288.7" y="517" width="7.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="291.66" y="527.5" ></text>
</g>
<g >
<title>rocksdb::BlockBasedTable::MaybeReadBlockAndLoadToCache&lt;rocksdb::Block_kData&gt; (790,000,000 samples, 0.12%)</title><rect x="153.8" y="229" width="1.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="156.83" y="239.5" ></text>
</g>
<g >
<title>rocksdb::(anonymous namespace)::FindFileInRange (60,000,000 samples, 0.01%)</title><rect x="152.4" y="293" width="0.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="155.44" y="303.5" ></text>
</g>
<g >
<title>kl::meta::MetaManager::read_term_count (240,000,000 samples, 0.04%)</title><rect x="159.8" y="421" width="0.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="162.83" y="431.5" ></text>
</g>
<g >
<title>new_sync_read (350,000,000 samples, 0.05%)</title><rect x="941.1" y="325" width="0.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="944.12" y="335.5" ></text>
</g>
<g >
<title>GlassPostList::skip_to (4,250,000,000 samples, 0.63%)</title><rect x="935.6" y="501" width="7.5" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="938.65" y="511.5" ></text>
</g>
<g >
<title>std::_Sp_counted_deleter&lt;opentelemetry::v1::sdk::metrics::AttributesHashMap*, std::default_delete&lt;opentelemetry::v1::sdk::metrics::AttributesHashMap&gt;, std::allocator&lt;void&gt;,  (130,000,000 samples, 0.02%)</title><rect x="1189.6" y="309" width="0.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1192.63" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,060,000,000 samples, 0.16%)</title><rect x="106.1" y="437" width="1.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="109.14" y="447.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (360,000,000 samples, 0.05%)</title><rect x="941.1" y="357" width="0.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="944.11" y="367.5" ></text>
</g>
<g >
<title>new_sync_read (26,460,000,000 samples, 3.95%)</title><rect x="866.6" y="357" width="46.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="869.63" y="367.5" >new_..</text>
</g>
<g >
<title>apparmor_file_open (110,000,000 samples, 0.02%)</title><rect x="20.4" y="485" width="0.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="23.44" y="495.5" ></text>
</g>
<g >
<title>GlassTable::read_block (2,140,000,000 samples, 0.32%)</title><rect x="144.0" y="309" width="3.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="147.02" y="319.5" ></text>
</g>
<g >
<title>GlassCursor::read_tag (1,090,000,000 samples, 0.16%)</title><rect x="933.0" y="485" width="1.9" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="936.00" y="495.5" ></text>
</g>
<g >
<title>GlassPostList::init (210,000,000 samples, 0.03%)</title><rect x="143.1" y="373" width="0.3" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="146.07" y="383.5" ></text>
</g>
<g >
<title>native_flush_tlb_multi (390,000,000 samples, 0.06%)</title><rect x="21.7" y="533" width="0.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="24.75" y="543.5" ></text>
</g>
<g >
<title>__memcmp_evex_movbe (970,000,000 samples, 0.14%)</title><rect x="101.6" y="485" width="1.7" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="104.61" y="495.5" ></text>
</g>
<g >
<title>__napi_poll (70,000,000 samples, 0.01%)</title><rect x="777.3" y="405" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="780.34" y="415.5" ></text>
</g>
<g >
<title>__libc_pread (1,100,000,000 samples, 0.16%)</title><rect x="106.1" y="469" width="1.9" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="109.07" y="479.5" ></text>
</g>
<g >
<title>[unknown] (2,010,000,000 samples, 0.30%)</title><rect x="16.3" y="661" width="3.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="19.29" y="671.5" ></text>
</g>
<g >
<title>apache::thrift::HandlerCallback&lt;std::unique_ptr&lt;aisearch::SUSearchResult, std::default_delete&lt;aisearch::SUSearchResult&gt; &gt; &gt;::result (250,000,000 samples, 0.04%)</title><rect x="1161.9" y="565" width="0.5" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1164.95" y="575.5" ></text>
</g>
<g >
<title>new_sync_read (920,000,000 samples, 0.14%)</title><rect x="933.2" y="357" width="1.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="936.16" y="367.5" ></text>
</g>
<g >
<title>ondemand_readahead (750,000,000 samples, 0.11%)</title><rect x="829.5" y="245" width="1.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="832.45" y="255.5" ></text>
</g>
<g >
<title>GlassTable::find_in_leaf (2,400,000,000 samples, 0.36%)</title><rect x="835.4" y="453" width="4.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="838.44" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (90,000,000 samples, 0.01%)</title><rect x="19.5" y="645" width="0.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="22.49" y="655.5" ></text>
</g>
<g >
<title>Xapian::MiniRankWeight::get_sumpart (5,780,000,000 samples, 0.86%)</title><rect x="1049.8" y="533" width="10.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1052.83" y="543.5" ></text>
</g>
<g >
<title>aisearch::SUSearchServiceAsyncProcessor::return_ShardSearch&lt;apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter&gt; (380,000,000 samples, 0.06%)</title><rect x="31.6" y="597" width="0.6" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="34.56" y="607.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::AttributesHashMap::GetOrSetDefault (600,000,000 samples, 0.09%)</title><rect x="1155.7" y="549" width="1.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1158.75" y="559.5" ></text>
</g>
<g >
<title>new_sync_read (350,000,000 samples, 0.05%)</title><rect x="942.2" y="341" width="0.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="945.18" y="351.5" ></text>
</g>
<g >
<title>mark_page_accessed (700,000,000 samples, 0.10%)</title><rect x="830.8" y="277" width="1.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="833.79" y="287.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt;  (280,000,000 samples, 0.04%)</title><rect x="1156.0" y="517" width="0.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1159.01" y="527.5" ></text>
</g>
<g >
<title>find_in_branch_&lt;Glass::LeafItem&gt; (5,550,000,000 samples, 0.83%)</title><rect x="844.4" y="453" width="9.8" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="847.44" y="463.5" ></text>
</g>
<g >
<title>kl::server::Handler::future_Search (620,000,000 samples, 0.09%)</title><rect x="27.7" y="613" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="30.68" y="623.5" ></text>
</g>
<g >
<title>atime_needs_update (310,000,000 samples, 0.05%)</title><rect x="912.5" y="277" width="0.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="915.54" y="287.5" ></text>
</g>
<g >
<title>[libjemalloc.so.2] (220,000,000 samples, 0.03%)</title><rect x="13.3" y="661" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="16.31" y="671.5" ></text>
</g>
<g >
<title>workingset_age_nonresident (100,000,000 samples, 0.01%)</title><rect x="831.8" y="245" width="0.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="834.85" y="255.5" ></text>
</g>
<g >
<title>__memcmp_evex_movbe (110,000,000 samples, 0.02%)</title><rect x="101.3" y="469" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="104.31" y="479.5" ></text>
</g>
<g >
<title>LocalSubMatch::open_post_list (390,000,000 samples, 0.06%)</title><rect x="159.6" y="469" width="0.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="162.64" y="479.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (1,570,000,000 samples, 0.23%)</title><rect x="855.3" y="389" width="2.8" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="858.31" y="399.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (970,000,000 samples, 0.14%)</title><rect x="933.1" y="389" width="1.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="936.09" y="399.5" ></text>
</g>
<g >
<title>__blk_mq_try_issue_directly (60,000,000 samples, 0.01%)</title><rect x="910.3" y="133" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="913.25" y="143.5" ></text>
</g>
<g >
<title>[libjemalloc.so.2] (830,000,000 samples, 0.12%)</title><rect x="14.8" y="661" width="1.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="17.77" y="671.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::trace::Tracer::StartSpan (740,000,000 samples, 0.11%)</title><rect x="1150.2" y="581" width="1.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1153.22" y="591.5" ></text>
</g>
<g >
<title>virtual thunk to folly::LogStream::~LogStream (60,000,000 samples, 0.01%)</title><rect x="1165.5" y="661" width="0.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1168.54" y="671.5" ></text>
</g>
<g >
<title>aa_file_perm (120,000,000 samples, 0.02%)</title><rect x="833.0" y="293" width="0.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="835.97" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::_Variant_storage&lt;5ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (60,000,000 samples, 0.01%)</title><rect x="1153.5" y="245" width="0.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1156.53" y="255.5" ></text>
</g>
<g >
<title>__seccomp_filter (260,000,000 samples, 0.04%)</title><rect x="915.8" y="341" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="918.78" y="351.5" ></text>
</g>
<g >
<title>GlassDatabase::open_tables (220,000,000 samples, 0.03%)</title><rect x="1152.8" y="565" width="0.4" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1155.81" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (70,000,000 samples, 0.01%)</title><rect x="114.5" y="533" width="0.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="117.49" y="543.5" ></text>
</g>
<g >
<title>filemap_read (350,000,000 samples, 0.05%)</title><rect x="941.1" y="277" width="0.6" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="944.12" y="287.5" ></text>
</g>
<g >
<title>kl::server::GrammarContext::buildQuery (480,000,000 samples, 0.07%)</title><rect x="1151.7" y="597" width="0.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1154.73" y="607.5" ></text>
</g>
<g >
<title>generic_file_read_iter (350,000,000 samples, 0.05%)</title><rect x="941.1" y="293" width="0.6" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="944.12" y="303.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::LongHistogramAggregation::ToPoint (70,000,000 samples, 0.01%)</title><rect x="1189.4" y="261" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1192.37" y="271.5" ></text>
</g>
<g >
<title>MultiMatch::MultiMatch (4,330,000,000 samples, 0.65%)</title><rect x="116.9" y="565" width="7.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="119.92" y="575.5" ></text>
</g>
<g >
<title>worker_thread_run (520,000,000 samples, 0.08%)</title><rect x="1188.9" y="645" width="1.0" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1191.94" y="655.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (420,000,000 samples, 0.06%)</title><rect x="942.1" y="405" width="0.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="945.14" y="415.5" ></text>
</g>
<g >
<title>std::__insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;Xapian::Internal::MSetItem*, std::vector&lt;Xapian::Internal::MSetItem, std::allocator&lt;Xapian::Internal::MSetItem&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (100,000,000 samples, 0.01%)</title><rect x="1099.5" y="549" width="0.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1102.46" y="559.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::LongCounter&lt;unsigned long&gt;::Add (110,000,000 samples, 0.02%)</title><rect x="28.5" y="597" width="0.2" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="31.51" y="607.5" ></text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (920,000,000 samples, 0.14%)</title><rect x="98.7" y="389" width="1.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="101.67" y="399.5" ></text>
</g>
<g >
<title>add_to_page_cache_lru (70,000,000 samples, 0.01%)</title><rect x="934.4" y="229" width="0.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="937.45" y="239.5" ></text>
</g>
<g >
<title>start_thread (90,000,000 samples, 0.01%)</title><rect x="1188.7" y="677" width="0.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1191.73" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (640,000,000 samples, 0.10%)</title><rect x="18.4" y="645" width="1.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="21.37" y="655.5" ></text>
</g>
<g >
<title>__libc_pread (32,420,000,000 samples, 4.84%)</title><rect x="43.4" y="453" width="57.0" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="46.36" y="463.5" >__libc..</text>
</g>
<g >
<title>GlassTable::form_key (330,000,000 samples, 0.05%)</title><rect x="854.5" y="469" width="0.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="857.49" y="479.5" ></text>
</g>
<g >
<title>google::protobuf::internal::RepeatedPtrFieldBase::AddOutOfLineHelper (130,000,000 samples, 0.02%)</title><rect x="1158.4" y="565" width="0.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1161.41" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (60,000,000 samples, 0.01%)</title><rect x="1189.0" y="213" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1191.96" y="223.5" ></text>
</g>
<g >
<title>opentelemetry::v1::exporter::otlp::OtlpHttpClient::Export (90,000,000 samples, 0.01%)</title><rect x="1188.2" y="517" width="0.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1191.15" y="527.5" ></text>
</g>
<g >
<title>workingset_refault (160,000,000 samples, 0.02%)</title><rect x="908.4" y="213" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="911.44" y="223.5" ></text>
</g>
<g >
<title>google::protobuf::internal::TaggedStringPtr::SetAllocated (100,000,000 samples, 0.01%)</title><rect x="1158.8" y="517" width="0.1" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1161.76" y="527.5" ></text>
</g>
<g >
<title>aisearch::SUSearchServiceAsyncProcessor::return_Search&lt;apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter&gt; (250,000,000 samples, 0.04%)</title><rect x="1161.9" y="533" width="0.5" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1164.95" y="543.5" ></text>
</g>
<g >
<title>GlassDatabase::get_doclength (320,000,000 samples, 0.05%)</title><rect x="1047.9" y="501" width="0.6" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1050.90" y="511.5" ></text>
</g>
<g >
<title>__blk_mq_try_issue_directly (80,000,000 samples, 0.01%)</title><rect x="122.7" y="133" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="125.73" y="143.5" ></text>
</g>
<g >
<title>aisearch::SUDocItem::SUDocItem (150,000,000 samples, 0.02%)</title><rect x="1148.5" y="597" width="0.2" height="15.0" fill="rgb(223,82,19)" rx="2" ry="2" />
<text  x="1151.46" y="607.5" ></text>
</g>
<g >
<title>submit_bio (110,000,000 samples, 0.02%)</title><rect x="909.2" y="181" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="912.23" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::_Alloc_node::operator (60,000,000 samples, 0.01%)</title><rect x="1154.9" y="405" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1157.88" y="415.5" ></text>
</g>
<g >
<title>GlassDatabase::open_document (110,000,000 samples, 0.02%)</title><rect x="1146.2" y="565" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1149.17" y="575.5" ></text>
</g>
<g >
<title>do_filp_open (510,000,000 samples, 0.08%)</title><rect x="20.2" y="581" width="0.9" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="23.18" y="591.5" ></text>
</g>
<g >
<title>apache::thrift::Client&lt;aisearch::SUSearchService&gt;::future_ShardSearch (340,000,000 samples, 0.05%)</title><rect x="27.9" y="581" width="0.6" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="30.88" y="591.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::LongCounter&lt;unsigned long&gt;::Add (1,270,000,000 samples, 0.19%)</title><rect x="1153.3" y="597" width="2.2" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1156.28" y="607.5" ></text>
</g>
<g >
<title>GlassPostList::open_nearby_postlist (3,040,000,000 samples, 0.45%)</title><rect x="143.5" y="405" width="5.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="146.51" y="415.5" ></text>
</g>
<g >
<title>__vfprintf_internal (1,750,000,000 samples, 0.26%)</title><rect x="24.0" y="661" width="3.0" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="26.97" y="671.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::common::OrderedAttributeMap::OrderedAttributeMap (70,000,000 samples, 0.01%)</title><rect x="1155.8" y="533" width="0.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1158.76" y="543.5" ></text>
</g>
<g >
<title>msetcmp_by_relevance&lt;true&gt; (1,690,000,000 samples, 0.25%)</title><rect x="1093.7" y="549" width="3.0" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1096.69" y="559.5" ></text>
</g>
<g >
<title>GlassCursor::find_entry (80,000,000 samples, 0.01%)</title><rect x="159.7" y="405" width="0.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="162.66" y="415.5" ></text>
</g>
<g >
<title>apache::thrift::Client&lt;aisearch::SUSearchService&gt;::future_ShardSearch (340,000,000 samples, 0.05%)</title><rect x="27.9" y="597" width="0.6" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="30.88" y="607.5" ></text>
</g>
<g >
<title>xas_start (140,000,000 samples, 0.02%)</title><rect x="94.1" y="261" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="97.06" y="271.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::map (130,000,000 samples, 0.02%)</title><rect x="1154.9" y="501" width="0.2" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="1157.88" y="511.5" ></text>
</g>
<g >
<title>copy_page_to_iter (90,000,000 samples, 0.01%)</title><rect x="144.8" y="149" width="0.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="147.76" y="159.5" ></text>
</g>
<g >
<title>get_page_from_freelist (100,000,000 samples, 0.01%)</title><rect x="909.7" y="181" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="912.74" y="191.5" ></text>
</g>
<g >
<title>GlassPostList::skip_to (80,000,000 samples, 0.01%)</title><rect x="1018.7" y="501" width="0.1" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="1021.70" y="511.5" ></text>
</g>
<g >
<title>opentelemetry::v1::nostd::visit&lt;opentelemetry::v1::sdk::common::GetHashForAttributeValueVisitor, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;&amp;&gt; (130,000,000 samples, 0.02%)</title><rect x="1153.7" y="469" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1156.67" y="479.5" ></text>
</g>
<g >
<title>[libjemalloc.so.2] (70,000,000 samples, 0.01%)</title><rect x="16.1" y="645" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="19.06" y="655.5" ></text>
</g>
<g >
<title>opentelemetry::v1::nostd::function_ref&lt;bool  (260,000,000 samples, 0.04%)</title><rect x="1154.1" y="501" width="0.4" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1157.07" y="511.5" ></text>
</g>
<g >
<title>current_time (70,000,000 samples, 0.01%)</title><rect x="96.1" y="293" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="99.13" y="303.5" ></text>
</g>
<g >
<title>_IO_old_init (70,000,000 samples, 0.01%)</title><rect x="19.9" y="661" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="22.91" y="671.5" ></text>
</g>
<g >
<title>GlassTable::next_for_sequential (31,520,000,000 samples, 4.70%)</title><rect x="861.2" y="469" width="55.5" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="864.15" y="479.5" >Glass..</text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;aisearch::SUDocItem*, std::vector&lt;aisearch::SUDocItem, std::allocator&lt;aisearch::SUDocItem&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;kl::server::Handler::future_Search (120,000,000 samples, 0.02%)</title><rect x="10.7" y="565" width="0.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="13.74" y="575.5" ></text>
</g>
<g >
<title>GlassTable::read_block (170,000,000 samples, 0.03%)</title><rect x="143.1" y="309" width="0.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="146.09" y="319.5" ></text>
</g>
<g >
<title>rocksdb::BlockIter&lt;rocksdb::IndexValue&gt;::CompareCurrentKey (250,000,000 samples, 0.04%)</title><rect x="157.8" y="245" width="0.4" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="160.76" y="255.5" ></text>
</g>
<g >
<title>__lock_text_start (80,000,000 samples, 0.01%)</title><rect x="908.2" y="181" width="0.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="911.21" y="191.5" ></text>
</g>
<g >
<title>GlassPostList::move_forward_in_chunk_to_at_least (1,220,000,000 samples, 0.18%)</title><rect x="234.7" y="517" width="2.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="237.68" y="527.5" ></text>
</g>
<g >
<title>filemap_get_pages (300,000,000 samples, 0.04%)</title><rect x="1015.2" y="293" width="0.5" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1018.18" y="303.5" ></text>
</g>
<g >
<title>aa_file_perm (120,000,000 samples, 0.02%)</title><rect x="96.9" y="325" width="0.3" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="99.94" y="335.5" ></text>
</g>
<g >
<title>apache::thrift::HandlerCallback&lt;std::unique_ptr&lt;aisearch::SUSearchResult, std::default_delete&lt;aisearch::SUSearchResult&gt; &gt; &gt;::complete (260,000,000 samples, 0.04%)</title><rect x="1161.9" y="581" width="0.5" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1164.93" y="591.5" ></text>
</g>
<g >
<title>GlassPostList::next_chunk (70,000,000 samples, 0.01%)</title><rect x="1088.1" y="517" width="0.2" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1091.14" y="527.5" ></text>
</g>
<g >
<title>filemap_get_pages (1,180,000,000 samples, 0.18%)</title><rect x="120.9" y="293" width="2.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="123.95" y="303.5" ></text>
</g>
<g >
<title>GlassTable::find (60,000,000 samples, 0.01%)</title><rect x="918.8" y="485" width="0.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="921.76" y="495.5" ></text>
</g>
<g >
<title>std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;Xapian::Internal::MSetItem*, std::vector&lt;Xapian::Internal::MSetItem, std::allocator&lt;Xapian::Internal::MSetItem&gt; &gt; &gt;, long, Xapian::Internal::MSetItem, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (60,000,000 samples, 0.01%)</title><rect x="1096.7" y="549" width="0.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1099.66" y="559.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (990,000,000 samples, 0.15%)</title><rect x="1166.3" y="661" width="1.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1169.26" y="671.5" ></text>
</g>
<g >
<title>OrPostList::~OrPostList (180,000,000 samples, 0.03%)</title><rect x="1074.1" y="517" width="0.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1077.12" y="527.5" ></text>
</g>
<g >
<title>GlassPostListTable::get_freqs (3,250,000,000 samples, 0.49%)</title><rect x="118.1" y="517" width="5.8" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="121.13" y="527.5" ></text>
</g>
<g >
<title>workingset_refault (90,000,000 samples, 0.01%)</title><rect x="828.9" y="197" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="831.89" y="207.5" ></text>
</g>
<g >
<title>__memcmp_evex_movbe (1,070,000,000 samples, 0.16%)</title><rect x="1168.1" y="677" width="1.9" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1171.14" y="687.5" ></text>
</g>
<g >
<title>GlassPostList::current_chunk_contains (1,250,000,000 samples, 0.19%)</title><rect x="964.8" y="517" width="2.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="967.83" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::_M_clone_node&lt;false, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (60,000,000 samples, 0.01%)</title><rect x="1154.9" y="421" width="0.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1157.88" y="431.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::trace::MultiSpanProcessor::MakeRecordable (150,000,000 samples, 0.02%)</title><rect x="1150.7" y="549" width="0.2" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1153.66" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, opentelemetry::v1::sdk::metrics::SumPointData, opentelemetry::v1::sdk::metrics::HistogramPointData, opentelemetry::v1::sdk::metrics::LastValuePointData, opentelemetry::v1::sdk::metrics::DropPointData&gt;::_Variant_storage&lt;1ul, opentelemetry::v1::sdk::metrics::HistogramPointData const&amp;&gt; (60,000,000 samples, 0.01%)</title><rect x="1189.4" y="197" width="0.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1192.37" y="207.5" ></text>
</g>
<g >
<title>apache::thrift::GeneratedAsyncProcessorBase::deserializeRequest&lt;apache::thrift::CompactProtocolReader, apache::thrift::ThriftPresult&lt;false, apache::thrift::FieldData&lt; (810,000,000 samples, 0.12%)</title><rect x="28.9" y="629" width="1.4" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="31.88" y="639.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;Xapian::Internal::MSetItem*, std::vector&lt;Xapian::Internal::MSetItem, std::allocator&lt;Xapian::Internal::MSetItem&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (110,000,000 samples, 0.02%)</title><rect x="1099.8" y="533" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1102.76" y="543.5" ></text>
</g>
<g >
<title>Xapian::Internal::MSetItem::operator= (120,000,000 samples, 0.02%)</title><rect x="1142.0" y="565" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1145.05" y="575.5" ></text>
</g>
<g >
<title>copy_page_to_iter (720,000,000 samples, 0.11%)</title><rect x="869.4" y="293" width="1.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="872.43" y="303.5" ></text>
</g>
<g >
<title>vfs_read (750,000,000 samples, 0.11%)</title><rect x="1016.8" y="373" width="1.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1019.76" y="383.5" ></text>
</g>
<g >
<title>rocksdb::DBImplReadOnly::Get (470,000,000 samples, 0.07%)</title><rect x="1149.0" y="549" width="0.9" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1152.04" y="559.5" ></text>
</g>
<g >
<title>Xapian::MiniRankWeight::init (5,440,000,000 samples, 0.81%)</title><rect x="149.3" y="405" width="9.6" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="152.32" y="415.5" ></text>
</g>
<g >
<title>GlassTable::read_tag (140,000,000 samples, 0.02%)</title><rect x="919.2" y="485" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="922.20" y="495.5" ></text>
</g>
<g >
<title>opentelemetry::v1::nostd::function_ref&lt;bool  (520,000,000 samples, 0.08%)</title><rect x="1188.9" y="453" width="1.0" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1191.94" y="463.5" ></text>
</g>
<g >
<title>touch_atime (290,000,000 samples, 0.04%)</title><rect x="832.0" y="277" width="0.5" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="835.02" y="287.5" ></text>
</g>
<g >
<title>alloc_pages (110,000,000 samples, 0.02%)</title><rect x="829.5" y="197" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="832.51" y="207.5" ></text>
</g>
<g >
<title>opentelemetry::v1::nostd::visit&lt;opentelemetry::v1::sdk::common::GetHashForAttributeValueVisitor, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; const&amp;&gt; (60,000,000 samples, 0.01%)</title><rect x="1189.0" y="261" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1191.96" y="271.5" ></text>
</g>
<g >
<title>GlassPostList::GlassPostList (240,000,000 samples, 0.04%)</title><rect x="143.0" y="389" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="146.02" y="399.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::trace::Span::Span (430,000,000 samples, 0.06%)</title><rect x="1150.3" y="565" width="0.7" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1153.27" y="575.5" ></text>
</g>
<g >
<title>Xapian::Query::get_description[abi:cxx11] (480,000,000 samples, 0.07%)</title><rect x="1147.0" y="597" width="0.9" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1150.01" y="607.5" ></text>
</g>
<g >
<title>__libc_pread (2,830,000,000 samples, 0.42%)</title><rect x="108.6" y="469" width="5.0" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="111.59" y="479.5" ></text>
</g>
<g >
<title>filemap_read (2,490,000,000 samples, 0.37%)</title><rect x="118.7" y="309" width="4.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="121.75" y="319.5" ></text>
</g>
<g >
<title>rocksdb::MemTable::Get (330,000,000 samples, 0.05%)</title><rect x="1149.2" y="533" width="0.6" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1152.23" y="543.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (980,000,000 samples, 0.15%)</title><rect x="933.1" y="421" width="1.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="936.09" y="431.5" ></text>
</g>
<g >
<title>__secure_computing (300,000,000 samples, 0.04%)</title><rect x="834.6" y="341" width="0.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="837.65" y="351.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (70,000,000 samples, 0.01%)</title><rect x="1153.0" y="485" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1156.03" y="495.5" ></text>
</g>
<g >
<title>GlassPostList::move_to_chunk_containing (3,220,000,000 samples, 0.48%)</title><rect x="1010.9" y="501" width="5.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1013.91" y="511.5" ></text>
</g>
<g >
<title>[unknown] (450,000,000 samples, 0.07%)</title><rect x="10.2" y="645" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.16" y="655.5" ></text>
</g>
<g >
<title>do_syscall_64 (30,860,000,000 samples, 4.61%)</title><rect x="46.1" y="421" width="54.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="49.07" y="431.5" >do_sy..</text>
</g>
<g >
<title>opentelemetry::proto::collector::trace::v1::ExportTraceServiceRequest::SharedDtor (60,000,000 samples, 0.01%)</title><rect x="1188.0" y="517" width="0.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1191.05" y="527.5" ></text>
</g>
<g >
<title>google::protobuf::internal::TaggedStringPtr::TagAs (100,000,000 samples, 0.01%)</title><rect x="1158.8" y="501" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1161.76" y="511.5" ></text>
</g>
<g >
<title>GlassTable::find_in_branch (110,000,000 samples, 0.02%)</title><rect x="854.2" y="469" width="0.2" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="857.21" y="479.5" ></text>
</g>
<g >
<title>do_syscall_64 (940,000,000 samples, 0.14%)</title><rect x="1014.3" y="405" width="1.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1017.26" y="415.5" ></text>
</g>
<g >
<title>GlassCursor::find_entry (190,000,000 samples, 0.03%)</title><rect x="143.1" y="357" width="0.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="146.09" y="367.5" ></text>
</g>
<g >
<title>rd_kafka_thread_main (80,000,000 samples, 0.01%)</title><rect x="1189.9" y="661" width="0.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1192.86" y="671.5" ></text>
</g>
<g >
<title>apparmor_file_permission (280,000,000 samples, 0.04%)</title><rect x="96.7" y="341" width="0.5" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="99.68" y="351.5" ></text>
</g>
<g >
<title>__libc_pread (1,030,000,000 samples, 0.15%)</title><rect x="933.0" y="437" width="1.8" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="936.00" y="447.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::trace::BatchSpanProcessor::Export (230,000,000 samples, 0.03%)</title><rect x="1188.0" y="565" width="0.4" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1191.03" y="575.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::DefaultAggregation::CreateAggregation (240,000,000 samples, 0.04%)</title><rect x="1156.0" y="437" width="0.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1159.05" y="447.5" ></text>
</g>
<g >
<title>__add_to_page_cache_locked (110,000,000 samples, 0.02%)</title><rect x="829.7" y="197" width="0.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="832.72" y="207.5" ></text>
</g>
<g >
<title>vfs_read (980,000,000 samples, 0.15%)</title><rect x="106.2" y="405" width="1.8" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="109.23" y="415.5" ></text>
</g>
<g >
<title>page_cache_ra_unbounded (120,000,000 samples, 0.02%)</title><rect x="1015.4" y="245" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1018.41" y="255.5" ></text>
</g>
<g >
<title>[ai_index] (810,000,000 samples, 0.12%)</title><rect x="1060.0" y="533" width="1.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1063.01" y="543.5" ></text>
</g>
<g >
<title>apache::thrift::concurrency::ThreadManager::Impl::Worker::run (644,210,000,000 samples, 96.15%)</title><rect x="27.4" y="661" width="1134.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="30.38" y="671.5" >apache::thrift::concurrency::ThreadManager::Impl::Worker::run</text>
</g>
<g >
<title>GlassTable::find (80,000,000 samples, 0.01%)</title><rect x="159.7" y="389" width="0.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="162.66" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (60,000,000 samples, 0.01%)</title><rect x="1165.4" y="629" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1168.38" y="639.5" ></text>
</g>
<g >
<title>rocksdb::Version::Get (3,830,000,000 samples, 0.57%)</title><rect x="152.0" y="309" width="6.8" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="155.01" y="319.5" ></text>
</g>
<g >
<title>CivetServer::requestHandler (520,000,000 samples, 0.08%)</title><rect x="1188.9" y="581" width="1.0" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="1191.94" y="591.5" ></text>
</g>
<g >
<title>__fget_files (410,000,000 samples, 0.06%)</title><rect x="46.5" y="357" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="49.49" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;opentelemetry::v1::sdk::common::OrderedAttributeMap, std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt; &gt;::pair&lt;opentelemetry::v1::sdk::common::OrderedAttributeMap&amp;, std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt;, true&gt; (130,000,000 samples, 0.02%)</title><rect x="1154.9" y="533" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1157.88" y="543.5" ></text>
</g>
<g >
<title>aa_file_perm (120,000,000 samples, 0.02%)</title><rect x="913.7" y="309" width="0.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="916.70" y="319.5" ></text>
</g>
<g >
<title>populate_seccomp_data (70,000,000 samples, 0.01%)</title><rect x="835.0" y="325" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="838.03" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::_Variant_base (60,000,000 samples, 0.01%)</title><rect x="1154.9" y="293" width="0.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1157.88" y="303.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,030,000,000 samples, 0.30%)</title><rect x="144.2" y="277" width="3.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="147.21" y="287.5" ></text>
</g>
<g >
<title>__madvise (520,000,000 samples, 0.08%)</title><rect x="21.7" y="661" width="0.9" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="24.69" y="671.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (60,000,000 samples, 0.01%)</title><rect x="1072.7" y="421" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1075.71" y="431.5" ></text>
</g>
<g >
<title>apparmor_file_permission (200,000,000 samples, 0.03%)</title><rect x="832.9" y="309" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="835.85" y="319.5" ></text>
</g>
<g >
<title>GlassTable::form_key (100,000,000 samples, 0.01%)</title><rect x="918.9" y="485" width="0.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="921.86" y="495.5" ></text>
</g>
<g >
<title>filemap_get_pages (110,000,000 samples, 0.02%)</title><rect x="1013.6" y="293" width="0.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1016.61" y="303.5" ></text>
</g>
<g >
<title>new_sync_read (740,000,000 samples, 0.11%)</title><rect x="1016.8" y="357" width="1.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1019.78" y="367.5" ></text>
</g>
<g >
<title>ksys_write (140,000,000 samples, 0.02%)</title><rect x="1162.6" y="565" width="0.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1165.60" y="575.5" ></text>
</g>
<g >
<title>Xapian::Enquire::Internal::get_document (310,000,000 samples, 0.05%)</title><rect x="1146.4" y="565" width="0.5" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1149.40" y="575.5" ></text>
</g>
<g >
<title>blk_flush_plug_list (60,000,000 samples, 0.01%)</title><rect x="910.3" y="197" width="0.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="913.25" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (60,000,000 samples, 0.01%)</title><rect x="1145.3" y="533" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1148.30" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;opentelemetry::v1::sdk::metrics::SumPointData, opentelemetry::v1::sdk::metrics::HistogramPointData, opentelemetry::v1::sdk::metrics::LastValuePointData, opentelemetry::v1::sdk::metrics::DropPointData&gt;::_Variant_base&lt;1ul, opentelemetry::v1::sdk::metrics::HistogramPointData const&amp;&gt; (60,000,000 samples, 0.01%)</title><rect x="1189.4" y="213" width="0.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1192.37" y="223.5" ></text>
</g>
<g >
<title>sysvec_reschedule_ipi (490,000,000 samples, 0.07%)</title><rect x="777.5" y="469" width="0.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="780.52" y="479.5" ></text>
</g>
<g >
<title>net_rx_action (70,000,000 samples, 0.01%)</title><rect x="777.3" y="421" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="780.34" y="431.5" ></text>
</g>
<g >
<title>GlassTable::read_block (70,000,000 samples, 0.01%)</title><rect x="1088.1" y="469" width="0.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1091.14" y="479.5" ></text>
</g>
<g >
<title>clock_gettime@@GLIBC_2.17 (380,000,000 samples, 0.06%)</title><rect x="32.2" y="613" width="0.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="35.24" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, std::pair&lt;opentelemetry::v1::sdk::common::OrderedAttributeMap, std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, std::pair&lt;opentelemetry::v1::sdk::common::OrderedAttributeMap, std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (130,000,000 samples, 0.02%)</title><rect x="1189.6" y="245" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1192.63" y="255.5" ></text>
</g>
<g >
<title>GlassTable::next_for_sequential (80,000,000 samples, 0.01%)</title><rect x="919.0" y="485" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="922.04" y="495.5" ></text>
</g>
<g >
<title>folly::detail::function::FunctionTraits&lt;void  (450,000,000 samples, 0.07%)</title><rect x="10.2" y="597" width="0.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="13.16" y="607.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::trace::Span::~Span (380,000,000 samples, 0.06%)</title><rect x="1160.5" y="517" width="0.6" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1163.47" y="527.5" ></text>
</g>
<g >
<title>new_sync_read (1,360,000,000 samples, 0.20%)</title><rect x="855.5" y="357" width="2.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="858.53" y="367.5" ></text>
</g>
<g >
<title>blk_mq_try_issue_list_directly (80,000,000 samples, 0.01%)</title><rect x="122.7" y="149" width="0.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="125.73" y="159.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (730,000,000 samples, 0.11%)</title><rect x="106.3" y="325" width="1.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="109.28" y="335.5" ></text>
</g>
<g >
<title>generic_file_read_iter (920,000,000 samples, 0.14%)</title><rect x="933.2" y="325" width="1.6" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="936.16" y="335.5" ></text>
</g>
<g >
<title>google::protobuf::internal::ArenaStringPtr::Set&lt;&gt; (150,000,000 samples, 0.02%)</title><rect x="1157.4" y="469" width="0.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1160.42" y="479.5" ></text>
</g>
<g >
<title>Xapian::MiniRankWeight::clone (250,000,000 samples, 0.04%)</title><rect x="148.9" y="405" width="0.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="151.88" y="415.5" ></text>
</g>
<g >
<title>rocksdb::Block::NewIndexIterator (60,000,000 samples, 0.01%)</title><rect x="153.3" y="245" width="0.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="156.30" y="255.5" ></text>
</g>
<g >
<title>Xapian::Internal::QueryBranch::get_description_helper[abi:cxx11] (420,000,000 samples, 0.06%)</title><rect x="1147.0" y="565" width="0.8" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1150.03" y="575.5" ></text>
</g>
<g >
<title>__add_to_page_cache_locked (110,000,000 samples, 0.02%)</title><rect x="909.9" y="213" width="0.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="912.92" y="223.5" ></text>
</g>
<g >
<title>description_append (90,000,000 samples, 0.01%)</title><rect x="1147.4" y="485" width="0.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1150.42" y="495.5" ></text>
</g>
<g >
<title>opentelemetry::v1::nostd::visit&lt;opentelemetry::v1::sdk::common::AttributeConverter&amp;, std::variant&lt;bool, int, long, unsigned int, double, char const*, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, opentelemetry::v1::nostd::span&lt;bool const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;int const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;long const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;unsigned int const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;double const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const, 18446744073709551615ul&gt;, unsigned long, opentelemetry::v1::nostd::span&lt;unsigned long const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;unsigned char const, 18446744073709551615ul&gt; &gt;&amp;&gt; (130,000,000 samples, 0.02%)</title><rect x="1153.4" y="469" width="0.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1156.44" y="479.5" ></text>
</g>
<g >
<title>walk_component (80,000,000 samples, 0.01%)</title><rect x="20.9" y="533" width="0.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="23.88" y="543.5" ></text>
</g>
<g >
<title>GlassTable::read_tag (110,000,000 samples, 0.02%)</title><rect x="113.6" y="501" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="116.62" y="511.5" ></text>
</g>
<g >
<title>GlassPostList::move_forward_in_chunk_to_at_least (268,130,000,000 samples, 40.02%)</title><rect x="306.2" y="501" width="472.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="309.18" y="511.5" >GlassPostList::move_forward_in_chunk_to_at_least</text>
</g>
<g >
<title>__x64_sys_pread64 (570,000,000 samples, 0.09%)</title><rect x="1012.9" y="389" width="1.0" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1015.89" y="399.5" ></text>
</g>
<g >
<title>__memset_evex_unaligned_erms (140,000,000 samples, 0.02%)</title><rect x="1178.9" y="677" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1181.89" y="687.5" ></text>
</g>
<g >
<title>kl::server::Handler::future_Search (400,000,000 samples, 0.06%)</title><rect x="10.2" y="581" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.25" y="591.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;opentelemetry::v1::sdk::metrics::AttributesHashMap&gt;::~shared_ptr (130,000,000 samples, 0.02%)</title><rect x="1189.6" y="373" width="0.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1192.63" y="383.5" ></text>
</g>
<g >
<title>new_sync_read (230,000,000 samples, 0.03%)</title><rect x="148.2" y="229" width="0.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="151.19" y="239.5" ></text>
</g>
<g >
<title>security_file_open (110,000,000 samples, 0.02%)</title><rect x="20.4" y="501" width="0.2" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="23.44" y="511.5" ></text>
</g>
<g >
<title>do_user_addr_fault (60,000,000 samples, 0.01%)</title><rect x="147.8" y="277" width="0.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="150.79" y="287.5" ></text>
</g>
<g >
<title>google::protobuf::internal::(anonymous namespace)::CreateString (110,000,000 samples, 0.02%)</title><rect x="1158.7" y="533" width="0.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1161.74" y="543.5" ></text>
</g>
<g >
<title>GlassPostList::init (80,000,000 samples, 0.01%)</title><rect x="159.7" y="421" width="0.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="162.66" y="431.5" ></text>
</g>
<g >
<title>Xapian::MiniRankWeight::init (260,000,000 samples, 0.04%)</title><rect x="159.8" y="453" width="0.5" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="162.80" y="463.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (130,000,000 samples, 0.02%)</title><rect x="1189.6" y="341" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1192.63" y="351.5" ></text>
</g>
<g >
<title>rocksdb::BlockFetcher::ReadBlockContents (80,000,000 samples, 0.01%)</title><rect x="155.0" y="213" width="0.2" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="158.04" y="223.5" ></text>
</g>
<g >
<title>page_cache_ra_unbounded (170,000,000 samples, 0.03%)</title><rect x="934.3" y="245" width="0.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="937.33" y="255.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (80,000,000 samples, 0.01%)</title><rect x="146.8" y="133" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="149.77" y="143.5" ></text>
</g>
<g >
<title>new_sync_read (60,000,000 samples, 0.01%)</title><rect x="1088.2" y="373" width="0.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1091.16" y="383.5" ></text>
</g>
<g >
<title>ext4_mpage_readpages (140,000,000 samples, 0.02%)</title><rect x="829.1" y="181" width="0.2" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="832.10" y="191.5" ></text>
</g>
<g >
<title>GlassPostList::~GlassPostList (70,000,000 samples, 0.01%)</title><rect x="1074.1" y="469" width="0.2" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1077.14" y="479.5" ></text>
</g>
<g >
<title>__submit_bio (70,000,000 samples, 0.01%)</title><rect x="829.2" y="133" width="0.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="832.21" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (130,000,000 samples, 0.02%)</title><rect x="931.9" y="485" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="934.89" y="495.5" ></text>
</g>
<g >
<title>__page_cache_alloc (60,000,000 samples, 0.01%)</title><rect x="1017.6" y="229" width="0.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1020.57" y="239.5" ></text>
</g>
<g >
<title>opentelemetry::v1::nostd::function_ref&lt;bool  (520,000,000 samples, 0.08%)</title><rect x="1188.9" y="437" width="1.0" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1191.94" y="447.5" ></text>
</g>
<g >
<title>std::__pop_heap&lt;__gnu_cxx::__normal_iterator&lt;Xapian::Internal::MSetItem*, std::vector&lt;Xapian::Internal::MSetItem, std::allocator&lt;Xapian::Internal::MSetItem&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (70,000,000 samples, 0.01%)</title><rect x="1144.9" y="565" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1147.93" y="575.5" ></text>
</g>
<g >
<title>__GI___pthread_disable_asynccancel (100,000,000 samples, 0.01%)</title><rect x="788.5" y="421" width="0.1" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="791.47" y="431.5" ></text>
</g>
<g >
<title>filemap_get_read_batch (180,000,000 samples, 0.03%)</title><rect x="857.5" y="277" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="860.45" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (110,000,000 samples, 0.02%)</title><rect x="931.7" y="485" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="934.70" y="495.5" ></text>
</g>
<g >
<title>GlassPostList::next_in_chunk (70,000,000 samples, 0.01%)</title><rect x="1088.6" y="533" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1091.63" y="543.5" ></text>
</g>
<g >
<title>bvar::detail::SamplerCollector::run (90,000,000 samples, 0.01%)</title><rect x="1188.7" y="645" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1191.73" y="655.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (1,160,000,000 samples, 0.17%)</title><rect x="914.3" y="389" width="2.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="917.32" y="399.5" ></text>
</g>
<g >
<title>ondemand_readahead (120,000,000 samples, 0.02%)</title><rect x="1015.4" y="261" width="0.2" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1018.41" y="271.5" ></text>
</g>
<g >
<title>rocksdb::BlockBasedTable::Get (3,150,000,000 samples, 0.47%)</title><rect x="153.0" y="277" width="5.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="155.97" y="287.5" ></text>
</g>
<g >
<title>pipe_write (900,000,000 samples, 0.13%)</title><rect x="1166.3" y="565" width="1.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1169.35" y="575.5" ></text>
</g>
<g >
<title>Xapian::Internal::AndContext::postlist (70,000,000 samples, 0.01%)</title><rect x="142.2" y="517" width="0.1" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="145.22" y="527.5" ></text>
</g>
<g >
<title>current_time (130,000,000 samples, 0.02%)</title><rect x="95.8" y="277" width="0.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="98.84" y="287.5" ></text>
</g>
<g >
<title>filemap_get_read_batch (570,000,000 samples, 0.09%)</title><rect x="121.0" y="277" width="1.0" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="123.98" y="287.5" ></text>
</g>
<g >
<title>zap_page_range (500,000,000 samples, 0.07%)</title><rect x="21.7" y="581" width="0.9" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="24.71" y="591.5" ></text>
</g>
<g >
<title>__libc_pread (70,000,000 samples, 0.01%)</title><rect x="1088.1" y="453" width="0.2" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1091.14" y="463.5" ></text>
</g>
<g >
<title>GlassPostList::get_docid (3,900,000,000 samples, 0.58%)</title><rect x="217.9" y="533" width="6.8" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="220.88" y="543.5" ></text>
</g>
<g >
<title>generic_file_read_iter (740,000,000 samples, 0.11%)</title><rect x="1016.8" y="325" width="1.3" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1019.78" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (590,000,000 samples, 0.09%)</title><rect x="1186.6" y="677" width="1.0" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1189.57" y="687.5" ></text>
</g>
<g >
<title>GlassCursor::find_entry (1,670,000,000 samples, 0.25%)</title><rect x="1011.1" y="485" width="2.9" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1014.11" y="495.5" ></text>
</g>
<g >
<title>[ai_index] (330,000,000 samples, 0.05%)</title><rect x="839.7" y="453" width="0.6" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="842.68" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, opentelemetry::v1::sdk::metrics::SumPointData, opentelemetry::v1::sdk::metrics::HistogramPointData, opentelemetry::v1::sdk::metrics::LastValuePointData, opentelemetry::v1::sdk::metrics::DropPointData&gt;::_Variant_storage&lt;1ul, opentelemetry::v1::sdk::metrics::HistogramPointData const&amp;&gt; (60,000,000 samples, 0.01%)</title><rect x="1189.4" y="133" width="0.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1192.37" y="143.5" ></text>
</g>
<g >
<title>read_pages (220,000,000 samples, 0.03%)</title><rect x="910.3" y="229" width="0.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="913.25" y="239.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (2,630,000,000 samples, 0.39%)</title><rect x="118.6" y="389" width="4.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="121.64" y="399.5" ></text>
</g>
<g >
<title>Xapian::Internal::QueryBranch::get_description_helper[abi:cxx11] (240,000,000 samples, 0.04%)</title><rect x="1147.2" y="517" width="0.4" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1150.21" y="527.5" ></text>
</g>
<g >
<title>check_tname_in_key_lite (80,000,000 samples, 0.01%)</title><rect x="934.9" y="485" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="937.92" y="495.5" ></text>
</g>
<g >
<title>do_syscall_64 (190,000,000 samples, 0.03%)</title><rect x="117.6" y="501" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="120.64" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::~_Rb_tree (70,000,000 samples, 0.01%)</title><rect x="1155.9" y="501" width="0.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1158.89" y="511.5" ></text>
</g>
<g >
<title>hack_digit (210,000,000 samples, 0.03%)</title><rect x="26.7" y="645" width="0.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="29.68" y="655.5" ></text>
</g>
<g >
<title>apache::thrift::Client&lt;aisearch::SUSearchService&gt;::ShardSearchImpl (290,000,000 samples, 0.04%)</title><rect x="27.9" y="549" width="0.5" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="30.89" y="559.5" ></text>
</g>
<g >
<title>folly::FormatValue&lt;int, void&gt;::doFormat&lt;folly::detail::BaseFormatterAppendToString&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (130,000,000 samples, 0.02%)</title><rect x="16.7" y="629" width="0.3" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="19.74" y="639.5" ></text>
</g>
<g >
<title>[ai_index] (150,000,000 samples, 0.02%)</title><rect x="1142.4" y="565" width="0.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1145.36" y="575.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (80,000,000 samples, 0.01%)</title><rect x="1145.4" y="549" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1148.43" y="559.5" ></text>
</g>
<g >
<title>smp_call_function_many_cond (340,000,000 samples, 0.05%)</title><rect x="21.8" y="501" width="0.6" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="24.83" y="511.5" ></text>
</g>
<g >
<title>[[vdso]] (330,000,000 samples, 0.05%)</title><rect x="32.3" y="597" width="0.6" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="35.33" y="607.5" ></text>
</g>
<g >
<title>rw_verify_area (70,000,000 samples, 0.01%)</title><rect x="123.1" y="357" width="0.2" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="126.13" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (120,000,000 samples, 0.02%)</title><rect x="1183.3" y="677" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1186.31" y="687.5" ></text>
</g>
<g >
<title>GlassPostList::move_forward_in_chunk_to_at_least (2,490,000,000 samples, 0.37%)</title><rect x="967.0" y="517" width="4.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="970.03" y="527.5" ></text>
</g>
<g >
<title>GlassCursor::read_tag (70,000,000 samples, 0.01%)</title><rect x="1088.1" y="501" width="0.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1091.14" y="511.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::trace::BatchSpanProcessor::MakeRecordable (100,000,000 samples, 0.01%)</title><rect x="1150.7" y="533" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1153.66" y="543.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::common::GetHashForAttributeMap (110,000,000 samples, 0.02%)</title><rect x="1155.6" y="549" width="0.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1158.55" y="559.5" ></text>
</g>
<g >
<title>rocksdb::BlockIter&lt;rocksdb::Slice&gt;::CompareCurrentKey (130,000,000 samples, 0.02%)</title><rect x="156.1" y="229" width="0.2" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="159.08" y="239.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (60,000,000 samples, 0.01%)</title><rect x="147.8" y="309" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="150.79" y="319.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (1,710,000,000 samples, 0.26%)</title><rect x="144.4" y="197" width="3.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="147.37" y="207.5" ></text>
</g>
<g >
<title>rocksdb::Version::Get (170,000,000 samples, 0.03%)</title><rect x="160.0" y="357" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="162.96" y="367.5" ></text>
</g>
<g >
<title>security_file_permission (540,000,000 samples, 0.08%)</title><rect x="913.4" y="341" width="0.9" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="916.35" y="351.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt;  (280,000,000 samples, 0.04%)</title><rect x="1156.0" y="533" width="0.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1159.01" y="543.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::SyncMetricStorage::RecordLong (1,200,000,000 samples, 0.18%)</title><rect x="1153.3" y="565" width="2.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1156.28" y="575.5" ></text>
</g>
<g >
<title>__fdget (510,000,000 samples, 0.08%)</title><rect x="46.4" y="389" width="0.9" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="49.40" y="399.5" ></text>
</g>
<g >
<title>__GI___libc_write (990,000,000 samples, 0.15%)</title><rect x="1166.3" y="677" width="1.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1169.26" y="687.5" ></text>
</g>
<g >
<title>__secure_computing (710,000,000 samples, 0.11%)</title><rect x="99.0" y="373" width="1.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="102.04" y="383.5" ></text>
</g>
<g >
<title>alloc_pages (130,000,000 samples, 0.02%)</title><rect x="122.2" y="213" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="125.22" y="223.5" ></text>
</g>
<g >
<title>vfs_write (280,000,000 samples, 0.04%)</title><rect x="1162.9" y="549" width="0.5" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1165.86" y="559.5" ></text>
</g>
<g >
<title>aisearch::SUSearchRequest::readNoXfer&lt;apache::thrift::CompactProtocolReader&gt; (80,000,000 samples, 0.01%)</title><rect x="27.4" y="597" width="0.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="30.43" y="607.5" ></text>
</g>
<g >
<title>kl::server::Handler::get_termfreq (5,150,000,000 samples, 0.77%)</title><rect x="149.8" y="389" width="9.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="152.83" y="399.5" ></text>
</g>
<g >
<title>apache::thrift::Client&lt;aisearch::SUSearchService&gt;::ShardSearch (330,000,000 samples, 0.05%)</title><rect x="27.9" y="565" width="0.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="30.89" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; (60,000,000 samples, 0.01%)</title><rect x="1154.9" y="373" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1157.88" y="383.5" ></text>
</g>
<g >
<title>__seccomp_filter (60,000,000 samples, 0.01%)</title><rect x="98.9" y="373" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="101.93" y="383.5" ></text>
</g>
<g >
<title>__memchr_evex (60,000,000 samples, 0.01%)</title><rect x="16.5" y="629" width="0.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="19.50" y="639.5" ></text>
</g>
<g >
<title>page_cache_async_ra (2,230,000,000 samples, 0.33%)</title><rect x="905.8" y="277" width="3.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="908.80" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; (60,000,000 samples, 0.01%)</title><rect x="1154.9" y="341" width="0.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1157.88" y="351.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::common::OrderedAttributeMap::OrderedAttributeMap (130,000,000 samples, 0.02%)</title><rect x="1154.9" y="517" width="0.2" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1157.88" y="527.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (390,000,000 samples, 0.06%)</title><rect x="21.7" y="549" width="0.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="24.75" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (230,000,000 samples, 0.03%)</title><rect x="932.4" y="485" width="0.4" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="935.41" y="495.5" ></text>
</g>
<g >
<title>google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend (70,000,000 samples, 0.01%)</title><rect x="1158.5" y="549" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1161.51" y="559.5" ></text>
</g>
<g >
<title>aisearch::SUSearchResult::write&lt;apache::thrift::CompactProtocolWriter&gt; (170,000,000 samples, 0.03%)</title><rect x="1162.1" y="501" width="0.3" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1165.07" y="511.5" ></text>
</g>
<g >
<title>__seccomp_filter (180,000,000 samples, 0.03%)</title><rect x="834.7" y="325" width="0.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="837.72" y="335.5" ></text>
</g>
<g >
<title>filemap_get_read_batch (70,000,000 samples, 0.01%)</title><rect x="1017.4" y="277" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1020.45" y="287.5" ></text>
</g>
<g >
<title>get_page_from_freelist (130,000,000 samples, 0.02%)</title><rect x="122.2" y="181" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="125.22" y="191.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long const, std::pair&lt;opentelemetry::v1::sdk::common::OrderedAttributeMap, std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt; &gt; &gt;::~pair (90,000,000 samples, 0.01%)</title><rect x="1189.7" y="149" width="0.1" height="15.0" fill="rgb(246,193,46)" rx="2" ry="2" />
<text  x="1192.68" y="159.5" ></text>
</g>
<g >
<title>__fget_light (470,000,000 samples, 0.07%)</title><rect x="864.9" y="357" width="0.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="867.87" y="367.5" ></text>
</g>
<g >
<title>Xapian::Internal::QueryAnd::get_description[abi:cxx11] (460,000,000 samples, 0.07%)</title><rect x="1147.0" y="581" width="0.8" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1150.03" y="591.5" ></text>
</g>
<g >
<title>do_syscall_64 (70,000,000 samples, 0.01%)</title><rect x="1088.1" y="421" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1091.14" y="431.5" ></text>
</g>
<g >
<title>std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::variant (60,000,000 samples, 0.01%)</title><rect x="1154.9" y="309" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1157.88" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,030,000,000 samples, 0.30%)</title><rect x="144.2" y="261" width="3.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="147.21" y="271.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;__gnu_cxx::__normal_iterator&lt;Xapian::Internal::MSetItem*, std::vector&lt;Xapian::Internal::MSetItem, std::allocator&lt;Xapian::Internal::MSetItem&gt; &gt; &gt;, long, Xapian::Internal::MSetItem, __gnu_cxx::__ops::_Iter_comp_val&lt;bool  (100,000,000 samples, 0.01%)</title><rect x="1145.1" y="565" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1148.06" y="575.5" ></text>
</g>
<g >
<title>__cond_resched (70,000,000 samples, 0.01%)</title><rect x="53.5" y="293" width="0.1" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="56.48" y="303.5" ></text>
</g>
<g >
<title>exc_page_fault (60,000,000 samples, 0.01%)</title><rect x="147.8" y="293" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="150.79" y="303.5" ></text>
</g>
<g >
<title>force_page_cache_ra (140,000,000 samples, 0.02%)</title><rect x="117.7" y="437" width="0.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="120.69" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,700,000,000 samples, 0.25%)</title><rect x="855.3" y="421" width="3.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="858.31" y="431.5" ></text>
</g>
<g >
<title>filemap_get_read_batch (6,380,000,000 samples, 0.95%)</title><rect x="83.1" y="293" width="11.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="86.10" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, std::pair&lt;opentelemetry::v1::sdk::common::OrderedAttributeMap, std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node (120,000,000 samples, 0.02%)</title><rect x="1189.6" y="197" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1192.65" y="207.5" ></text>
</g>
<g >
<title>rw_verify_area (440,000,000 samples, 0.07%)</title><rect x="832.6" y="341" width="0.8" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="835.64" y="351.5" ></text>
</g>
<g >
<title>GlassTable::block_to_cursor (2,900,000,000 samples, 0.43%)</title><rect x="118.3" y="469" width="5.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="121.31" y="479.5" ></text>
</g>
<g >
<title>GlassPostList::move_to_chunk_containing (1,230,000,000 samples, 0.18%)</title><rect x="940.9" y="485" width="2.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="943.95" y="495.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,060,000,000 samples, 0.16%)</title><rect x="106.1" y="453" width="1.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="109.14" y="463.5" ></text>
</g>
<g >
<title>MultiAndPostList::next (2,970,000,000 samples, 0.44%)</title><rect x="1068.7" y="549" width="5.2" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="1071.70" y="559.5" ></text>
</g>
<g >
<title>Xapian::Enquire::set_weighting_scheme (60,000,000 samples, 0.01%)</title><rect x="1145.6" y="597" width="0.1" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1148.57" y="607.5" ></text>
</g>
<g >
<title>MultiAndPostList::get_weight (26,450,000,000 samples, 3.95%)</title><rect x="1022.1" y="549" width="46.6" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1025.12" y="559.5" >Mult..</text>
</g>
<g >
<title>std::visit&lt;opentelemetry::v1::sdk::common::GetHashForAttributeValueVisitor, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; const&amp;&gt; (60,000,000 samples, 0.01%)</title><rect x="1189.0" y="245" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1191.96" y="255.5" ></text>
</g>
<g >
<title>std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::variant&lt;5ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void&gt; (60,000,000 samples, 0.01%)</title><rect x="1153.5" y="341" width="0.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1156.53" y="351.5" ></text>
</g>
<g >
<title>__add_to_page_cache_locked (70,000,000 samples, 0.01%)</title><rect x="122.5" y="213" width="0.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="125.46" y="223.5" ></text>
</g>
<g >
<title>GlassTable::block_to_cursor (28,710,000,000 samples, 4.28%)</title><rect x="784.9" y="453" width="50.5" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="787.88" y="463.5" >Glass..</text>
</g>
<g >
<title>[ai_index] (80,000,000 samples, 0.01%)</title><rect x="1092.9" y="549" width="0.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1095.95" y="559.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (90,000,000 samples, 0.01%)</title><rect x="1153.0" y="533" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1156.00" y="543.5" ></text>
</g>
<g >
<title>read_start_of_chunk (100,000,000 samples, 0.01%)</title><rect x="935.3" y="501" width="0.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="938.29" y="511.5" ></text>
</g>
<g >
<title>check_tname_in_key_lite (60,000,000 samples, 0.01%)</title><rect x="942.9" y="469" width="0.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="945.94" y="479.5" ></text>
</g>
<g >
<title>submit_bio (90,000,000 samples, 0.01%)</title><rect x="830.5" y="165" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="833.47" y="175.5" ></text>
</g>
<g >
<title>vfs_read (60,000,000 samples, 0.01%)</title><rect x="1088.2" y="389" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1091.16" y="399.5" ></text>
</g>
<g >
<title>kl::otel::scopedSpanFromHeader (1,010,000,000 samples, 0.15%)</title><rect x="1150.0" y="597" width="1.7" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="1152.95" y="607.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (790,000,000 samples, 0.12%)</title><rect x="1166.4" y="549" width="1.4" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1169.40" y="559.5" ></text>
</g>
<g >
<title>Xapian::Weight::init_ (80,000,000 samples, 0.01%)</title><rect x="158.9" y="405" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="161.90" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (25,480,000,000 samples, 3.80%)</title><rect x="790.4" y="389" width="44.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="793.41" y="399.5" >do_s..</text>
</g>
<g >
<title>GlassCursor::read_tag (3,330,000,000 samples, 0.50%)</title><rect x="108.1" y="517" width="5.9" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="111.11" y="527.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::SyncMetricStorage::RecordLong (100,000,000 samples, 0.01%)</title><rect x="28.5" y="565" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="31.53" y="575.5" ></text>
</g>
<g >
<title>__strchrnul_evex (100,000,000 samples, 0.01%)</title><rect x="23.7" y="661" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="26.74" y="671.5" ></text>
</g>
<g >
<title>__memcmp_evex_movbe (770,000,000 samples, 0.11%)</title><rect x="838.3" y="437" width="1.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="841.31" y="447.5" ></text>
</g>
<g >
<title>Xapian::Query::get_unique_terms_begin (150,000,000 samples, 0.02%)</title><rect x="123.9" y="517" width="0.3" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="126.89" y="527.5" ></text>
</g>
<g >
<title>Glass::compare&lt;Glass::LeafItem, Glass::LeafItem&gt; (100,000,000 samples, 0.01%)</title><rect x="1011.8" y="437" width="0.1" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="1014.76" y="447.5" ></text>
</g>
<g >
<title>do_syscall_64 (70,000,000 samples, 0.01%)</title><rect x="1145.4" y="533" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1148.44" y="543.5" ></text>
</g>
<g >
<title>GlassTable::find (2,510,000,000 samples, 0.37%)</title><rect x="143.7" y="341" width="4.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="146.70" y="351.5" ></text>
</g>
<g >
<title>GlassDatabase::open_post_list (240,000,000 samples, 0.04%)</title><rect x="143.0" y="405" width="0.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="146.02" y="415.5" ></text>
</g>
<g >
<title>GlassPostList::GlassPostList (2,960,000,000 samples, 0.44%)</title><rect x="143.6" y="389" width="5.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="146.61" y="399.5" ></text>
</g>
<g >
<title>folly::detail::baseFormatterCallImpl&lt;false, false, folly::detail::BaseFormatterAppendToString&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (60,000,000 samples, 0.01%)</title><rect x="17.2" y="629" width="0.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="20.17" y="639.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, std::pair&lt;opentelemetry::v1::sdk::common::OrderedAttributeMap, std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt; &gt;, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, std::pair&lt;opentelemetry::v1::sdk::common::OrderedAttributeMap, std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt; &gt; &gt; &gt; &gt;::~unordered_map (130,000,000 samples, 0.02%)</title><rect x="1189.6" y="261" width="0.3" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1192.63" y="271.5" ></text>
</g>
<g >
<title>proc_readfd_common (90,000,000 samples, 0.01%)</title><rect x="1188.7" y="501" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1191.73" y="511.5" ></text>
</g>
<g >
<title>__lock_text_start (390,000,000 samples, 0.06%)</title><rect x="911.3" y="261" width="0.6" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="914.25" y="271.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt;  (110,000,000 samples, 0.02%)</title><rect x="1154.7" y="533" width="0.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1157.65" y="543.5" ></text>
</g>
<g >
<title>rocksdb::(anonymous namespace)::FilePicker::GetNextFile (120,000,000 samples, 0.02%)</title><rect x="152.2" y="293" width="0.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="155.23" y="303.5" ></text>
</g>
<g >
<title>kernel_clone (80,000,000 samples, 0.01%)</title><rect x="1188.5" y="597" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1191.54" y="607.5" ></text>
</g>
<g >
<title>GlassCursor::find_entry (150,000,000 samples, 0.02%)</title><rect x="241.6" y="485" width="0.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="244.60" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (90,000,000 samples, 0.01%)</title><rect x="149.1" y="357" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="152.13" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::_Variant_storage&lt;5ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (60,000,000 samples, 0.01%)</title><rect x="1153.5" y="309" width="0.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1156.53" y="319.5" ></text>
</g>
<g >
<title>Xapian::MSetIterator::get_document (580,000,000 samples, 0.09%)</title><rect x="1145.9" y="597" width="1.0" height="15.0" fill="rgb(250,209,49)" rx="2" ry="2" />
<text  x="1148.92" y="607.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (230,000,000 samples, 0.03%)</title><rect x="941.1" y="261" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="944.12" y="271.5" ></text>
</g>
<g >
<title>GlassPostList::get_docid (80,000,000 samples, 0.01%)</title><rect x="136.4" y="549" width="0.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="139.36" y="559.5" ></text>
</g>
<g >
<title>page_cache_async_ra (210,000,000 samples, 0.03%)</title><rect x="1017.6" y="277" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1020.57" y="287.5" ></text>
</g>
<g >
<title>add_to_page_cache_lru (330,000,000 samples, 0.05%)</title><rect x="828.5" y="213" width="0.5" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="831.47" y="223.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (15,610,000,000 samples, 2.33%)</title><rect x="870.7" y="293" width="27.5" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="873.70" y="303.5" >c..</text>
</g>
<g >
<title>Xapian::Internal::QueryTerm::postlist (410,000,000 samples, 0.06%)</title><rect x="159.6" y="485" width="0.7" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="162.62" y="495.5" ></text>
</g>
<g >
<title>filemap_get_read_batch (120,000,000 samples, 0.02%)</title><rect x="1015.2" y="277" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1018.18" y="287.5" ></text>
</g>
<g >
<title>GlassPostList::move_to_chunk_containing (380,000,000 samples, 0.06%)</title><rect x="241.6" y="501" width="0.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="244.58" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::_Variant_storage&lt;5ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (60,000,000 samples, 0.01%)</title><rect x="1153.5" y="261" width="0.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1156.53" y="271.5" ></text>
</g>
<g >
<title>__vfscanf_internal (190,000,000 samples, 0.03%)</title><rect x="21.4" y="645" width="0.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="24.36" y="655.5" ></text>
</g>
<g >
<title>opentelemetry::v1::nostd::function_ref&lt;bool  (70,000,000 samples, 0.01%)</title><rect x="1155.8" y="501" width="0.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1158.76" y="511.5" ></text>
</g>
<g >
<title>filemap_get_pages (150,000,000 samples, 0.02%)</title><rect x="107.6" y="325" width="0.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="110.56" y="335.5" ></text>
</g>
<g >
<title>vfs_read (820,000,000 samples, 0.12%)</title><rect x="1014.4" y="373" width="1.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1017.37" y="383.5" ></text>
</g>
<g >
<title>xa_load (130,000,000 samples, 0.02%)</title><rect x="117.7" y="405" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="120.71" y="415.5" ></text>
</g>
<g >
<title>Glass::compare&lt;Glass::LeafItem, Glass::LeafItem&gt; (80,000,000 samples, 0.01%)</title><rect x="101.2" y="469" width="0.1" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="104.17" y="479.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::LongHistogram&lt;unsigned long&gt;::Record (760,000,000 samples, 0.11%)</title><rect x="1155.5" y="597" width="1.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1158.52" y="607.5" ></text>
</g>
<g >
<title>page_cache_async_ra (170,000,000 samples, 0.03%)</title><rect x="934.3" y="277" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="937.33" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (60,000,000 samples, 0.01%)</title><rect x="1154.2" y="421" width="0.1" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="1157.21" y="431.5" ></text>
</g>
<g >
<title>apache::thrift::detail::deserializeRequestBody&lt;apache::thrift::CompactProtocolReader, apache::thrift::ThriftPresult&lt;false, apache::thrift::FieldData&lt; (800,000,000 samples, 0.12%)</title><rect x="28.9" y="613" width="1.4" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="31.90" y="623.5" ></text>
</g>
<g >
<title>LocalSubMatch::prepare_match (3,650,000,000 samples, 0.54%)</title><rect x="118.1" y="549" width="6.4" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="121.06" y="559.5" ></text>
</g>
<g >
<title>ai_index (410,000,000 samples, 0.06%)</title><rect x="1188.0" y="693" width="0.7" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1191.01" y="703.5" ></text>
</g>
<g >
<title>__fget_light (70,000,000 samples, 0.01%)</title><rect x="47.3" y="389" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="50.30" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (60,000,000 samples, 0.01%)</title><rect x="1049.7" y="517" width="0.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1052.73" y="527.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::common::OrderedAttributeMap::OrderedAttributeMap (260,000,000 samples, 0.04%)</title><rect x="1154.1" y="469" width="0.4" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1157.07" y="479.5" ></text>
</g>
<g >
<title>folly::EventBaseAtomicNotificationQueue&lt;std::variant&lt;apache::thrift::QueueReplyInfo, apache::thrift::StreamReplyInfo, apache::thrift::SinkConsumerReplyInfo&gt;, apache::thrift::ReplyInfoConsumer&gt;::~EventBaseAtomicNotificationQueue (340,000,000 samples, 0.05%)</title><rect x="1162.8" y="661" width="0.6" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="1165.84" y="671.5" ></text>
</g>
<g >
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual (260,000,000 samples, 0.04%)</title><rect x="1149.3" y="485" width="0.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1152.34" y="495.5" ></text>
</g>
<g >
<title>opentelemetry::v1::nostd::function_ref&lt;bool  (390,000,000 samples, 0.06%)</title><rect x="1153.4" y="517" width="0.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1156.37" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_r&lt;std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt;, opentelemetry::v1::sdk::metrics::SyncMetricStorage::SyncMetricStorage (110,000,000 samples, 0.02%)</title><rect x="1154.7" y="501" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1157.65" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (80,000,000 samples, 0.01%)</title><rect x="1152.9" y="517" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1155.86" y="527.5" ></text>
</g>
<g >
<title>GlassCursor::find_entry (70,000,000 samples, 0.01%)</title><rect x="305.9" y="501" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="308.93" y="511.5" ></text>
</g>
<g >
<title>vfs_read (60,000,000 samples, 0.01%)</title><rect x="1152.9" y="453" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1155.89" y="463.5" ></text>
</g>
<g >
<title>GlassTable::next_for_sequential (160,000,000 samples, 0.02%)</title><rect x="241.9" y="469" width="0.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="244.90" y="479.5" ></text>
</g>
<g >
<title>fsnotify_perm.part.0 (150,000,000 samples, 0.02%)</title><rect x="97.2" y="341" width="0.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="100.17" y="351.5" ></text>
</g>
<g >
<title>rocksdb::BlockBasedTable::NewDataBlockIterator&lt;rocksdb::DataBlockIter&gt; (1,040,000,000 samples, 0.16%)</title><rect x="153.5" y="261" width="1.9" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="156.53" y="271.5" ></text>
</g>
<g >
<title>find_in_branch_&lt;Glass::LeafItem&gt; (80,000,000 samples, 0.01%)</title><rect x="148.0" y="325" width="0.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="150.96" y="335.5" ></text>
</g>
<g >
<title>__x64_sys_read (70,000,000 samples, 0.01%)</title><rect x="1152.9" y="485" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1155.88" y="495.5" ></text>
</g>
<g >
<title>page_cache_ra_unbounded (2,190,000,000 samples, 0.33%)</title><rect x="905.8" y="245" width="3.9" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="908.85" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::_M_copy (60,000,000 samples, 0.01%)</title><rect x="1156.5" y="469" width="0.1" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="1159.52" y="479.5" ></text>
</g>
<g >
<title>GlassTable::block_to_cursor (33,510,000,000 samples, 5.00%)</title><rect x="41.7" y="485" width="59.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="44.70" y="495.5" >GlassT..</text>
</g>
<g >
<title>opentelemetry::v1::nostd::function_ref&lt;bool  (370,000,000 samples, 0.06%)</title><rect x="1188.9" y="341" width="0.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1191.94" y="351.5" ></text>
</g>
<g >
<title>Xapian::Internal::intrusive_ptr&lt;Xapian::MSet::Internal&gt;::~intrusive_ptr (60,000,000 samples, 0.01%)</title><rect x="1145.8" y="597" width="0.1" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1148.81" y="607.5" ></text>
</g>
<g >
<title>vfs_read (60,000,000 samples, 0.01%)</title><rect x="1072.7" y="373" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1075.71" y="383.5" ></text>
</g>
<g >
<title>prometheus::detail::CollectMetrics (520,000,000 samples, 0.08%)</title><rect x="1188.9" y="549" width="1.0" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1191.94" y="559.5" ></text>
</g>
<g >
<title>Glass::compare&lt;Glass::LeafItem, Glass::LeafItem&gt; (720,000,000 samples, 0.11%)</title><rect x="836.9" y="437" width="1.3" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="839.92" y="447.5" ></text>
</g>
<g >
<title>GlassPostList::next (160,000,000 samples, 0.02%)</title><rect x="1070.6" y="533" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1073.63" y="543.5" ></text>
</g>
<g >
<title>vfs_open (170,000,000 samples, 0.03%)</title><rect x="20.4" y="533" width="0.3" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="23.37" y="543.5" ></text>
</g>
<g >
<title>__fget_files (440,000,000 samples, 0.07%)</title><rect x="790.6" y="325" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="793.60" y="335.5" ></text>
</g>
<g >
<title>generic_file_read_iter (1,290,000,000 samples, 0.19%)</title><rect x="855.7" y="325" width="2.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="858.66" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__to_xstring&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char&gt; (140,000,000 samples, 0.02%)</title><rect x="149.5" y="389" width="0.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="152.53" y="399.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;Xapian::Internal::MSetItem*, std::vector&lt;Xapian::Internal::MSetItem, std::allocator&lt;Xapian::Internal::MSetItem&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (270,000,000 samples, 0.04%)</title><rect x="1100.0" y="549" width="0.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1102.96" y="559.5" ></text>
</g>
<g >
<title>blk_finish_plug (70,000,000 samples, 0.01%)</title><rect x="830.1" y="197" width="0.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="833.14" y="207.5" ></text>
</g>
<g >
<title>GlassCursor::find_entry (80,000,000 samples, 0.01%)</title><rect x="236.8" y="501" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="239.83" y="511.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::trace::Span::End (330,000,000 samples, 0.05%)</title><rect x="1160.5" y="501" width="0.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1163.50" y="511.5" ></text>
</g>
<g >
<title>GlassTable::find (120,000,000 samples, 0.02%)</title><rect x="241.6" y="469" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="244.62" y="479.5" ></text>
</g>
<g >
<title>kl::meta::MetaManager::read_total_docs (610,000,000 samples, 0.09%)</title><rect x="1148.9" y="597" width="1.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1151.88" y="607.5" ></text>
</g>
<g >
<title>google::protobuf::internal::ArenaStringPtr::Set&lt;&gt; (220,000,000 samples, 0.03%)</title><rect x="1158.7" y="549" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1161.71" y="559.5" ></text>
</g>
<g >
<title>folly::fibers::(anonymous namespace)::runNoInline&lt;apache::thrift::preprocessSendT&lt;apache::thrift::CompactProtocolWriter&gt; (270,000,000 samples, 0.04%)</title><rect x="27.9" y="501" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="30.93" y="511.5" ></text>
</g>
<g >
<title>copy_process (70,000,000 samples, 0.01%)</title><rect x="1188.5" y="581" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1191.54" y="591.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (29,510,000,000 samples, 4.40%)</title><rect x="864.4" y="421" width="52.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="867.45" y="431.5" >entry..</text>
</g>
<g >
<title>blk_mq_sched_insert_requests (130,000,000 samples, 0.02%)</title><rect x="908.8" y="165" width="0.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="911.75" y="175.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (60,000,000 samples, 0.01%)</title><rect x="1165.4" y="645" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1168.38" y="655.5" ></text>
</g>
<g >
<title>GlassTable::next_for_sequential (1,030,000,000 samples, 0.15%)</title><rect x="933.0" y="469" width="1.8" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="936.00" y="479.5" ></text>
</g>
<g >
<title>check_tname_in_key_lite (4,110,000,000 samples, 0.61%)</title><rect x="920.2" y="485" width="7.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="923.22" y="495.5" ></text>
</g>
<g >
<title>folly::detail::function::FunctionTraits&lt;void  (280,000,000 samples, 0.04%)</title><rect x="1161.9" y="613" width="0.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1164.91" y="623.5" ></text>
</g>
<g >
<title>__alloc_pages (100,000,000 samples, 0.01%)</title><rect x="909.7" y="197" width="0.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="912.74" y="207.5" ></text>
</g>
<g >
<title>blk_flush_plug_list (90,000,000 samples, 0.01%)</title><rect x="122.7" y="197" width="0.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="125.71" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (90,000,000 samples, 0.01%)</title><rect x="1188.7" y="565" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1191.73" y="575.5" ></text>
</g>
<g >
<title>GlassTable::read_block (880,000,000 samples, 0.13%)</title><rect x="1016.7" y="453" width="1.5" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1019.67" y="463.5" ></text>
</g>
<g >
<title>Xapian::Internal::QueryBranch::gather_terms (160,000,000 samples, 0.02%)</title><rect x="117.1" y="517" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="120.14" y="527.5" ></text>
</g>
<g >
<title>[libjemalloc.so.2] (90,000,000 samples, 0.01%)</title><rect x="1147.9" y="597" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1150.87" y="607.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (90,000,000 samples, 0.01%)</title><rect x="143.2" y="149" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="146.16" y="159.5" ></text>
</g>
<g >
<title>filemap_read (2,360,000,000 samples, 0.35%)</title><rect x="109.0" y="341" width="4.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="111.99" y="351.5" ></text>
</g>
<g >
<title>do_user_addr_fault (80,000,000 samples, 0.01%)</title><rect x="146.8" y="101" width="0.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="149.77" y="111.5" ></text>
</g>
<g >
<title>ondemand_readahead (210,000,000 samples, 0.03%)</title><rect x="1017.6" y="261" width="0.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1020.57" y="271.5" ></text>
</g>
<g >
<title>blk_mq_try_issue_list_directly (60,000,000 samples, 0.01%)</title><rect x="910.3" y="149" width="0.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="913.25" y="159.5" ></text>
</g>
<g >
<title>rocksdb::TableCache::Get (3,460,000,000 samples, 0.52%)</title><rect x="152.7" y="293" width="6.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="155.67" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::lower_bound (70,000,000 samples, 0.01%)</title><rect x="1154.3" y="405" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1157.34" y="415.5" ></text>
</g>
<g >
<title>OrPostList::next (1,630,000,000 samples, 0.24%)</title><rect x="1071.0" y="533" width="2.9" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1074.02" y="543.5" ></text>
</g>
<g >
<title>new_sync_read (140,000,000 samples, 0.02%)</title><rect x="143.1" y="213" width="0.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="146.12" y="223.5" ></text>
</g>
<g >
<title>Xapian::Enquire::get_mset (584,770,000,000 samples, 87.27%)</title><rect x="115.7" y="597" width="1029.9" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="118.74" y="607.5" >Xapian::Enquire::get_mset</text>
</g>
<g >
<title>Xapian::Document::Internal::~Internal (60,000,000 samples, 0.01%)</title><rect x="33.5" y="581" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="36.53" y="591.5" ></text>
</g>
<g >
<title>virtio_queue_rq (70,000,000 samples, 0.01%)</title><rect x="122.7" y="117" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="125.74" y="127.5" ></text>
</g>
<g >
<title>ksys_fadvise64_64 (170,000,000 samples, 0.03%)</title><rect x="117.6" y="469" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="120.64" y="479.5" ></text>
</g>
<g >
<title>Xapian::Query::Internal::postlist_sub_and_like (9,770,000,000 samples, 1.46%)</title><rect x="142.4" y="501" width="17.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="145.42" y="511.5" ></text>
</g>
<g >
<title>filemap_get_read_batch (350,000,000 samples, 0.05%)</title><rect x="112.3" y="309" width="0.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="115.34" y="319.5" ></text>
</g>
<g >
<title>get_page_from_freelist (690,000,000 samples, 0.10%)</title><rect x="906.0" y="181" width="1.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="909.01" y="191.5" ></text>
</g>
<g >
<title>copy_page_to_iter (1,050,000,000 samples, 0.16%)</title><rect x="51.9" y="309" width="1.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="54.88" y="319.5" ></text>
</g>
<g >
<title>folly::EventBaseAtomicNotificationQueue&lt;folly::Function&lt;void  (140,000,000 samples, 0.02%)</title><rect x="1162.6" y="661" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1165.60" y="671.5" ></text>
</g>
<g >
<title>vfs_read (70,000,000 samples, 0.01%)</title><rect x="237.0" y="389" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="240.02" y="399.5" ></text>
</g>
<g >
<title>MultiAndPostList::~MultiAndPostList (250,000,000 samples, 0.04%)</title><rect x="1074.0" y="549" width="0.4" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1077.00" y="559.5" ></text>
</g>
<g >
<title>CPUThreadPool11 (650,000,000 samples, 0.10%)</title><rect x="10.0" y="693" width="1.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>page_cache_ra_unbounded (730,000,000 samples, 0.11%)</title><rect x="829.5" y="229" width="1.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="832.49" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (540,000,000 samples, 0.08%)</title><rect x="1185.6" y="677" width="1.0" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1188.61" y="687.5" ></text>
</g>
<g >
<title>ksys_read (70,000,000 samples, 0.01%)</title><rect x="1152.9" y="469" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1155.88" y="479.5" ></text>
</g>
<g >
<title>__x64_sys_fadvise64 (170,000,000 samples, 0.03%)</title><rect x="117.6" y="485" width="0.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="120.64" y="495.5" ></text>
</g>
<g >
<title>opentelemetry::v1::nostd::function_ref&lt;bool  (360,000,000 samples, 0.05%)</title><rect x="1189.0" y="325" width="0.6" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1191.96" y="335.5" ></text>
</g>
<g >
<title>eventfd_write (120,000,000 samples, 0.02%)</title><rect x="1162.6" y="533" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1165.63" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (60,000,000 samples, 0.01%)</title><rect x="40.8" y="501" width="0.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="43.77" y="511.5" ></text>
</g>
<g >
<title>new_sync_read (27,200,000,000 samples, 4.06%)</title><rect x="48.5" y="373" width="47.9" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="51.46" y="383.5" >new_..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::_M_copy (120,000,000 samples, 0.02%)</title><rect x="1154.9" y="469" width="0.2" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="1157.88" y="479.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (28,220,000,000 samples, 4.21%)</title><rect x="864.6" y="389" width="49.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="867.62" y="399.5" >__x64..</text>
</g>
<g >
<title>GlassCursor::find_entry (2,520,000,000 samples, 0.38%)</title><rect x="143.7" y="357" width="4.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="146.70" y="367.5" ></text>
</g>
<g >
<title>aisearch::SUDocItem::write&lt;apache::thrift::CompactProtocolWriter&gt; (230,000,000 samples, 0.03%)</title><rect x="31.7" y="549" width="0.5" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="34.75" y="559.5" ></text>
</g>
<g >
<title>add_to_page_cache_lru (850,000,000 samples, 0.13%)</title><rect x="907.2" y="229" width="1.5" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="910.24" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (60,000,000 samples, 0.01%)</title><rect x="1155.9" y="469" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1158.91" y="479.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (940,000,000 samples, 0.14%)</title><rect x="1014.3" y="421" width="1.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1017.26" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, opentelemetry::v1::sdk::metrics::SumPointData, opentelemetry::v1::sdk::metrics::HistogramPointData, opentelemetry::v1::sdk::metrics::LastValuePointData, opentelemetry::v1::sdk::metrics::DropPointData&gt;::_Variant_storage&lt;1ul, opentelemetry::v1::sdk::metrics::HistogramPointData const&amp;&gt; (60,000,000 samples, 0.01%)</title><rect x="1189.4" y="165" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1192.37" y="175.5" ></text>
</g>
<g >
<title>[unknown] (60,000,000 samples, 0.01%)</title><rect x="12.8" y="661" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="15.80" y="671.5" ></text>
</g>
<g >
<title>__x64_sys_clone (80,000,000 samples, 0.01%)</title><rect x="1188.5" y="629" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1191.54" y="639.5" ></text>
</g>
<g >
<title>rocksdb::BlockIter&lt;rocksdb::Slice&gt;::FindKeyAfterBinarySeek (370,000,000 samples, 0.06%)</title><rect x="156.0" y="245" width="0.7" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="159.01" y="255.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (26,200,000,000 samples, 3.91%)</title><rect x="867.0" y="341" width="46.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="870.03" y="351.5" >ext4..</text>
</g>
<g >
<title>OrPostList::check (60,000,000 samples, 0.01%)</title><rect x="943.1" y="501" width="0.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="946.13" y="511.5" ></text>
</g>
<g >
<title>std::__do_visit&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;, opentelemetry::v1::sdk::common::GetHashForAttributeValueVisitor, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;&amp;&gt; (130,000,000 samples, 0.02%)</title><rect x="1153.7" y="437" width="0.2" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="1156.67" y="447.5" ></text>
</g>
<g >
<title>generic_file_read_iter (70,000,000 samples, 0.01%)</title><rect x="237.0" y="341" width="0.1" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="240.02" y="351.5" ></text>
</g>
<g >
<title>__fget_files (440,000,000 samples, 0.07%)</title><rect x="864.9" y="341" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="867.92" y="351.5" ></text>
</g>
<g >
<title>__libc_pread (380,000,000 samples, 0.06%)</title><rect x="941.1" y="405" width="0.7" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="944.11" y="415.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::MeterContext::ForEachMeter (520,000,000 samples, 0.08%)</title><rect x="1188.9" y="485" width="1.0" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1191.94" y="495.5" ></text>
</g>
<g >
<title>LocalSubMatch::get_postlist (10,380,000,000 samples, 1.55%)</title><rect x="142.2" y="549" width="18.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="145.17" y="559.5" ></text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (380,000,000 samples, 0.06%)</title><rect x="834.5" y="357" width="0.7" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="837.51" y="367.5" ></text>
</g>
<g >
<title>GlassPostList::next_in_chunk (210,000,000 samples, 0.03%)</title><rect x="1088.3" y="517" width="0.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1091.26" y="527.5" ></text>
</g>
<g >
<title>__libc_pread (850,000,000 samples, 0.13%)</title><rect x="1016.7" y="437" width="1.5" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1019.71" y="447.5" ></text>
</g>
<g >
<title>sky_work::common::SuAbtestSession::~SuAbtestSession (550,000,000 samples, 0.08%)</title><rect x="1159.4" y="581" width="0.9" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1162.37" y="591.5" ></text>
</g>
<g >
<title>io_read_block (60,000,000 samples, 0.01%)</title><rect x="916.6" y="453" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="919.56" y="463.5" ></text>
</g>
<g >
<title>ondemand_readahead (540,000,000 samples, 0.08%)</title><rect x="909.7" y="261" width="1.0" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="912.72" y="271.5" ></text>
</g>
<g >
<title>GlassPostList::at_end (5,060,000,000 samples, 0.76%)</title><rect x="208.9" y="533" width="8.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="211.91" y="543.5" ></text>
</g>
<g >
<title>blk_finish_plug (90,000,000 samples, 0.01%)</title><rect x="122.7" y="213" width="0.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="125.71" y="223.5" ></text>
</g>
<g >
<title>__libc_pread (990,000,000 samples, 0.15%)</title><rect x="1014.2" y="437" width="1.7" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1017.17" y="447.5" ></text>
</g>
<g >
<title>blk_mq_sched_insert_requests (80,000,000 samples, 0.01%)</title><rect x="122.7" y="165" width="0.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="125.73" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (110,000,000 samples, 0.02%)</title><rect x="17.3" y="629" width="0.2" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="20.34" y="639.5" ></text>
</g>
<g >
<title>__memmove_evex_unaligned_erms (70,000,000 samples, 0.01%)</title><rect x="40.6" y="501" width="0.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="43.64" y="511.5" ></text>
</g>
<g >
<title>Xapian::Query::get_unique_terms_begin (280,000,000 samples, 0.04%)</title><rect x="117.1" y="533" width="0.5" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="120.11" y="543.5" ></text>
</g>
<g >
<title>opentelemetry::v1::exporter::otlp::OtlpHttpExporter::MakeRecordable (70,000,000 samples, 0.01%)</title><rect x="1150.7" y="517" width="0.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1153.66" y="527.5" ></text>
</g>
<g >
<title>apache::thrift::preprocessSendT&lt;apache::thrift::CompactProtocolWriter&gt; (260,000,000 samples, 0.04%)</title><rect x="27.9" y="485" width="0.5" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="30.93" y="495.5" ></text>
</g>
<g >
<title>task_work_run (60,000,000 samples, 0.01%)</title><rect x="1153.1" y="453" width="0.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1156.05" y="463.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (440,000,000 samples, 0.07%)</title><rect x="21.7" y="565" width="0.8" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="24.75" y="575.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::LongHistogramAggregation::Merge (210,000,000 samples, 0.03%)</title><rect x="1189.2" y="277" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1192.15" y="287.5" ></text>
</g>
<g >
<title>google::protobuf::internal::UntypedMapBase::ClearTable (60,000,000 samples, 0.01%)</title><rect x="1156.9" y="565" width="0.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1159.87" y="575.5" ></text>
</g>
<g >
<title>do_syscall_64 (70,000,000 samples, 0.01%)</title><rect x="1152.9" y="501" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1155.88" y="511.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (760,000,000 samples, 0.11%)</title><rect x="1016.7" y="389" width="1.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1019.74" y="399.5" ></text>
</g>
<g >
<title>sky_work::common::AbtestList::MergeImpl (230,000,000 samples, 0.03%)</title><rect x="1157.4" y="533" width="0.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1160.37" y="543.5" ></text>
</g>
<g >
<title>OrPostList::get_weight (2,010,000,000 samples, 0.30%)</title><rect x="1046.3" y="533" width="3.5" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="1049.30" y="543.5" ></text>
</g>
<g >
<title>__libc_pread (60,000,000 samples, 0.01%)</title><rect x="1072.7" y="437" width="0.1" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1075.71" y="447.5" ></text>
</g>
<g >
<title>lru_note_cost_page (60,000,000 samples, 0.01%)</title><rect x="908.5" y="197" width="0.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="911.53" y="207.5" ></text>
</g>
<g >
<title>GlassPostList::move_forward_in_chunk_to_at_least (2,970,000,000 samples, 0.44%)</title><rect x="935.7" y="485" width="5.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="938.72" y="495.5" ></text>
</g>
<g >
<title>rocksdb::GetVarint64Ptr (60,000,000 samples, 0.01%)</title><rect x="158.3" y="213" width="0.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="161.28" y="223.5" ></text>
</g>
<g >
<title>Xapian::Document::get_value[abi:cxx11] (46,510,000,000 samples, 6.94%)</title><rect x="33.7" y="597" width="81.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="36.65" y="607.5" >Xapian::D..</text>
</g>
<g >
<title>folly::SharedMutexImpl&lt;false, void, std::atomic, folly::SharedMutexPolicyDefault&gt;::lockSharedImpl&lt;folly::SharedMutexImpl&lt;false, void, std::atomic, folly::SharedMutexPolicyDefault&gt;::WaitForever&gt; (60,000,000 samples, 0.01%)</title><rect x="1163.9" y="661" width="0.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1166.87" y="671.5" ></text>
</g>
<g >
<title>Xapian::PostingIterator::Internal::check (1,680,000,000 samples, 0.25%)</title><rect x="1019.1" y="533" width="2.9" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1022.05" y="543.5" ></text>
</g>
<g >
<title>submit_bio_noacct (70,000,000 samples, 0.01%)</title><rect x="829.2" y="149" width="0.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="832.21" y="159.5" ></text>
</g>
<g >
<title>[unknown] (60,000,000 samples, 0.01%)</title><rect x="1165.5" y="645" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1168.54" y="655.5" ></text>
</g>
<g >
<title>OrPostList::check (1,160,000,000 samples, 0.17%)</title><rect x="1077.6" y="549" width="2.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1080.62" y="559.5" ></text>
</g>
<g >
<title>__lock_text_start (60,000,000 samples, 0.01%)</title><rect x="1145.4" y="485" width="0.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1148.44" y="495.5" ></text>
</g>
<g >
<title>mark_page_accessed (430,000,000 samples, 0.06%)</title><rect x="94.6" y="309" width="0.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="97.57" y="319.5" ></text>
</g>
<g >
<title>get_page_from_freelist (100,000,000 samples, 0.01%)</title><rect x="829.5" y="165" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="832.52" y="175.5" ></text>
</g>
<g >
<title>blk_finish_plug (60,000,000 samples, 0.01%)</title><rect x="910.3" y="213" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="913.25" y="223.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;, opentelemetry::v1::sdk::common::AttributeConverter&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (90,000,000 samples, 0.01%)</title><rect x="1153.5" y="389" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1156.49" y="399.5" ></text>
</g>
<g >
<title>clear_page_erms (450,000,000 samples, 0.07%)</title><rect x="906.1" y="165" width="0.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="909.06" y="175.5" ></text>
</g>
<g >
<title>__tls_get_addr (60,000,000 samples, 0.01%)</title><rect x="151.2" y="245" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="154.19" y="255.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::AttributesHashMap::GetOrSetDefault (110,000,000 samples, 0.02%)</title><rect x="10.5" y="517" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="13.55" y="527.5" ></text>
</g>
<g >
<title>__page_cache_alloc (110,000,000 samples, 0.02%)</title><rect x="829.5" y="213" width="0.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="832.51" y="223.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::trace::BatchSpanProcessor::OnEnd (60,000,000 samples, 0.01%)</title><rect x="1160.8" y="469" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1163.78" y="479.5" ></text>
</g>
<g >
<title>clear_page_erms (80,000,000 samples, 0.01%)</title><rect x="829.5" y="149" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="832.52" y="159.5" ></text>
</g>
<g >
<title>security_file_permission (70,000,000 samples, 0.01%)</title><rect x="857.9" y="341" width="0.2" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="860.95" y="351.5" ></text>
</g>
<g >
<title>msetcmp_by_relevance&lt;true&gt; (540,000,000 samples, 0.08%)</title><rect x="1127.3" y="517" width="0.9" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1130.27" y="527.5" ></text>
</g>
<g >
<title>asm_sysvec_reschedule_ipi (490,000,000 samples, 0.07%)</title><rect x="777.5" y="485" width="0.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="780.52" y="495.5" ></text>
</g>
<g >
<title>do_syscall_64 (610,000,000 samples, 0.09%)</title><rect x="1012.9" y="405" width="1.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1015.89" y="415.5" ></text>
</g>
<g >
<title>page_cache_ra_unbounded (540,000,000 samples, 0.08%)</title><rect x="909.7" y="245" width="1.0" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="912.72" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, std::pair&lt;opentelemetry::v1::sdk::common::OrderedAttributeMap, std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, std::pair&lt;opentelemetry::v1::sdk::common::OrderedAttributeMap, std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (130,000,000 samples, 0.02%)</title><rect x="1189.6" y="229" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1192.63" y="239.5" ></text>
</g>
<g >
<title>opentelemetry::proto::collector::trace::v1::ExportTraceServiceRequest::~ExportTraceServiceRequest (70,000,000 samples, 0.01%)</title><rect x="1188.0" y="533" width="0.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1191.03" y="543.5" ></text>
</g>
<g >
<title>GlassVersion::read (110,000,000 samples, 0.02%)</title><rect x="1152.8" y="549" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1155.81" y="559.5" ></text>
</g>
<g >
<title>rocksdb::IndexValue::DecodeFrom (70,000,000 samples, 0.01%)</title><rect x="158.3" y="229" width="0.1" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="161.27" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_write (140,000,000 samples, 0.02%)</title><rect x="1162.6" y="629" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1165.60" y="639.5" ></text>
</g>
<g >
<title>GlassTable::read_block (2,890,000,000 samples, 0.43%)</title><rect x="108.5" y="485" width="5.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="111.53" y="495.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (60,000,000 samples, 0.01%)</title><rect x="1145.3" y="549" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1148.30" y="559.5" ></text>
</g>
<g >
<title>Xapian::Internal::QueryAndLike::postlist_sub_and_like (9,810,000,000 samples, 1.46%)</title><rect x="142.3" y="517" width="17.3" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="145.35" y="527.5" ></text>
</g>
<g >
<title>page_cache_sync_ra (480,000,000 samples, 0.07%)</title><rect x="122.2" y="277" width="0.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="125.18" y="287.5" ></text>
</g>
<g >
<title>copy_page_to_iter (60,000,000 samples, 0.01%)</title><rect x="118.9" y="293" width="0.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="121.87" y="303.5" ></text>
</g>
<g >
<title>GlassPostList::get_wdf (170,000,000 samples, 0.03%)</title><rect x="1024.7" y="533" width="0.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1027.67" y="543.5" ></text>
</g>
<g >
<title>Xapian::Enquire::Internal::get_mset (584,750,000,000 samples, 87.27%)</title><rect x="115.8" y="581" width="1029.8" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="118.77" y="591.5" >Xapian::Enquire::Internal::get_mset</text>
</g>
<g >
<title>copy_user_enhanced_fast_string (1,120,000,000 samples, 0.17%)</title><rect x="119.0" y="293" width="1.9" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="121.98" y="303.5" ></text>
</g>
<g >
<title>GlassCursor::read_tag (70,000,000 samples, 0.01%)</title><rect x="1072.7" y="485" width="0.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1075.71" y="495.5" ></text>
</g>
<g >
<title>kl::meta::Schema::get_fields[abi:cxx11] (70,000,000 samples, 0.01%)</title><rect x="1152.1" y="565" width="0.1" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1155.10" y="575.5" ></text>
</g>
<g >
<title>__x64_sys_timer_delete (60,000,000 samples, 0.01%)</title><rect x="1145.3" y="517" width="0.1" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1148.30" y="527.5" ></text>
</g>
<g >
<title>new_sync_read (23,070,000,000 samples, 3.44%)</title><rect x="792.0" y="341" width="40.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="795.01" y="351.5" >new..</text>
</g>
<g >
<title>opentelemetry::v1::nostd::function_ref&lt;bool  (70,000,000 samples, 0.01%)</title><rect x="1155.8" y="485" width="0.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1158.76" y="495.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::trace::MultiRecordable::SetDuration (100,000,000 samples, 0.01%)</title><rect x="1160.6" y="485" width="0.1" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="1163.57" y="495.5" ></text>
</g>
<g >
<title>find_in_branch_&lt;Glass::LeafItem&gt; (150,000,000 samples, 0.02%)</title><rect x="123.5" y="469" width="0.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="126.50" y="479.5" ></text>
</g>
<g >
<title>GlassTable::next_for_sequential (880,000,000 samples, 0.13%)</title><rect x="1016.7" y="469" width="1.5" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1019.67" y="479.5" ></text>
</g>
<g >
<title>workingset_activation (230,000,000 samples, 0.03%)</title><rect x="912.0" y="277" width="0.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="914.98" y="287.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,110,000,000 samples, 0.17%)</title><rect x="1159.3" y="597" width="1.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1162.25" y="607.5" ></text>
</g>
<g >
<title>rocksdb::(anonymous namespace)::SkipListRep::Get (840,000,000 samples, 0.13%)</title><rect x="150.5" y="277" width="1.5" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="153.48" y="287.5" ></text>
</g>
<g >
<title>ThriftSrv-pri3- (667,320,000,000 samples, 99.59%)</title><rect x="12.8" y="693" width="1175.2" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="15.80" y="703.5" >ThriftSrv-pri3-</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (130,000,000 samples, 0.02%)</title><rect x="1189.6" y="325" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1192.63" y="335.5" ></text>
</g>
<g >
<title>GlassTable::read_block (1,000,000,000 samples, 0.15%)</title><rect x="1014.2" y="453" width="1.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1017.16" y="463.5" ></text>
</g>
<g >
<title>opentelemetry::v1::exporter::otlp::OtlpRecordable::OtlpRecordable (70,000,000 samples, 0.01%)</title><rect x="1150.7" y="501" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1153.66" y="511.5" ></text>
</g>
<g >
<title>timer_delete@@GLIBC_2.34 (80,000,000 samples, 0.01%)</title><rect x="1145.3" y="565" width="0.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1148.27" y="575.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (80,000,000 samples, 0.01%)</title><rect x="242.0" y="293" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="244.99" y="303.5" ></text>
</g>
<g >
<title>GlassTable::prev_for_sequential (1,120,000,000 samples, 0.17%)</title><rect x="106.0" y="501" width="2.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="109.05" y="511.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (240,000,000 samples, 0.04%)</title><rect x="1188.0" y="677" width="0.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1191.01" y="687.5" ></text>
</g>
<g >
<title>LocalSubMatch::open_post_list (90,000,000 samples, 0.01%)</title><rect x="142.6" y="373" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="145.61" y="383.5" ></text>
</g>
<g >
<title>malloc (1,180,000,000 samples, 0.18%)</title><rect x="1179.7" y="677" width="2.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1182.73" y="687.5" ></text>
</g>
<g >
<title>timer_create@@GLIBC_2.34 (180,000,000 samples, 0.03%)</title><rect x="1187.7" y="677" width="0.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1190.69" y="687.5" ></text>
</g>
<g >
<title>Xapian::Document::~Document (90,000,000 samples, 0.01%)</title><rect x="115.6" y="597" width="0.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="118.56" y="607.5" ></text>
</g>
<g >
<title>apparmor_file_permission (330,000,000 samples, 0.05%)</title><rect x="913.4" y="325" width="0.6" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="916.44" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, std::pair&lt;opentelemetry::v1::sdk::common::OrderedAttributeMap, std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (130,000,000 samples, 0.02%)</title><rect x="1189.6" y="213" width="0.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1192.63" y="223.5" ></text>
</g>
<g >
<title>LocalSubMatch::open_post_list (9,400,000,000 samples, 1.40%)</title><rect x="142.8" y="421" width="16.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="145.84" y="431.5" ></text>
</g>
<g >
<title>filemap_get_pages (230,000,000 samples, 0.03%)</title><rect x="146.9" y="149" width="0.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="149.91" y="159.5" ></text>
</g>
<g >
<title>sky_work::common::AbtestSessionUtil::AbtestInfoConvertToProto (230,000,000 samples, 0.03%)</title><rect x="1158.7" y="565" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1161.69" y="575.5" ></text>
</g>
<g >
<title>GlassTable::next_for_sequential (70,000,000 samples, 0.01%)</title><rect x="1088.1" y="485" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1091.14" y="495.5" ></text>
</g>
<g >
<title>Xapian::MiniRankWeight::~MiniRankWeight (60,000,000 samples, 0.01%)</title><rect x="1074.3" y="453" width="0.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1077.26" y="463.5" ></text>
</g>
<g >
<title>__GI___pthread_disable_asynccancel (90,000,000 samples, 0.01%)</title><rect x="862.3" y="437" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="865.31" y="447.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (740,000,000 samples, 0.11%)</title><rect x="1016.8" y="341" width="1.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1019.78" y="351.5" ></text>
</g>
<g >
<title>GlassPostList::get_doclength (70,000,000 samples, 0.01%)</title><rect x="136.5" y="549" width="0.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="139.50" y="559.5" ></text>
</g>
<g >
<title>opentelemetry::v1::exporter::otlp::OtlpHttpClient::Export (90,000,000 samples, 0.01%)</title><rect x="1188.2" y="533" width="0.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1191.15" y="543.5" ></text>
</g>
<g >
<title>GlassPostList::~GlassPostList (100,000,000 samples, 0.01%)</title><rect x="1018.9" y="501" width="0.1" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1021.86" y="511.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::common::OrderedAttributeMap::~OrderedAttributeMap (70,000,000 samples, 0.01%)</title><rect x="1155.9" y="533" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1158.89" y="543.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,770,000,000 samples, 0.41%)</title><rect x="108.7" y="453" width="4.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="111.69" y="463.5" ></text>
</g>
<g >
<title>generic_file_read_iter (26,070,000,000 samples, 3.89%)</title><rect x="867.3" y="325" width="45.9" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="870.26" y="335.5" >gene..</text>
</g>
<g >
<title>kl::storage::Storage::get (230,000,000 samples, 0.03%)</title><rect x="159.9" y="405" width="0.4" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="162.85" y="415.5" ></text>
</g>
<g >
<title>Xapian::Internal::QueryBranch::do_or_like (410,000,000 samples, 0.06%)</title><rect x="159.6" y="517" width="0.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="162.62" y="527.5" ></text>
</g>
<g >
<title>sky_work::common::AbtestSessionUtil::AbtestContextConvertToProto (530,000,000 samples, 0.08%)</title><rect x="1158.2" y="597" width="0.9" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1161.18" y="607.5" ></text>
</g>
<g >
<title>[unknown] (580,000,000 samples, 0.09%)</title><rect x="10.0" y="677" width="1.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="687.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::common::OrderedAttributeMap::SetAttribute (260,000,000 samples, 0.04%)</title><rect x="1154.1" y="453" width="0.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1157.07" y="463.5" ></text>
</g>
<g >
<title>std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;Xapian::Internal::MSetItem*, std::vector&lt;Xapian::Internal::MSetItem, std::allocator&lt;Xapian::Internal::MSetItem&gt; &gt; &gt;, long, Xapian::Internal::MSetItem, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (12,240,000,000 samples, 1.83%)</title><rect x="1109.7" y="533" width="21.6" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1112.71" y="543.5" >s..</text>
</g>
<g >
<title>__lock_text_start (90,000,000 samples, 0.01%)</title><rect x="95.1" y="277" width="0.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="98.11" y="287.5" ></text>
</g>
<g >
<title>workingset_refault (90,000,000 samples, 0.01%)</title><rect x="829.9" y="197" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="832.95" y="207.5" ></text>
</g>
<g >
<title>__do_sys_clone (80,000,000 samples, 0.01%)</title><rect x="1188.5" y="613" width="0.2" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="1191.54" y="623.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (350,000,000 samples, 0.05%)</title><rect x="831.1" y="261" width="0.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="834.11" y="271.5" ></text>
</g>
<g >
<title>LeafPostList::get_weight (90,000,000 samples, 0.01%)</title><rect x="1086.9" y="533" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1089.91" y="543.5" ></text>
</g>
<g >
<title>__GI___printf_fp_l (840,000,000 samples, 0.13%)</title><rect x="24.4" y="645" width="1.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="27.37" y="655.5" ></text>
</g>
<g >
<title>folly::LogMessage::sanitizeMessage (100,000,000 samples, 0.01%)</title><rect x="18.0" y="645" width="0.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="21.03" y="655.5" ></text>
</g>
<g >
<title>page_cache_sync_ra (750,000,000 samples, 0.11%)</title><rect x="829.5" y="261" width="1.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="832.45" y="271.5" ></text>
</g>
<g >
<title>opentelemetry::v1::exporter::otlp::OtlpHttpClient::createSession (70,000,000 samples, 0.01%)</title><rect x="1188.2" y="501" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1191.19" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (90,000,000 samples, 0.01%)</title><rect x="1153.0" y="517" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1156.00" y="527.5" ></text>
</g>
<g >
<title>apache::thrift::util::readVarint&lt;int, folly::io::Cursor&gt; (80,000,000 samples, 0.01%)</title><rect x="29.4" y="501" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="32.42" y="511.5" ></text>
</g>
<g >
<title>eventfd_write (230,000,000 samples, 0.03%)</title><rect x="1162.9" y="533" width="0.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1165.86" y="543.5" ></text>
</g>
<g >
<title>Xapian::Internal::QueryOr::postlist (410,000,000 samples, 0.06%)</title><rect x="159.6" y="533" width="0.7" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="162.62" y="543.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (60,000,000 samples, 0.01%)</title><rect x="1072.7" y="341" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1075.71" y="351.5" ></text>
</g>
<g >
<title>Xapian::Database::reopen (270,000,000 samples, 0.04%)</title><rect x="1152.7" y="581" width="0.5" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1155.72" y="591.5" ></text>
</g>
<g >
<title>security_file_permission (60,000,000 samples, 0.01%)</title><rect x="113.2" y="373" width="0.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="116.16" y="383.5" ></text>
</g>
<g >
<title>OrPostList::check (4,410,000,000 samples, 0.66%)</title><rect x="935.5" y="517" width="7.7" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="938.47" y="527.5" ></text>
</g>
<g >
<title>alloc_pages (60,000,000 samples, 0.01%)</title><rect x="1017.6" y="213" width="0.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1020.57" y="223.5" ></text>
</g>
<g >
<title>rw_verify_area (610,000,000 samples, 0.09%)</title><rect x="913.2" y="357" width="1.1" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="916.23" y="367.5" ></text>
</g>
<g >
<title>__fget_light (470,000,000 samples, 0.07%)</title><rect x="46.5" y="373" width="0.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="49.47" y="383.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (790,000,000 samples, 0.12%)</title><rect x="856.1" y="293" width="1.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="859.06" y="303.5" ></text>
</g>
<g >
<title>apache::thrift::HandlerCallback&lt;std::unique_ptr&lt;aisearch::SUSearchResult, std::default_delete&lt;aisearch::SUSearchResult&gt; &gt; &gt;::doResult (250,000,000 samples, 0.04%)</title><rect x="1161.9" y="549" width="0.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1164.95" y="559.5" ></text>
</g>
<g >
<title>do_anonymous_page (80,000,000 samples, 0.01%)</title><rect x="146.8" y="37" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="149.77" y="47.5" ></text>
</g>
<g >
<title>irqentry_exit (490,000,000 samples, 0.07%)</title><rect x="777.5" y="453" width="0.9" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="780.52" y="463.5" ></text>
</g>
<g >
<title>rocksdb::(anonymous namespace)::SkipListRep::Get (60,000,000 samples, 0.01%)</title><rect x="159.9" y="325" width="0.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="162.85" y="335.5" ></text>
</g>
<g >
<title>GlassTable::read_block (1,820,000,000 samples, 0.27%)</title><rect x="855.1" y="453" width="3.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="858.13" y="463.5" ></text>
</g>
<g >
<title>opentelemetry::v1::nostd::function_ref&lt;bool  (80,000,000 samples, 0.01%)</title><rect x="1155.6" y="501" width="0.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1158.57" y="511.5" ></text>
</g>
<g >
<title>[ai_index] (100,000,000 samples, 0.01%)</title><rect x="918.2" y="469" width="0.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="921.18" y="479.5" ></text>
</g>
<g >
<title>std::__invoke&lt;opentelemetry::v1::sdk::common::AttributeConverter&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (100,000,000 samples, 0.01%)</title><rect x="1153.5" y="405" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1156.48" y="415.5" ></text>
</g>
<g >
<title>std::default_delete&lt;opentelemetry::v1::sdk::metrics::AttributesHashMap&gt;::operator (130,000,000 samples, 0.02%)</title><rect x="1189.6" y="293" width="0.3" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1192.63" y="303.5" ></text>
</g>
<g >
<title>ext4_readahead (230,000,000 samples, 0.03%)</title><rect x="830.3" y="197" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="833.26" y="207.5" ></text>
</g>
<g >
<title>bvar::detail::SamplerCollector::sampling_thread (90,000,000 samples, 0.01%)</title><rect x="1188.7" y="661" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1191.73" y="671.5" ></text>
</g>
<g >
<title>vfs_read (2,490,000,000 samples, 0.37%)</title><rect x="108.9" y="405" width="4.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="111.89" y="415.5" ></text>
</g>
<g >
<title>read_pages (440,000,000 samples, 0.07%)</title><rect x="908.7" y="229" width="0.8" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="911.74" y="239.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (1,130,000,000 samples, 0.17%)</title><rect x="144.9" y="149" width="2.0" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="147.92" y="159.5" ></text>
</g>
<g >
<title>__memcmp_evex_movbe (260,000,000 samples, 0.04%)</title><rect x="919.8" y="485" width="0.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="922.76" y="495.5" ></text>
</g>
<g >
<title>OrPostList::next (880,000,000 samples, 0.13%)</title><rect x="1087.2" y="549" width="1.6" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1090.21" y="559.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::pair (60,000,000 samples, 0.01%)</title><rect x="1154.9" y="325" width="0.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1157.88" y="335.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (350,000,000 samples, 0.05%)</title><rect x="941.1" y="309" width="0.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="944.12" y="319.5" ></text>
</g>
<g >
<title>OrPostList::check (397,770,000,000 samples, 59.37%)</title><rect x="242.9" y="533" width="700.5" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="245.89" y="543.5" >OrPostList::check</text>
</g>
<g >
<title>[unknown] (280,000,000 samples, 0.04%)</title><rect x="1161.9" y="645" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1164.91" y="655.5" ></text>
</g>
<g >
<title>filemap_read (1,280,000,000 samples, 0.19%)</title><rect x="855.7" y="309" width="2.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="858.67" y="319.5" ></text>
</g>
<g >
<title>workingset_age_nonresident (140,000,000 samples, 0.02%)</title><rect x="912.1" y="261" width="0.3" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="915.14" y="271.5" ></text>
</g>
<g >
<title>GlassCursor::read_tag (110,000,000 samples, 0.02%)</title><rect x="237.0" y="501" width="0.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="239.97" y="511.5" ></text>
</g>
<g >
<title>GlassPostList::GlassPostList (80,000,000 samples, 0.01%)</title><rect x="159.7" y="437" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="162.66" y="447.5" ></text>
</g>
<g >
<title>GlassPostList::open_nearby_postlist (80,000,000 samples, 0.01%)</title><rect x="159.7" y="453" width="0.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="162.66" y="463.5" ></text>
</g>
<g >
<title>__libc_pread (1,770,000,000 samples, 0.26%)</title><rect x="855.2" y="437" width="3.1" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="858.18" y="447.5" ></text>
</g>
<g >
<title>xas_start (120,000,000 samples, 0.02%)</title><rect x="827.8" y="229" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="830.85" y="239.5" ></text>
</g>
<g >
<title>Xapian::Internal::MSetItem::operator= (860,000,000 samples, 0.13%)</title><rect x="1089.8" y="549" width="1.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1092.79" y="559.5" ></text>
</g>
<g >
<title>__pagevec_lru_add (110,000,000 samples, 0.02%)</title><rect x="908.2" y="197" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="911.21" y="207.5" ></text>
</g>
<g >
<title>__x64_sys_openat (570,000,000 samples, 0.09%)</title><rect x="20.2" y="613" width="1.0" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="23.16" y="623.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::common::OrderedAttributeMap::OrderedAttributeMap (70,000,000 samples, 0.01%)</title><rect x="1155.8" y="469" width="0.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1158.76" y="479.5" ></text>
</g>
<g >
<title>page_cache_async_ra (760,000,000 samples, 0.11%)</title><rect x="828.1" y="261" width="1.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="831.11" y="271.5" ></text>
</g>
<g >
<title>blk_flush_plug_list (130,000,000 samples, 0.02%)</title><rect x="908.8" y="197" width="0.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="911.75" y="207.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::~map (70,000,000 samples, 0.01%)</title><rect x="1155.9" y="517" width="0.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1158.89" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (70,000,000 samples, 0.01%)</title><rect x="1155.9" y="485" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1158.89" y="495.5" ></text>
</g>
<g >
<title>rocksdb::lru_cache::LRUHandleTable::Lookup (200,000,000 samples, 0.03%)</title><rect x="154.6" y="165" width="0.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="157.59" y="175.5" ></text>
</g>
<g >
<title>std::pair&lt;opentelemetry::v1::sdk::common::OrderedAttributeMap, std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt; &gt;::pair&lt;opentelemetry::v1::sdk::common::OrderedAttributeMap&amp;, std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt;, true&gt; (80,000,000 samples, 0.01%)</title><rect x="1156.5" y="533" width="0.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1159.50" y="543.5" ></text>
</g>
<g >
<title>Xapian::Internal::QueryTerm::gather_terms (140,000,000 samples, 0.02%)</title><rect x="117.2" y="485" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="120.16" y="495.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (800,000,000 samples, 0.12%)</title><rect x="1014.4" y="341" width="1.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1017.40" y="351.5" ></text>
</g>
<g >
<title>new_sync_read (2,410,000,000 samples, 0.36%)</title><rect x="108.9" y="389" width="4.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="111.92" y="399.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::common::GetHashForAttributeMap (330,000,000 samples, 0.05%)</title><rect x="1153.4" y="485" width="0.6" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1156.37" y="495.5" ></text>
</g>
<g >
<title>GlassPostList::next_in_chunk (500,000,000 samples, 0.07%)</title><rect x="1072.9" y="501" width="0.8" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1075.85" y="511.5" ></text>
</g>
<g >
<title>rocksdb::GetContext::SaveValue (80,000,000 samples, 0.01%)</title><rect x="156.7" y="261" width="0.2" height="15.0" fill="rgb(245,188,44)" rx="2" ry="2" />
<text  x="159.73" y="271.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (490,000,000 samples, 0.07%)</title><rect x="777.5" y="421" width="0.9" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="780.52" y="431.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (22,820,000,000 samples, 3.41%)</title><rect x="792.5" y="325" width="40.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="795.45" y="335.5" >ext..</text>
</g>
<g >
<title>check_tname_in_key_lite (180,000,000 samples, 0.03%)</title><rect x="1016.0" y="485" width="0.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1019.02" y="495.5" ></text>
</g>
<g >
<title>GlassDatabase::get_doclength (90,000,000 samples, 0.01%)</title><rect x="1086.9" y="517" width="0.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1089.91" y="527.5" ></text>
</g>
<g >
<title>apache::thrift::ThriftPresult&lt;false, apache::thrift::FieldData&lt; (240,000,000 samples, 0.04%)</title><rect x="27.9" y="469" width="0.5" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="30.95" y="479.5" ></text>
</g>
<g >
<title>__libc_pread (430,000,000 samples, 0.06%)</title><rect x="942.1" y="421" width="0.8" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="945.13" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (620,000,000 samples, 0.09%)</title><rect x="1012.9" y="421" width="1.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1015.87" y="431.5" ></text>
</g>
<g >
<title>ksys_write (290,000,000 samples, 0.04%)</title><rect x="1162.8" y="565" width="0.6" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1165.84" y="575.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (390,000,000 samples, 0.06%)</title><rect x="21.7" y="517" width="0.7" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="24.75" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (130,000,000 samples, 0.02%)</title><rect x="918.4" y="469" width="0.2" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="921.35" y="479.5" ></text>
</g>
<g >
<title>__fget_light (150,000,000 samples, 0.02%)</title><rect x="865.7" y="373" width="0.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="868.70" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (140,000,000 samples, 0.02%)</title><rect x="241.9" y="389" width="0.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="244.94" y="399.5" ></text>
</g>
<g >
<title>google::protobuf::internal::UntypedMapBase::ClearTable (60,000,000 samples, 0.01%)</title><rect x="1156.9" y="581" width="0.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1159.87" y="591.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,720,000,000 samples, 0.41%)</title><rect x="118.6" y="421" width="4.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="121.62" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (60,000,000 samples, 0.01%)</title><rect x="1156.5" y="453" width="0.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1159.52" y="463.5" ></text>
</g>
<g >
<title>apparmor_file_permission (60,000,000 samples, 0.01%)</title><rect x="123.1" y="325" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="126.15" y="335.5" ></text>
</g>
<g >
<title>__blk_mq_try_issue_directly (130,000,000 samples, 0.02%)</title><rect x="908.8" y="133" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="911.75" y="143.5" ></text>
</g>
<g >
<title>do_syscall_64 (250,000,000 samples, 0.04%)</title><rect x="148.2" y="277" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="151.16" y="287.5" ></text>
</g>
<g >
<title>new_sync_read (810,000,000 samples, 0.12%)</title><rect x="1014.4" y="357" width="1.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1017.38" y="367.5" ></text>
</g>
<g >
<title>aisearch::SUSearchRequest::readNoXfer&lt;apache::thrift::CompactProtocolReader&gt; (660,000,000 samples, 0.10%)</title><rect x="29.0" y="597" width="1.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="32.02" y="607.5" ></text>
</g>
<g >
<title>blk_mq_submit_bio (60,000,000 samples, 0.01%)</title><rect x="829.2" y="117" width="0.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="832.21" y="127.5" ></text>
</g>
<g >
<title>OrPostList::skip_to (140,000,000 samples, 0.02%)</title><rect x="1018.6" y="517" width="0.2" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1021.59" y="527.5" ></text>
</g>
<g >
<title>vfs_read (140,000,000 samples, 0.02%)</title><rect x="241.9" y="373" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="244.94" y="383.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::trace::MultiSpanProcessor::OnEnd (130,000,000 samples, 0.02%)</title><rect x="1160.7" y="485" width="0.3" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="1163.75" y="495.5" ></text>
</g>
<g >
<title>__memmove_evex_unaligned_erms (5,030,000,000 samples, 0.75%)</title><rect x="1170.0" y="677" width="8.9" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1173.03" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, std::pair&lt;opentelemetry::v1::sdk::common::OrderedAttributeMap, std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt; &gt; &gt;, false&gt; &gt;::destroy&lt;std::pair&lt;unsigned long const, std::pair&lt;opentelemetry::v1::sdk::common::OrderedAttributeMap, std::unique_ptr&lt;opentelemetry::v1::sdk::metrics::Aggregation, std::default_delete&lt;opentelemetry::v1::sdk::metrics::Aggregation&gt; &gt; &gt; &gt; &gt; (100,000,000 samples, 0.01%)</title><rect x="1189.7" y="165" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1192.67" y="175.5" ></text>
</g>
<g >
<title>MultiMatch::getorrecalc_maxweight (270,000,000 samples, 0.04%)</title><rect x="1074.4" y="549" width="0.5" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1077.44" y="559.5" ></text>
</g>
<g >
<title>Xapian::Internal::QueryBranch::do_or_like (9,680,000,000 samples, 1.44%)</title><rect x="142.5" y="469" width="17.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="145.50" y="479.5" ></text>
</g>
<g >
<title>blk_mq_flush_plug_list (60,000,000 samples, 0.01%)</title><rect x="830.2" y="165" width="0.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="833.16" y="175.5" ></text>
</g>
<g >
<title>ext4_mpage_readpages (70,000,000 samples, 0.01%)</title><rect x="122.9" y="197" width="0.1" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="125.87" y="207.5" ></text>
</g>
<g >
<title>submit_bio (90,000,000 samples, 0.01%)</title><rect x="829.2" y="165" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="832.17" y="175.5" ></text>
</g>
<g >
<title>GlassTable::prev_for_sequential (1,860,000,000 samples, 0.28%)</title><rect x="855.1" y="469" width="3.3" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="858.08" y="479.5" ></text>
</g>
<g >
<title>__seccomp_filter (530,000,000 samples, 0.08%)</title><rect x="99.2" y="357" width="0.9" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="102.16" y="367.5" ></text>
</g>
<g >
<title>GlassPostList::move_to_chunk_containing (87,690,000,000 samples, 13.09%)</title><rect x="778.4" y="501" width="154.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="781.38" y="511.5" >GlassPostList::move..</text>
</g>
<g >
<title>Glass::compare&lt;Glass::LeafItem, Glass::LeafItem&gt; (60,000,000 samples, 0.01%)</title><rect x="784.8" y="453" width="0.1" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="787.77" y="463.5" ></text>
</g>
<g >
<title>blk_mq_flush_plug_list (60,000,000 samples, 0.01%)</title><rect x="910.3" y="181" width="0.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="913.25" y="191.5" ></text>
</g>
<g >
<title>filemap_read (740,000,000 samples, 0.11%)</title><rect x="1016.8" y="309" width="1.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1019.78" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (170,000,000 samples, 0.03%)</title><rect x="1187.7" y="645" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1190.71" y="655.5" ></text>
</g>
<g >
<title>opentelemetry::proto::trace::v1::Span::Span (70,000,000 samples, 0.01%)</title><rect x="1150.7" y="485" width="0.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1153.66" y="495.5" ></text>
</g>
<g >
<title>do_dentry_open (150,000,000 samples, 0.02%)</title><rect x="20.4" y="517" width="0.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="23.37" y="527.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (160,000,000 samples, 0.02%)</title><rect x="143.1" y="245" width="0.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="146.09" y="255.5" ></text>
</g>
<g >
<title>rmqueue (90,000,000 samples, 0.01%)</title><rect x="828.3" y="149" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="831.31" y="159.5" ></text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (70,000,000 samples, 0.01%)</title><rect x="858.2" y="373" width="0.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="861.18" y="383.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (230,000,000 samples, 0.03%)</title><rect x="148.2" y="213" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="151.19" y="223.5" ></text>
</g>
<g >
<title>generic_file_read_iter (790,000,000 samples, 0.12%)</title><rect x="1014.4" y="325" width="1.4" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1017.42" y="335.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,770,000,000 samples, 0.41%)</title><rect x="108.7" y="437" width="4.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="111.69" y="447.5" ></text>
</g>
<g >
<title>__alloc_pages (160,000,000 samples, 0.02%)</title><rect x="828.2" y="181" width="0.3" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="831.18" y="191.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (25,540,000,000 samples, 3.81%)</title><rect x="790.4" y="405" width="44.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="793.36" y="415.5" >entr..</text>
</g>
<g >
<title>GlassDatabase::get_doclength (2,600,000,000 samples, 0.39%)</title><rect x="137.6" y="533" width="4.6" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="140.59" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, opentelemetry::v1::sdk::common::GetHashForAttributeValueVisitor, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (60,000,000 samples, 0.01%)</title><rect x="1153.8" y="389" width="0.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1156.76" y="399.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (240,000,000 samples, 0.04%)</title><rect x="1188.0" y="661" width="0.4" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1191.01" y="671.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (2,410,000,000 samples, 0.36%)</title><rect x="108.9" y="373" width="4.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="111.92" y="383.5" ></text>
</g>
<g >
<title>__page_cache_alloc (160,000,000 samples, 0.02%)</title><rect x="828.2" y="213" width="0.3" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="831.18" y="223.5" ></text>
</g>
<g >
<title>rocksdb::DBImplReadOnly::Get (4,980,000,000 samples, 0.74%)</title><rect x="150.0" y="341" width="8.8" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="153.04" y="351.5" ></text>
</g>
<g >
<title>GlassTable::find_in_leaf (240,000,000 samples, 0.04%)</title><rect x="1011.6" y="453" width="0.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1014.62" y="463.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (570,000,000 samples, 0.09%)</title><rect x="13.8" y="677" width="1.0" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="16.75" y="687.5" ></text>
</g>
<g >
<title>GlassTable::read_block (380,000,000 samples, 0.06%)</title><rect x="941.1" y="421" width="0.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="944.11" y="431.5" ></text>
</g>
<g >
<title>rocksdb::(anonymous namespace)::SkipListRep::Get (270,000,000 samples, 0.04%)</title><rect x="1149.3" y="501" width="0.5" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1152.34" y="511.5" ></text>
</g>
<g >
<title>Xapian::Query::Internal::postlist_sub_and_like (9,640,000,000 samples, 1.44%)</title><rect x="142.6" y="453" width="17.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="145.57" y="463.5" ></text>
</g>
<g >
<title>populate_seccomp_data (80,000,000 samples, 0.01%)</title><rect x="100.1" y="357" width="0.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="103.10" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (170,000,000 samples, 0.03%)</title><rect x="143.1" y="261" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="146.09" y="271.5" ></text>
</g>
<g >
<title>filemap_get_pages (6,690,000,000 samples, 1.00%)</title><rect x="82.8" y="309" width="11.7" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="85.75" y="319.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::HistogramPointData::HistogramPointData (60,000,000 samples, 0.01%)</title><rect x="1189.4" y="69" width="0.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1192.37" y="79.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::map (70,000,000 samples, 0.01%)</title><rect x="1156.5" y="501" width="0.1" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="1159.52" y="511.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (170,000,000 samples, 0.03%)</title><rect x="113.3" y="421" width="0.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="116.27" y="431.5" ></text>
</g>
<g >
<title>std::visit&lt;opentelemetry::v1::sdk::common::AttributeConverter&amp;, std::variant&lt;bool, int, long, unsigned int, double, char const*, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, opentelemetry::v1::nostd::span&lt;bool const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;int const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;long const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;unsigned int const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;double const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const, 18446744073709551615ul&gt;, unsigned long, opentelemetry::v1::nostd::span&lt;unsigned long const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;unsigned char const, 18446744073709551615ul&gt; &gt;&amp;&gt; (60,000,000 samples, 0.01%)</title><rect x="1155.6" y="453" width="0.1" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1158.57" y="463.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (310,000,000 samples, 0.05%)</title><rect x="1162.8" y="613" width="0.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1165.84" y="623.5" ></text>
</g>
<g >
<title>vfs_read (360,000,000 samples, 0.05%)</title><rect x="942.2" y="357" width="0.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="945.16" y="367.5" ></text>
</g>
<g >
<title>opentelemetry::v1::common::KeyValueIterableView&lt;std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::ForEachKeyValue (270,000,000 samples, 0.04%)</title><rect x="1154.1" y="517" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1157.06" y="527.5" ></text>
</g>
<g >
<title>GlassTable::next_for_sequential (250,000,000 samples, 0.04%)</title><rect x="148.2" y="341" width="0.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="151.16" y="351.5" ></text>
</g>
<g >
<title>__strlen_evex (70,000,000 samples, 0.01%)</title><rect x="26.6" y="645" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="29.55" y="655.5" ></text>
</g>
<g >
<title>__add_to_page_cache_locked (480,000,000 samples, 0.07%)</title><rect x="907.3" y="213" width="0.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="910.29" y="223.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::LongHistogramAggregation::LongHistogramAggregation (210,000,000 samples, 0.03%)</title><rect x="1156.1" y="421" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1159.06" y="431.5" ></text>
</g>
<g >
<title>__libc_pread (80,000,000 samples, 0.01%)</title><rect x="237.0" y="453" width="0.1" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="240.00" y="463.5" ></text>
</g>
<g >
<title>Xapian::MSet::Internal::get_doc_by_index (490,000,000 samples, 0.07%)</title><rect x="1146.1" y="581" width="0.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1149.08" y="591.5" ></text>
</g>
<g >
<title>aisearch::SUSearchRequest::~SUSearchRequest (90,000,000 samples, 0.01%)</title><rect x="31.3" y="613" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="34.34" y="623.5" ></text>
</g>
<g >
<title>Xapian::MiniRankWeight::clone (60,000,000 samples, 0.01%)</title><rect x="1145.6" y="581" width="0.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1148.57" y="591.5" ></text>
</g>
<g >
<title>generic_file_read_iter (2,410,000,000 samples, 0.36%)</title><rect x="108.9" y="357" width="4.3" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="111.92" y="367.5" ></text>
</g>
<g >
<title>exit_to_user_mode_loop (70,000,000 samples, 0.01%)</title><rect x="1153.0" y="469" width="0.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1156.03" y="479.5" ></text>
</g>
<g >
<title>new_sync_read (130,000,000 samples, 0.02%)</title><rect x="241.9" y="357" width="0.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="244.94" y="367.5" ></text>
</g>
<g >
<title>alloc_pages (60,000,000 samples, 0.01%)</title><rect x="934.3" y="213" width="0.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="937.34" y="223.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;__gnu_cxx::__normal_iterator&lt;Xapian::Internal::MSetItem*, std::vector&lt;Xapian::Internal::MSetItem, std::allocator&lt;Xapian::Internal::MSetItem&gt; &gt; &gt;, long, Xapian::Internal::MSetItem, __gnu_cxx::__ops::_Iter_comp_val&lt;bool  (5,430,000,000 samples, 0.81%)</title><rect x="1131.6" y="549" width="9.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1134.64" y="559.5" ></text>
</g>
<g >
<title>new_sync_read (2,500,000,000 samples, 0.37%)</title><rect x="118.7" y="357" width="4.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="121.73" y="367.5" ></text>
</g>
<g >
<title>GlassPostList::skip_to (362,880,000,000 samples, 54.16%)</title><rect x="296.4" y="517" width="639.1" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="299.41" y="527.5" >GlassPostList::skip_to</text>
</g>
<g >
<title>__fget_light (450,000,000 samples, 0.07%)</title><rect x="790.6" y="341" width="0.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="793.60" y="351.5" ></text>
</g>
<g >
<title>filemap_get_pages (340,000,000 samples, 0.05%)</title><rect x="934.1" y="293" width="0.6" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="937.10" y="303.5" ></text>
</g>
<g >
<title>__GI_____strtoll_l_internal (70,000,000 samples, 0.01%)</title><rect x="1148.1" y="597" width="0.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1151.05" y="607.5" ></text>
</g>
<g >
<title>GlassTable::read_block (2,860,000,000 samples, 0.43%)</title><rect x="118.4" y="453" width="5.0" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="121.38" y="463.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (980,000,000 samples, 0.15%)</title><rect x="833.4" y="373" width="1.8" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="836.45" y="383.5" ></text>
</g>
<g >
<title>[libjemalloc.so.2] (330,000,000 samples, 0.05%)</title><rect x="114.9" y="549" width="0.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="117.93" y="559.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (2,600,000,000 samples, 0.39%)</title><rect x="108.7" y="421" width="4.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="111.69" y="431.5" ></text>
</g>
<g >
<title>GlassTable::form_key (60,000,000 samples, 0.01%)</title><rect x="105.9" y="501" width="0.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="108.94" y="511.5" ></text>
</g>
<g >
<title>__GI___pthread_enable_asynccancel (120,000,000 samples, 0.02%)</title><rect x="43.1" y="453" width="0.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="46.14" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;opentelemetry::v1::sdk::trace::Span*,  (400,000,000 samples, 0.06%)</title><rect x="1160.5" y="549" width="0.7" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1163.47" y="559.5" ></text>
</g>
<g >
<title>blk_flush_plug_list (70,000,000 samples, 0.01%)</title><rect x="830.1" y="181" width="0.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="833.14" y="191.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (140,000,000 samples, 0.02%)</title><rect x="1162.6" y="613" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1165.60" y="623.5" ></text>
</g>
<g >
<title>__strlen_evex (370,000,000 samples, 0.06%)</title><rect x="1067.0" y="533" width="0.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1070.02" y="543.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (80,000,000 samples, 0.01%)</title><rect x="123.3" y="389" width="0.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="126.27" y="399.5" ></text>
</g>
<g >
<title>BranchPostList::~BranchPostList (180,000,000 samples, 0.03%)</title><rect x="1074.1" y="501" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1077.12" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (140,000,000 samples, 0.02%)</title><rect x="241.9" y="405" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="244.94" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (140,000,000 samples, 0.02%)</title><rect x="1162.6" y="597" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1165.60" y="607.5" ></text>
</g>
<g >
<title>kl::server::Handler::sync_ShardSearch (640,690,000,000 samples, 95.62%)</title><rect x="33.1" y="613" width="1128.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="36.05" y="623.5" >kl::server::Handler::sync_ShardSearch</text>
</g>
<g >
<title>copy_page_to_iter (90,000,000 samples, 0.01%)</title><rect x="855.9" y="293" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="858.90" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::_Copy_ctor_base (60,000,000 samples, 0.01%)</title><rect x="1154.9" y="229" width="0.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1157.88" y="239.5" ></text>
</g>
<g >
<title>lru_cache_add (140,000,000 samples, 0.02%)</title><rect x="908.2" y="213" width="0.2" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="911.16" y="223.5" ></text>
</g>
<g >
<title>do_syscall_64 (380,000,000 samples, 0.06%)</title><rect x="941.1" y="373" width="0.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="944.11" y="383.5" ></text>
</g>
<g >
<title>vfs_read (2,610,000,000 samples, 0.39%)</title><rect x="118.7" y="373" width="4.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="121.68" y="383.5" ></text>
</g>
<g >
<title>google::protobuf::internal::RepeatedPtrFieldBase::DestroyProtos (60,000,000 samples, 0.01%)</title><rect x="1188.0" y="485" width="0.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1191.05" y="495.5" ></text>
</g>
<g >
<title>google::protobuf::internal::MapMergeFrom&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, sky_work::common::AbtestList&gt; (270,000,000 samples, 0.04%)</title><rect x="1157.3" y="549" width="0.5" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1160.31" y="559.5" ></text>
</g>
<g >
<title>std::__do_visit&lt;std::__detail::__variant::__deduce_visit_result&lt;std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;, opentelemetry::v1::sdk::common::AttributeConverter&amp;, std::variant&lt;bool, int, long, unsigned int, double, char const*, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, opentelemetry::v1::nostd::span&lt;bool const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;int const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;long const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;unsigned int const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;double const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const, 18446744073709551615ul&gt;, unsigned long, opentelemetry::v1::nostd::span&lt;unsigned long const, 18446744073709551615ul&gt;, opentelemetry::v1::nostd::span&lt;unsigned char const, 18446744073709551615ul&gt; &gt;&amp;&gt; (120,000,000 samples, 0.02%)</title><rect x="1153.5" y="437" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1156.46" y="447.5" ></text>
</g>
<g >
<title>[libjemalloc.so.2] (470,000,000 samples, 0.07%)</title><rect x="12.9" y="677" width="0.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="15.92" y="687.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (960,000,000 samples, 0.14%)</title><rect x="106.2" y="373" width="1.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="109.23" y="383.5" ></text>
</g>
<g >
<title>xas_start (150,000,000 samples, 0.02%)</title><rect x="905.5" y="245" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="908.51" y="255.5" ></text>
</g>
<g >
<title>rw_verify_area (610,000,000 samples, 0.09%)</title><rect x="96.4" y="373" width="1.0" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="99.36" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TermFreqs&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TermFreqs&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TermFreqs&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (100,000,000 samples, 0.01%)</title><rect x="124.3" y="517" width="0.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="127.28" y="527.5" ></text>
</g>
<g >
<title>filemap_get_read_batch (140,000,000 samples, 0.02%)</title><rect x="107.6" y="309" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="110.58" y="319.5" ></text>
</g>
<g >
<title>handle_request_stat_log (520,000,000 samples, 0.08%)</title><rect x="1188.9" y="613" width="1.0" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1191.94" y="623.5" ></text>
</g>
<g >
<title>__libc_pread (26,470,000,000 samples, 3.95%)</title><rect x="788.7" y="421" width="46.6" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="791.72" y="431.5" >__li..</text>
</g>
<g >
<title>generic_file_read_iter (230,000,000 samples, 0.03%)</title><rect x="148.2" y="197" width="0.4" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="151.19" y="207.5" ></text>
</g>
<g >
<title>vfs_read (140,000,000 samples, 0.02%)</title><rect x="143.1" y="229" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="146.12" y="239.5" ></text>
</g>
<g >
<title>__x2apic_send_IPI_mask (240,000,000 samples, 0.04%)</title><rect x="22.0" y="453" width="0.4" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="25.01" y="463.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::common::OrderedAttributeMap::SetAttribute (60,000,000 samples, 0.01%)</title><rect x="1155.8" y="453" width="0.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1158.78" y="463.5" ></text>
</g>
<g >
<title>do_syscall_64 (990,000,000 samples, 0.15%)</title><rect x="1166.3" y="645" width="1.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1169.26" y="655.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (880,000,000 samples, 0.13%)</title><rect x="1014.3" y="389" width="1.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1017.26" y="399.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::common::GetHashForAttributeMap (70,000,000 samples, 0.01%)</title><rect x="1189.0" y="277" width="0.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1191.96" y="287.5" ></text>
</g>
<g >
<title>apache::thrift::concurrency::ThreadManager::Impl::~Impl (280,000,000 samples, 0.04%)</title><rect x="1161.9" y="661" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1164.91" y="671.5" ></text>
</g>
<g >
<title>new_sync_write (900,000,000 samples, 0.13%)</title><rect x="1166.3" y="581" width="1.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1169.35" y="591.5" ></text>
</g>
<g >
<title>GlassTable::read_block (60,000,000 samples, 0.01%)</title><rect x="1072.7" y="453" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1075.71" y="463.5" ></text>
</g>
<g >
<title>Xapian::Internal::QueryScaleWeight::get_description[abi:cxx11] (320,000,000 samples, 0.05%)</title><rect x="1147.2" y="549" width="0.5" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1150.15" y="559.5" ></text>
</g>
<g >
<title>Xapian::Internal::QueryOr::postlist (90,000,000 samples, 0.01%)</title><rect x="142.6" y="437" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="145.61" y="447.5" ></text>
</g>
<g >
<title>apache::thrift::detail::deserializeRequestBody&lt;apache::thrift::CompactProtocolReader, apache::thrift::ThriftPresult&lt;false, apache::thrift::FieldData&lt; (90,000,000 samples, 0.01%)</title><rect x="27.4" y="613" width="0.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="30.43" y="623.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (1,600,000,000 samples, 0.24%)</title><rect x="97.5" y="405" width="2.8" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="100.47" y="415.5" ></text>
</g>
<g >
<title>Xapian::Internal::QueryBranch::gather_terms (150,000,000 samples, 0.02%)</title><rect x="117.2" y="501" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="120.16" y="511.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::DefaultAggregation::CreateAggregation (60,000,000 samples, 0.01%)</title><rect x="1154.7" y="437" width="0.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1157.67" y="447.5" ></text>
</g>
<g >
<title>__x64_sys_getdents64 (90,000,000 samples, 0.01%)</title><rect x="1188.7" y="549" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1191.73" y="559.5" ></text>
</g>
<g >
<title>filemap_get_pages (120,000,000 samples, 0.02%)</title><rect x="942.5" y="277" width="0.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="945.55" y="287.5" ></text>
</g>
<g >
<title>page_cache_async_ra (90,000,000 samples, 0.01%)</title><rect x="122.0" y="277" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="125.02" y="287.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (490,000,000 samples, 0.07%)</title><rect x="933.2" y="293" width="0.9" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="936.23" y="303.5" ></text>
</g>
<g >
<title>folly::FormatArg::initSlow (60,000,000 samples, 0.01%)</title><rect x="1163.4" y="661" width="0.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1166.44" y="671.5" ></text>
</g>
<g >
<title>kl::server::Handler::get_db (290,000,000 samples, 0.04%)</title><rect x="1152.7" y="597" width="0.5" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="1155.68" y="607.5" ></text>
</g>
<g >
<title>ext4_map_blocks (60,000,000 samples, 0.01%)</title><rect x="830.4" y="165" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="833.35" y="175.5" ></text>
</g>
<g >
<title>ext4_mpage_readpages (300,000,000 samples, 0.04%)</title><rect x="909.0" y="197" width="0.5" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="911.98" y="207.5" ></text>
</g>
<g >
<title>filemap_read (920,000,000 samples, 0.14%)</title><rect x="933.2" y="309" width="1.6" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="936.16" y="319.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::variant&lt;bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; &gt;::operator[] (140,000,000 samples, 0.02%)</title><rect x="1154.2" y="437" width="0.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1157.21" y="447.5" ></text>
</g>
<g >
<title>Xapian::Query::Internal::postlist_sub_and_like (90,000,000 samples, 0.01%)</title><rect x="142.6" y="405" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="145.61" y="415.5" ></text>
</g>
<g >
<title>worker_thread (520,000,000 samples, 0.08%)</title><rect x="1188.9" y="661" width="1.0" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1191.94" y="671.5" ></text>
</g>
<g >
<title>alloc_pages (160,000,000 samples, 0.02%)</title><rect x="828.2" y="197" width="0.3" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="831.18" y="207.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::MetricCollector::Collect (520,000,000 samples, 0.08%)</title><rect x="1188.9" y="501" width="1.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1191.94" y="511.5" ></text>
</g>
<g >
<title>filemap_get_read_batch (210,000,000 samples, 0.03%)</title><rect x="146.9" y="133" width="0.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="149.94" y="143.5" ></text>
</g>
<g >
<title>blk_mq_submit_bio (60,000,000 samples, 0.01%)</title><rect x="909.3" y="133" width="0.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="912.30" y="143.5" ></text>
</g>
<g >
<title>Xapian::MiniRankWeight::MiniRankWeight (230,000,000 samples, 0.03%)</title><rect x="148.9" y="389" width="0.4" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="151.88" y="399.5" ></text>
</g>
<g >
<title>GlassPostList::move_to_chunk_containing (220,000,000 samples, 0.03%)</title><rect x="236.8" y="517" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="239.83" y="527.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::SyncMetricStorage::Collect (520,000,000 samples, 0.08%)</title><rect x="1188.9" y="389" width="1.0" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="1191.94" y="399.5" ></text>
</g>
<g >
<title>GlassTable::block_to_cursor (170,000,000 samples, 0.03%)</title><rect x="143.1" y="325" width="0.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="146.09" y="335.5" ></text>
</g>
<g >
<title>GlassCursor::get_key (330,000,000 samples, 0.05%)</title><rect x="859.3" y="485" width="0.6" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="862.32" y="495.5" ></text>
</g>
<g >
<title>workingset_activation (170,000,000 samples, 0.03%)</title><rect x="831.7" y="261" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="834.72" y="271.5" ></text>
</g>
<g >
<title>GlassTable::next_for_sequential (100,000,000 samples, 0.01%)</title><rect x="237.0" y="485" width="0.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="239.97" y="495.5" ></text>
</g>
<g >
<title>aisearch::AbtestList::write&lt;apache::thrift::CompactProtocolWriter&gt; (80,000,000 samples, 0.01%)</title><rect x="28.0" y="421" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="31.03" y="431.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::common::OrderedAttributeMap::OrderedAttributeMap (270,000,000 samples, 0.04%)</title><rect x="1154.1" y="533" width="0.4" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1157.06" y="543.5" ></text>
</g>
<g >
<title>blk_mq_flush_plug_list (130,000,000 samples, 0.02%)</title><rect x="908.8" y="181" width="0.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="911.75" y="191.5" ></text>
</g>
<g >
<title>opentelemetry::v1::sdk::metrics::Meter::Collect (520,000,000 samples, 0.08%)</title><rect x="1188.9" y="405" width="1.0" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1191.94" y="415.5" ></text>
</g>
<g >
<title>vfs_read (240,000,000 samples, 0.04%)</title><rect x="148.2" y="245" width="0.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="151.18" y="255.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;__gnu_cxx::__normal_iterator&lt;Xapian::Internal::MSetItem*, std::vector&lt;Xapian::Internal::MSetItem, std::allocator&lt;Xapian::Internal::MSetItem&gt; &gt; &gt;, long, Xapian::Internal::MSetItem, __gnu_cxx::__ops::_Iter_comp_val&lt;bool  (1,730,000,000 samples, 0.26%)</title><rect x="1128.2" y="517" width="3.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1131.22" y="527.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (380,000,000 samples, 0.06%)</title><rect x="941.1" y="389" width="0.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="944.11" y="399.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (70,000,000 samples, 0.01%)</title><rect x="237.0" y="357" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="240.02" y="367.5" ></text>
</g>
<g >
<title>GlassTable::read_block (1,110,000,000 samples, 0.17%)</title><rect x="106.1" y="485" width="1.9" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="109.07" y="495.5" ></text>
</g>
<g >
<title>GlassCursor::find_entry (44,300,000,000 samples, 6.61%)</title><rect x="781.3" y="485" width="78.0" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="784.30" y="495.5" >GlassCurs..</text>
</g>
<g >
<title>apache::thrift::detail::pm::protocol_methods&lt;apache::thrift::type_class::map&lt;apache::thrift::type_class::string, apache::thrift::type_class::structure&gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, aisearch::AbtestList, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, aisearch::AbtestList&gt; &gt; &gt;, void&gt;::read&lt;apache::thrift::CompactProtocolReader, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, aisearch::AbtestList, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, aisearch::AbtestList&gt; &gt; &gt; &gt; (230,000,000 samples, 0.03%)</title><rect x="29.2" y="565" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="32.21" y="575.5" ></text>
</g>
<g >
<title>bvar_sampler (90,000,000 samples, 0.01%)</title><rect x="1188.7" y="693" width="0.2" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="1191.73" y="703.5" ></text>
</g>
<g >
<title>__alloc_file (60,000,000 samples, 0.01%)</title><rect x="20.2" y="533" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="23.20" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, bool, int, unsigned int, long, double, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, std::vector&lt;long, std::allocator&lt;long&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::_Copy_assign_base (60,000,000 samples, 0.01%)</title><rect x="1154.9" y="261" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1157.88" y="271.5" ></text>
</g>
<g >
<title>GlassTable::read_tag (850,000,000 samples, 0.13%)</title><rect x="916.7" y="469" width="1.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="919.68" y="479.5" ></text>
</g>
<g >
<title>GlassPostList::skip_to (60,000,000 samples, 0.01%)</title><rect x="943.1" y="485" width="0.1" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="946.13" y="495.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;aisearch::SUDocItem*, std::vector&lt;aisearch::SUDocItem, std::allocator&lt;aisearch::SUDocItem&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;kl::server::Handler::future_Search (80,000,000 samples, 0.01%)</title><rect x="10.8" y="533" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="13.81" y="543.5" ></text>
</g>
<g >
<title>LeafPostList::get_weight (530,000,000 samples, 0.08%)</title><rect x="1047.5" y="517" width="1.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1050.53" y="527.5" ></text>
</g>
<g >
<title>rocksdb::BlockBasedTable::Get (120,000,000 samples, 0.02%)</title><rect x="160.0" y="325" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="163.03" y="335.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (350,000,000 samples, 0.05%)</title><rect x="942.2" y="325" width="0.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="945.18" y="335.5" ></text>
</g>
<g >
<title>kl::storage::Storage::get (5,030,000,000 samples, 0.75%)</title><rect x="150.0" y="357" width="8.8" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="152.95" y="367.5" ></text>
</g>
<g >
<title>blk_mq_flush_plug_list (80,000,000 samples, 0.01%)</title><rect x="122.7" y="181" width="0.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="125.73" y="191.5" ></text>
</g>
<g >
<title>posix_fadvise (190,000,000 samples, 0.03%)</title><rect x="117.6" y="533" width="0.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="120.64" y="543.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (14,540,000,000 samples, 2.17%)</title><rect x="795.6" y="277" width="25.6" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="798.59" y="287.5" >c..</text>
</g>
<g >
<title>generic_file_read_iter (950,000,000 samples, 0.14%)</title><rect x="106.2" y="357" width="1.7" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="109.24" y="367.5" ></text>
</g>
<g >
<title>ondemand_readahead (170,000,000 samples, 0.03%)</title><rect x="934.3" y="261" width="0.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="937.33" y="271.5" ></text>
</g>
<g >
<title>rdk:main (80,000,000 samples, 0.01%)</title><rect x="1189.9" y="693" width="0.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1192.86" y="703.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (240,000,000 samples, 0.04%)</title><rect x="1188.0" y="645" width="0.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1191.01" y="655.5" ></text>
</g>
<g >
<title>ktime_get_coarse_real_ts64 (90,000,000 samples, 0.01%)</title><rect x="912.9" y="245" width="0.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="915.88" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (100,000,000 samples, 0.01%)</title><rect x="918.6" y="469" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="921.58" y="479.5" ></text>
</g>
<g >
<title>GlassTable::read_block (26,760,000,000 samples, 3.99%)</title><rect x="788.3" y="437" width="47.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="791.28" y="447.5" >Glas..</text>
</g>
</g>
</svg>
